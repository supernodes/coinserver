#!/bin/sh
# This script is written by DirectAdmin and Martynas Bendorius (smtalk)

BUILDSCRIPT_VER=2.0.0-RC6
NAME=custombuild

OS=`uname`
WORKDIR=/usr/local/directadmin/${NAME}
OPTIONS_CONF=${WORKDIR}/options.conf
VERSIONS_FILE=${WORKDIR}/versions.txt
VERSIONS_FILE_CL=${WORKDIR}/versions_cl.txt
LOCKFILE=${WORKDIR}/.custombuild
LOGFILE=${WORKDIR}/custombuild.log
PROFTPD_PREFIX=/usr
B64=0
CPU_CORES=1
DA_BIN=/usr/local/directadmin/directadmin

LANG=C

if [ -s /usr/local/directadmin/directadmin ] && [ -s /usr/local/directadmin/conf/directadmin.conf ]; then
	DIRECTADMIN_CHECK="`/usr/local/directadmin/directadmin v | awk '{ print $3 }' | cut -d. -f3`"
	if [ "${DIRECTADMIN_CHECK}" -lt 43 ]; then
		echo "CustomBuild 2.0 needs DirectAdmin 1.43 or higher to be installed on the system. Please update it."
		exit 0;
	fi
fi

LOG_IP=localhost
if [ `who | wc -l` -gt 0 ]; then
	if [ ${OS} = "FreeBSD" ]; then
		LOG_IP=`env | grep REMOTEHOST | cut -d= -f2`
	else
		LOG_IP=`echo $SSH_CLIENT | cut -d' ' -f1`
	fi
fi

if [ ! -d ${WORKDIR}/patches ]; then
	mkdir -p ${WORKDIR}/patches
	chmod 700 ${WORKDIR}/patches
fi

if [ ! -e ${LOGFILE} ]; then
	touch ${LOGFILE}
	chmod 600 ${LOGFILE}
else
	if [ ${OS} = "FreeBSD" ]; then
		LOGSIZE=`stat -f %z ${LOGFILE}`
	else
		LOGSIZE=`stat -c %s ${LOGFILE}`
	fi
	
	#Rotate the logfile if the filesize is >10MB
	if [ ${LOGSIZE} -gt 10485760 ]; then
		rm -f ${LOGFILE}.1
		mv ${LOGFILE} ${LOGFILE}.1
		touch ${LOGFILE}
		chmod 600 ${LOGFILE}
	fi
fi

B64COUNT=`uname -m | grep -c 64`
if [ "$B64COUNT" -eq 1 ]; then
	B64=1
	LD_LIBRARY_PATH=/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
	export LD_LIBRARY_PATH
fi



if [ ${OS} = "FreeBSD" ]; then
	#if [ "`sysctl -a | grep kern.threads.virtual_cpu | cut -d' ' -f2`" -gt 1 ]; then
	#	CPU_CORES="`sysctl -a | grep kern.threads.virtual_cpu | cut -d' ' -f2`"
	#fi
	CPU_CORES=`/sbin/sysctl hw.ncpu | cut -d\  -f2`
	PROFTPD_PREFIX=/usr/local
else
	if [ "`cat /proc/cpuinfo | grep 'model name' | wc -l`" -gt 0 ]; then
		CPU_CORES="`cat /proc/cpuinfo | grep 'model name' | wc -l`"
	fi
fi

#check path for /usr/local/bin
COUNT=`echo "${PATH}" | grep -c /usr/local/bin:`
if [ "${COUNT}" -eq 0 ]; then
	export PATH=/usr/local/bin:$PATH
fi


# Main variables
HTTPDDIR=/etc/httpd
HTTPDCONF=/etc/httpd/conf
HTTPD_CONF=${HTTPDCONF}/httpd.conf

NGINXCONF=/etc/nginx

DEBIAN_VERSION=/etc/debian_version
WWWDIR=/var/www/html

# Variables for jailed shell
SHELLS=/etc/shells
JAIL_DIR=${WORKDIR}/jail

DACONF_FILE=/usr/local/directadmin/conf/directadmin.conf
DACONF_TEMPLATE_FILE=/usr/local/directadmin/data/templates/directadmin.conf
SERVICES=/usr/local/directadmin/data/admin/services.status
TASK_QUEUE=/usr/local/directadmin/data/task.queue.cb


#CWD=`pwd`
CWD=${WORKDIR}
FORCE=0
HIDE_CHANGES=0

# Applications variables
APPUSER=webapps
ECHO=echo
STRINGS=/usr/bin/strings
STAT=/usr/bin/stat
TR=/usr/bin/tr
READLINK=/usr/bin/readlink

if [ "${OS}" = "FreeBSD" ]; then
        WGET=/usr/local/bin/wget
        TAR=/usr/bin/tar
        CHOWN=/usr/sbin/chown
	MYSQL_DATA=/home/mysql
	MYSQL_BIN=/usr/local/mysql/bin/mysql
else
        WGET=/usr/bin/wget
        TAR=/bin/tar
        CHOWN=/bin/chown
	if [ -e /etc/debian_version ]; then
		MYSQL_DATA=/home/mysql
		MYSQL_BIN=/usr/local/mysql/bin/mysql
		ECHO=/bin/echo
	else
		MYSQL_DATA=/var/lib/mysql
		MYSQL_BIN=/usr/bin/mysql
	fi
fi

# Check if workdir exists
if [ ! -d ${WORKDIR} ]; then
	echo "Directory ${WORKDIR} does not exist."
	exit 1
fi

#MySQL settings
DA_MYSQL=/usr/local/directadmin/conf/mysql.conf
if [ -s ${DA_MYSQL} ]; then
	MYSQLUSER=`grep "^user=" ${DA_MYSQL} | cut -d= -f2`
	MYSQLPASSWORD=`grep "^passwd=" ${DA_MYSQL} | cut -d= -f2`
else
	MYSQLUSER='da_admin'
	MYSQLPASSWORD='nothing'
fi

if [ -s $DA_MYSQL ] && [ `grep -c -e "^host=" ${DA_MYSQL}` -gt "0" ]; then
	MYSQLHOST=`grep "^host=" ${DA_MYSQL} | cut -d= -f2`
else
	MYSQLHOST=localhost
fi

#Where connections to mysql are from. Usualy the server IP, unless on a LAN.
MYSQL_ACCESS_HOST=localhost
if [ "$MYSQLHOST" != "localhost" ]; then
	#its a remote databsae, so connections would come from the server IP.
	if [ -s ${WORKDIR}/scripts/setup.txt ]; then
		MYSQL_ACCESS_HOST=`cat ${WORKDIR}/scripts/setup.txt | grep -e '^ip=' | cut -d= -f2`
	fi
	
	#if we're on a LAN, then things change.
 	if [ -s ${DA_MYSQL} ]; then
		if [ `grep -c -e "^access_host=" ${DA_MYSQL}` = "0" ]; then
			MYSQL_ACCESS_HOST=`grep "^access_host=" ${DA_MYSQL} | cut -d= -f2`
		fi
	fi
fi
	
# Write options.conf
if [ ! -e ${OPTIONS_CONF} ]; then
	echo "Cannot find ${OPTIONS_CONF}, writing defaults."
	echo -n "" > ${OPTIONS_CONF}
	echo "#PHP settings." >> ${OPTIONS_CONF}
	echo "#Default version of PHP is always php1_release. Possible values for php1/php2_release: 5.3, 5.4, 5.5, no. php1/php2_mode: mod_php, fastcgi, php-fpm or suphp)" >> ${OPTIONS_CONF}
	echo "php1_release=5.5" >> ${OPTIONS_CONF}
	echo "php2_release=no" >> ${OPTIONS_CONF}
	if [ "${OS}" = "FreeBSD" ]; then
		echo "php1_mode=suphp" >> ${OPTIONS_CONF}
	else
		echo "php1_mode=mod_php" >> ${OPTIONS_CONF}
	fi
	echo "php2_mode=php-fpm" >> ${OPTIONS_CONF}
	echo "htscanner=yes" >> ${OPTIONS_CONF}
	echo "php_ini=no" >> ${OPTIONS_CONF}
	echo "php_timezone=`date +%Z`" >> ${OPTIONS_CONF}
	echo "#Possible values - production or development" >> ${OPTIONS_CONF}
	echo "php_ini_type=production" >> ${OPTIONS_CONF}
	echo "ioncube=no" >> ${OPTIONS_CONF}
	echo "x-mail-header=yes" >> ${OPTIONS_CONF}
	echo "zend=no" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#HTTP server. Possible values: apache, nginx" >> ${OPTIONS_CONF}
	echo "webserver=apache" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	#CustomBuild 2.0 supports the latest release of apache only
	echo "#Apache settings" >> ${OPTIONS_CONF}
	echo "#Possible value: 2.4" >> ${OPTIONS_CONF}
	echo "apache_ver=2.4" >> ${OPTIONS_CONF}
	if [ "${OS}" = "FreeBSD" ]; then
		echo "mod_ruid2=no" >> ${OPTIONS_CONF}
	else
		echo "mod_ruid2=yes" >> ${OPTIONS_CONF}
	fi
	echo "secure_htaccess=no" >> ${OPTIONS_CONF}
	echo "harden-symlinks-patch=yes" >> ${OPTIONS_CONF}
	echo "use_hostname_for_alias=auto" >> ${OPTIONS_CONF}
	echo "redirect_host=`hostname`" >> ${OPTIONS_CONF}
	echo "redirect_host_https=no" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Possible values - 5.1, 5.5, 5.6" >> ${OPTIONS_CONF}
	echo "mysql=5.6" >> ${OPTIONS_CONF}
	echo "mysql_inst=no" >> ${OPTIONS_CONF}
	echo "mysql_backup=yes" >> ${OPTIONS_CONF}
	echo "mysql_backup_dir=/usr/local/directadmin/custombuild/mysql_backups" >> ${OPTIONS_CONF}
	if [ -s ${DEBIAN_VERSION} ]; then
		echo "mysql_force_compile=no" >> ${OPTIONS_CONF}
	fi
	echo "" >> ${OPTIONS_CONF}
	echo "#Web applications" >> ${OPTIONS_CONF}
	echo "phpmyadmin=yes" >> ${OPTIONS_CONF}
	echo "phpmyadmin_ver=4" >> ${OPTIONS_CONF}
	echo "squirrelmail=yes" >> ${OPTIONS_CONF}
	echo "roundcube=yes" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Mail options" >> ${OPTIONS_CONF}
	echo "exim=no" >> ${OPTIONS_CONF}
	echo "eximconf=no" >> ${OPTIONS_CONF}
	echo "clamav=no" >> ${OPTIONS_CONF}
# Mailman is not yet supported
#	echo "mailman=no" >> ${OPTIONS_CONF}
	echo "spamassassin=no" >> ${OPTIONS_CONF}
	echo "dovecot=yes" >> ${OPTIONS_CONF}
	echo "pigeonhole=no" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Statistics" >> ${OPTIONS_CONF}
	echo "awstats=no" >> ${OPTIONS_CONF}
	echo "webalizer=yes" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#FTP options - possible values: proftpd, pureftpd" >> ${OPTIONS_CONF}
	echo "ftpd=pureftpd" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Jailed shell" >> ${OPTIONS_CONF}
	echo "jail=no" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Autoconf/automake/libtool options" >> ${OPTIONS_CONF}
	echo "autoconf=yes" >> ${OPTIONS_CONF}
	echo "automake=yes" >> ${OPTIONS_CONF}
	echo "libtool=yes" >> ${OPTIONS_CONF}
	echo "curl=yes" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#versions of zlib, apr_util and libxml2 (experts only)" >> ${OPTIONS_CONF}
	echo "zlib=no" >> ${OPTIONS_CONF}
	echo "new_zlib=no" >> ${OPTIONS_CONF}
	echo "new_xml2=yes" >> ${OPTIONS_CONF}
	echo "new_pcre=no" >> ${OPTIONS_CONF}
	echo "new_suphp=no" >> ${OPTIONS_CONF}
	echo "old_apr_util=no" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Custombuild options" >> ${OPTIONS_CONF}
	echo "custombuild=2.0" >> ${OPTIONS_CONF}
	echo "autover=no" >> ${OPTIONS_CONF}
	echo "bold=yes" >> ${OPTIONS_CONF}
	echo "clean=yes" >> ${OPTIONS_CONF}
	echo "cleanapache=no" >> ${OPTIONS_CONF}
	echo "clean_old_tarballs=yes" >> ${OPTIONS_CONF}
	echo "clean_old_webapps=yes" >> ${OPTIONS_CONF}
	echo "downloadserver=files.directadmin.com" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Cron settings" >> ${OPTIONS_CONF}
	echo "cron=no" >> ${OPTIONS_CONF}
	echo "cron_frequency=daily" >> ${OPTIONS_CONF}
	echo "email=email@domain.com" >> ${OPTIONS_CONF}
	echo "notifications=yes" >> ${OPTIONS_CONF}
	echo "da_autoupdate=no" >> ${OPTIONS_CONF}
	echo "updates=no" >> ${OPTIONS_CONF}
	echo "webapps_updates=yes" >> ${OPTIONS_CONF}
	echo "" >> ${OPTIONS_CONF}
	echo "#Cloudlinux settings" >> ${OPTIONS_CONF}
	echo "cloudlinux=no" >> ${OPTIONS_CONF}
	echo "cagefs=no" >> ${OPTIONS_CONF}
fi

# Check if options.conf exists
if [ ! -e ${OPTIONS_CONF} ]; then
	echo "Options file options.conf does not exist."
	exit 1
fi

####################################################

cagefsctl_update()
{
	if [ "${CAGEFS_OPT}" = "yes" ] && [ -e /usr/sbin/cagefsctl ]; then
		echo "CageFS: Executing 'cagefsctl --force-update'..."
		if [ -e /usr/bin/ionice ]; then
			/usr/bin/ionice -c3 /usr/sbin/cagefsctl --force-update
		else
			/usr/sbin/cagefsctl --force-update
		fi
	fi
}

writeLog()
{
	echo "`date +'%Y-%m-%d %H:%m:%S'` ${LOG_IP}: $@" >> ${LOGFILE}
}

getVer()
{
        grep -m1 $1: ${VERSIONS_FILE} | cut -d ':' -f 2
}

getMD5()
{
        grep -m1 $1: ${VERSIONS_FILE} | cut -d ':' -f 3
}

removeLockfile()
{
	rm -f ${LOCKFILE}
	trap - INT TERM EXIT
}

do_exit()
{
	if [ "$2" != "" ]; then
		echo "$2";
	fi
	removeLockfile
	exit $1
}

getOpt()
{
		#$1 is option name
		#$2 is default value

		COUNT_OPT="`grep -c -e "^$1=" ${OPTIONS_CONF}`"
		if [ "${COUNT_OPT}" -eq 0 ]; then
			echo "$1=$2" >> ${OPTIONS_CONF}
		fi
		
		COUNT_OPT="`grep -c -e "^$1=" ${OPTIONS_CONF}`"
		if [ "${COUNT_OPT}" -ne 1 ]; then
			do_exit 1 "${OPTIONS_CONF} value $1 is damaged. Please check or delete it."
		fi
		
        grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2
}

have_php_system()
{
	#Checks to see if we can use system() based on the disable_functions
	if [ ! -s "${PHP_INI}" ]; then
		echo 1;
		return;
	fi
	
	C=`grep -c ^disable_functions ${PHP_INI}`
	if [ "${C}" -eq 0 ]; then
		echo 1;
		return;
	fi

	C=`grep ^disable_functions ${PHP_INI} | grep -c system`
	if [ "${C}" -eq 1 ]; then
		echo 0;
		return;
	fi

	echo 1;
	return;
}

secure_phpini(){
	if [ -e $1 ]; then
		COUNT_DISABLE_FUNCT="`grep -c -e disable_functions $1`"
		if [ "${COUNT_DISABLE_FUNCT}" -gt 0 ]; then
			CURRENT_DISABLE_FUNCT="`grep -m1 'disable_functions' $1`"
			NEW_DISABLE_FUNCT="exec,system,passthru,shell_exec,escapeshellarg,escapeshellcmd,proc_close,proc_open,dl,popen,show_source"
			perl -pi -e "s#${CURRENT_DISABLE_FUNCT}#disable_functions \= ${NEW_DISABLE_FUNCT}#" $1
		else
			echo "Unable to find disable_functions in $1"
		fi

		perl -pi -e 's/^register_globals = On/register_globals = Off/' $1
	fi
}

#Used to set values ON/OFF in the services.status.
#set_service name ON|OFF|delete
set_service()
{
	if [ ! -e ${SERVICES} ]; then
		#echo "Cannot find ${SERVICES}. $1 has not been set to $2";
		return
	fi
	
	SERVICE_COUNT=`grep -c "^$1=" ${SERVICES}`
	
	if [ "$2" = "delete" ]; then
		if [ "${SERVICE_COUNT}" -eq 0 ]; then
			return;
		else
			perl -pi -e "s/^${1}=.*\n//" ${SERVICES}
		fi				
		return;
	fi

	if [ "$2" = "ON" ] || [ "$2" = "OFF" ]; then
		if [ "${SERVICE_COUNT}" -eq 0 ]; then
			echo "$1=$2" >> ${SERVICES}
		else
			perl -pi -e "s/^$1=.*/$1=$2/" ${SERVICES}
		fi

		return;
	fi

	echo "setService $1: unknown option: $2";
}

setOpt()
{
		#$1 is option name
		#$2 is value
		if [ "$1" = "email" ]; then
			OPT_VALUE1="`grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2 | cut -d\@ -f 1`"
			OPT_VALUE2="`grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2 | cut -d\@ -f 2`"
			OPT_NEW_VALUE1="`echo "$2" | cut -d\@ -f 1`"
			OPT_NEW_VALUE2="`echo "$2" | cut -d\@ -f 2`"
			perl -pi -e "s#$1=${OPT_VALUE1}\@${OPT_VALUE2}#$1=${OPT_NEW_VALUE1}\@${OPT_NEW_VALUE2}#" ${WORKDIR}/options.conf
			if [ "${HIDE_CHANGES}" = "0" ]; then
				echo "Changed ${boldon}$1${boldoff} option from ${boldon}${OPT_VALUE1}@${OPT_VALUE2}${boldoff} to ${boldon}$2${boldoff}"
			fi			
		else
			OPT_VALUE="`grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2`"
			perl -pi -e "s#$1=${OPT_VALUE}#$1=$2#" ${WORKDIR}/options.conf
			if [ "${HIDE_CHANGES}" = "0" ]; then
				echo "Changed ${boldon}$1${boldoff} option from ${boldon}${OPT_VALUE}${boldoff} to ${boldon}$2${boldoff}"
			fi
		fi
}

#sets the value of $1 to $2 in the file $3
setVal()
{
        if [ ! -e $3 ]; then
                return;
        fi

        COUNT=`grep -c ${1}= ${3}`
        if [ "$COUNT" -eq 0 ]; then
                #ok, it's not there, add it.
                echo "$1=$2" >> $3
                return;
        else
                #ok, the value is already in the file $3, so use perl to regex it.
                perl -pi -e "s/`grep ${1}= ${3}`/${1}=${2}/" ${3}
        fi
}

#A > B: 1
#A = B: 0
#A < B: -1
#3rd option is descriptor
version_cmp()
{
	A=`echo $1 | cut -d- -f1`
	B=`echo $2 | cut -d- -f1`
	
	if [ "$A" = "" ] || [ "$B" = "" ]; then
		echo "version_cmp has a blank value when checking $3";
		return;
	fi

	A1=`echo $A | cut -d. -f1`
	B1=`echo $B | cut -d. -f1`

	if [ "$A1" -gt "$B1" ]; then
		echo  1;
		return;
	fi

	if [ "$A1" -lt "$B1" ]; then
		echo  -1;
		return;
	fi

	A2=`echo $A | cut -d. -f2`
	B2=`echo $B | cut -d. -f2`

	if [ "$A2" -gt "$B2" ]; then
		echo  1;
		return;
	fi

	if [ "$A2" -lt "$B2" ]; then
		echo  -1;
		return;
	fi

	A3=`echo $A | cut -d. -f3`
	B3=`echo $B | cut -d. -f3`

	if [ "$A3" -gt "$B3" ]; then
		echo  1;
		return;
	fi

	if [ "$A3" -lt "$B3" ]; then
		echo  -1;
		return;
	fi

	echo 0;
}

####################################################

#CloudLinux
CLINUX_OPT=`getOpt cloudlinux no`
CAGEFS_OPT=`getOpt cagefs no`

# Read options.conf
FTPD_OPT=`getOpt ftpd pureftpd`
JAIL_OPT=`getOpt jail no`
SPAMASSASSIN_OPT=`getOpt spamassassin no`
CLAMAV_OPT=`getOpt clamav no`
# Mailman is not yet supported
#MAILMAN_OPT=`getOpt mailman no`

WEBSERVER_OPT=`getOpt webserver apache`

HN_T=`hostname`
REDIRECT_HOST_OPT=`getOpt redirect_host ${HN_T}`
REDIRECT_HOST_HTTPS_OPT=`getOpt redirect_host_https no`
USE_HOSTNAME_FOR_ALIAS_OPT=`getOpt use_hostname_for_alias auto`

TZ_T=`date +%Z`
PHP_TIMEZONE_OPT=`getOpt php_timezone ${TZ_T}`

#Apache
APACHE_OPT=`getOpt apache_ver 2.4`
if [ "${OS}" = "FreeBSD" ]; then
	MOD_RUID2_OPT=`getOpt mod_ruid2 no`
else
	MOD_RUID2_OPT=`getOpt mod_ruid2 yes`
fi
SECURE_HTACCESS=`getOpt secure_htaccess yes`
HARDEN_SYMLINK_PATCH=`getOpt harden-symlinks-patch no`
OLD_APR_UTIL=`getOpt old_apr_util no`

#PHP
PHP1_RELEASE=`getOpt php1_release 5.5`
PHP2_RELEASE=`getOpt php2_release no`

PHP1_SHORTRELEASE=no
if [ "${PHP1_RELEASE}" = "5.3" ]; then
	PHP1_SHORTRELEASE=53
elif [ "${PHP1_RELEASE}" = "5.4" ]; then
	PHP1_SHORTRELEASE=54
elif [ "${PHP1_RELEASE}" = "5.5" ]; then
	PHP1_SHORTRELEASE=55
fi

PHP2_SHORTRELEASE=no
if [ "${PHP2_RELEASE}" = "5.3" ]; then
	PHP2_SHORTRELEASE=53
elif [ "${PHP2_RELEASE}" = "5.4" ]; then
	PHP2_SHORTRELEASE=54
elif [ "${PHP2_RELEASE}" = "5.5" ]; then
	PHP2_SHORTRELEASE=55
fi

if [ "${OS}" = "FreeBSD" ]; then
	PHP1_MODE=`getOpt php1_mode suphp`
else
	PHP1_MODE=`getOpt php1_mode mod_php`
fi
PHP2_MODE=`getOpt php2_mode php-fpm`
HTSCANNER_OPT=`getOpt htscanner yes`
PHPINITYPE_OPT=`getOpt php_ini_type production`
ZEND_OPT=`getOpt zend no`
IONCUBE_OPT=`getOpt ioncube no`
X_MAIL_HEADER_OPT=`getOpt x-mail-header yes`

HAVE_FPM_CGI=no
HAVE_FPM53_CGI=no
HAVE_FPM54_CGI=no
HAVE_FPM55_CGI=no
if [ "${PHP1_RELEASE}" != "no" ] && [ "${PHP1_MODE}" = "php-fpm" ]; then
	HAVE_FPM_CGI=yes
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
	  HAVE_FPM53_CGI=yes
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
	  HAVE_FPM54_CGI=yes
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
	  HAVE_FPM55_CGI=yes
	fi
fi
if [ "${PHP2_RELEASE}" != "no" ] && [ "${PHP2_MODE}" = "php-fpm" ]; then
	HAVE_FPM_CGI=yes
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
	  HAVE_FPM53_CGI=yes
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
	  HAVE_FPM54_CGI=yes
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
	  HAVE_FPM55_CGI=yes
	fi
fi
HAVE_FCGID=no
HAVE_FCGID53=no
HAVE_FCGID54=no
HAVE_FCGID55=no
if [ "${PHP1_RELEASE}" != "no" ] && [ "${PHP1_MODE}" = "fastcgi" ]; then
	HAVE_FCGID=yes
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
	  HAVE_FCGID53=yes
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
	  HAVE_FCGID54=yes
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
	  HAVE_FCGID55=yes
	fi
fi
if [ "${PHP2_RELEASE}" != "no" ] && [ "${PHP2_MODE}" = "fastcgi" ]; then
	HAVE_FCGID=yes
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
	  HAVE_FCGID53=yes
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
	  HAVE_FCGID54=yes
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
	  HAVE_FCGID55=yes
	fi
fi
HAVE_SUPHP_CGI=no
HAVE_SUPHP53_CGI=no
HAVE_SUPHP54_CGI=no
HAVE_SUPHP55_CGI=no
if [ "${PHP1_RELEASE}" != "no" ] && [ "${PHP1_MODE}" = "suphp" ]; then
	HAVE_SUPHP_CGI=yes
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
	  HAVE_SUPHP53_CGI=yes
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
	  HAVE_SUPHP54_CGI=yes
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
	  HAVE_SUPHP55_CGI=yes
	fi
fi
if [ "${PHP2_RELEASE}" != "no" ] && [ "${PHP2_MODE}" = "suphp" ]; then
	HAVE_SUPHP_CGI=yes
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
	  HAVE_SUPHP53_CGI=yes
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
	  HAVE_SUPHP54_CGI=yes
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
	  HAVE_SUPHP55_CGI=yes
	fi
fi
HAVE_CLI=no
HAVE_CLI53=no
HAVE_CLI54=no
HAVE_CLI55=no
if [ "${PHP1_RELEASE}" != "no" ] && [ "${PHP1_MODE}" = "mod_php" ]; then
	HAVE_CLI=yes
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
	  HAVE_CLI53=yes
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
	  HAVE_CLI54=yes
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
	  HAVE_CLI55=yes
	fi
fi
if [ "${PHP2_RELEASE}" != "no" ] && [ "${PHP2_MODE}" = "mod_php" ]; then
	HAVE_CLI=yes
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
	  HAVE_CLI53=yes
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
	  HAVE_CLI54=yes
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
	  HAVE_CLI55=yes
	fi
fi


#MySQL
MYSQLBACK_OPT=`getOpt mysql_backup yes`
MYSQL_OPT=`getOpt mysql 5.6`
MYSQLINST_OPT=`getOpt mysql_inst no`
MYSQLBACKDIR_OPT=`getOpt mysql_backup_dir /usr/local/directadmin/custombuild/mysql_backups`
if [ -s ${DEBIAN_VERSION} ]; then
	MYSQL_FORCE_COMPILE=`getOpt mysql_force_compile no`
else
	MYSQL_FORCE_COMPILE=no
fi

#Email
DOVECOT_OPT=`getOpt dovecot yes`
PIGEONHOLE_OPT=`getOpt pigeonhole no`
EXIM_OPT=`getOpt exim no`
EXIMCONF_OPT=`getOpt eximconf no`

#Applications
PHPMYADMIN_OPT=`getOpt phpmyadmin yes`
PHPMYADMIN_VER_OPT=`getOpt phpmyadmin_ver 4`
SQUIRRELMAIL_OPT=`getOpt squirrelmail yes`
ROUNDCUBE_OPT=`getOpt roundcube yes`

#Statistics software
AWSTATS_OPT=`getOpt awstats no`
WEBALIZER_OPT=`getOpt webalizer yes`

#Autoconf/automake/libtool
AUTOCONF_OPT=`getOpt autoconf yes`
AUTOMAKE_OPT=`getOpt automake yes`
LIBTOOL_OPT=`getOpt libtool yes`
CURL_OPT=`getOpt curl yes`

NEW_ZLIB_OPT=`getOpt new_zlib no`
ZLIB_OPT=`getOpt zlib no`
NEW_XML2_OPT=`getOpt new_xml2 yes`
NEW_SUPHP_OPT=`getOpt new_suphp no`

#this must be off by default.. since exim is linked against libpcre.so.0
NEW_PCRE_OPT=`getOpt new_pcre no`

#CustomBuild
AUTOVER_OPT=`getOpt autover no`
BOLD_OPT=`getOpt bold yes`
CLEAN_OPT=`getOpt clean yes`
CLEAN_OLD_TARBALLS_OPT=`getOpt clean_old_tarballs yes`
CLEAN_OLD_WEBAPPS_OPT=`getOpt clean_old_webapps yes`
CLEANAPACHE_OPT=`getOpt cleanapache yes`
#FILESERVER_OPT=`getOpt fileserver 1`
CUSTOMBUILD_OPT=`getOpt custombuild 2.0`
DOWNLOADSERVER_OPT=`getOpt downloadserver files.directadmin.com`

WEBPATH=http://${DOWNLOADSERVER_OPT}/services/custombuild
WEBPATH_SERVICES=http://${DOWNLOADSERVER_OPT}/services
WEBPATH_BACKUP_IP=69.162.69.58
WEBPATH_BACKUP=http://${WEBPATH_BACKUP_IP}/services/custombuild
WEBPATH_SERVICES_BACKUP=http://${WEBPATH_BACKUP_IP}/services
WEBPATH_CL=http://repo.cloudlinux.com/cloudlinux/sources/da

#Cron
CRON_OPT=`getOpt cron no`
CRON_FREQUENCY_OPT=`getOpt cron_frequency daily`
EMAIL_OPT=`getOpt email email@domain.com`
NOTIFICATIONS_OPT=`getOpt notifications yes`
DA_AUTOUPDATE_OPT=`getOpt da_autoupdate no`
UPDATES_OPT=`getOpt updates no`
WEBAPPS_UPDATES_OPT=`getOpt webapps_updates yes`

doChecks()
{
		if [ "${PHPINITYPE_OPT}" != "development" ] && [ "${PHPINITYPE_OPT}" != "production" ]; then
			echo "Wrong php_ini_type set in options.conf."
			exit 1
		fi

		if [ "${WEBSERVER_OPT}" = "nginx" ]; then
			if [ "${HAVE_CLI}" = "yes" ] || [ "${HAVE_SUPHP_CGI}" = "yes" ] || [ "${HAVE_FCGID}" = "yes" ]; then
				echo "nginx webserver is only compatible with php-fpm PHP mode."
				exit 1;
			fi
		fi
		
		if [ "${WEBSERVER_OPT}" = "apache" ]; then
			if [ "${HAVE_FPM_CGI}" = "yes" ] || [ "${HAVE_FCGID}" = "yes" ]; then
				if [ "${MOD_RUID2_OPT}" = "yes" ]; then
					echo "apache webserver is not compatible with php-fpm or php-fastcgi PHP mode with mod_ruid2 enabled."
					exit 1;
				fi
			fi
		fi
		
		if [ "${PHP1_MODE}" != "php-fpm" ] && [ "${PHP1_MODE}" != "fastcgi" ] && [ "${PHP1_MODE}" != "mod_php" ] && [ "${PHP1_MODE}" != "suphp" ]; then
			echo "Please set a correct PHP mode (mode set for php1_release should be php-fpm, fastcgi, mod_php or suphp)."
			exit 1
		fi
		if [ "${PHP2_MODE}" != "php-fpm" ] && [ "${PHP2_MODE}" != "fastcgi" ] && [ "${PHP2_MODE}" != "mod_php" ] && [ "${PHP2_MODE}" != "suphp" ]; then
			echo "Please set a correct PHP mode (mode set for php2_release should be php-fpm, fastcgi, mod_php or suphp)."
			exit 1
		fi
		if [ "${PHP1_MODE}" = "mod_php" ] && [ "${PHP2_MODE}" = "mod_php" ]; then
			echo "Cannot install both versions of PHP in mod_php mode."
			exit 1
		elif [ "${PHP1_RELEASE}" = "${PHP2_RELEASE}" ]; then
			echo "Cannot install the same version of PHP for both releases."
			exit 1
		elif [ "${PHP1_RELEASE}" != "5.3" ] && [ "${PHP1_RELEASE}" != "5.4" ] && [ "${PHP1_RELEASE}" != "5.5" ]; then
			echo "Wrong php1_release set in the options.conf."
			exit 1
		elif [ "${PHP2_RELEASE}" != "5.3" ] && [ "${PHP2_RELEASE}" != "5.4" ] && [ "${PHP2_RELEASE}" != "5.5" ] && [ "${PHP2_RELEASE}" != "no" ]; then
			echo "Wrong php2_release set in the options.conf."
			exit 1
		fi
		
		if [ "${APACHE_OPT}" != "2.4" ]; then
			echo "Wrong apache_ver value set in ${OPTIONS_CONF}."
			exit 1
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				echo "mod_ruid2 does not support FreeBSD."
				exit 1
			fi
		fi

		if [ "${MYSQL_OPT}" != "5.1" ] && [ "${MYSQL_OPT}" != "5.5" ] && [ "${MYSQL_OPT}" != "5.6" ]; then
			echo "Wrong mysql_ver value set in ${OPTIONS_CONF}."
			exit 1
		fi
		
		if [ "${FTPD_OPT}" = "pureftpd" ]; then
			if [ -s "$DACONF_FILE" ]; then
				UNIFIED_FTP=`/usr/local/directadmin/directadmin c | grep unified_ftp_password_file | cut -d= -f2`
				if [ "$UNIFIED_FTP" != "1" ]; then
					echo "unified_ftp_password_file is not set to 1.  You must convert before you can use pureftpd";
					echo "Please read this guide: http://www.directadmin.com/features.php?id=1134";
					echo "";
					echo "Simulation:";
					echo "     cd /usr/local/directadmin";
					echo "     echo 'action=convert&value=unifiedftp&simulate=yes' >> data/task.queue";
					echo "     ./dataskq d1";
					echo "";
					echo "Conversion:";
					echo "     cd /usr/local/directadmin";
					echo "     echo 'unified_ftp_password_file=1' >> conf/directadmin.conf";
					echo "     echo 'action=convert&value=unifiedftp' >> data/task.queue";
					echo "     ./dataskq d1";
					echo "";

					exit 1;
				fi
			fi
		fi
		
		if [ "${CRON_FREQUENCY_OPT}" != "daily" ] && [ "${CRON_FREQUENCY_OPT}" != "weekly" ] && [ "${CRON_FREQUENCY_OPT}" != "monthly" ]; then
			echo "Wrong cron_frequency value set in ${OPTIONS_CONF}";
			echo "Current value: ${CRON_FREQUENCY_OPT}";
			echo "Valid values: daily, weekly, or monthly";

			exit 1;
		fi
}

#Is the default PHP running as CGI?
GREP_PHP_MODE="`grep php1_mode ${WORKDIR}/options.conf | cut -d= -f2`"

# Variables for bolded text
boldon=""
boldoff=""
if [ "${BOLD_OPT}" = "yes" ]; then
	boldon="`tput -Txterm bold`"
	boldoff="`tput -Txterm sgr0`"
fi

# Get apache version from directadmin.conf
DACONF_APACHE_VER=1.3
if [ -e ${DACONF_FILE} ]; then
	DACONF_APACHE_VER=`grep "^apache_ver=" ${DACONF_FILE} | cut -d= -f2`
fi

# Download versions.txt if AUTOVER_OPT is set to "yes"
if [ "${AUTOVER_OPT}" = "yes" ]; then
  wget ${WEBPATH}/versions.txt -O ${VERSIONS_FILE} 2> /dev/null
fi

# Check if ld.so.conf has /usr/local/lib
if [ ! -e /etc/ld.so.conf ] || [ "`grep -c -E '/usr/local/lib$' /etc/ld.so.conf`" = "0" ]; then
        echo "/usr/local/lib" >> /etc/ld.so.conf
        /sbin/ldconfig
fi

checkMD5()
{
	#$1 is the local file
	#$2 is the versions.txt variable
	#return values:
	#1 for error, try agian
	#0 for nothing to report.

	if [ ${OS} = "FreeBSD" ]; then
		MD5SUM=/sbin/md5
	else	
		MD5SUM=/usr/bin/md5sum
	fi
	
	if [ ! -e $MD5SUM ]; then
		echo 0;
		return;
	fi

	if [ ! -e "$1" ]; then
		echo 1;
	fi

	VMD5=`getMD5 $2`
	if [ "$VMD5" = "" ]; then
		echo 0;
		return;
	fi

	if [ ${OS} = "FreeBSD" ]; then
		FMD5=`$MD5SUM -q $1`
	else	
		FMD5=`$MD5SUM $1 | cut -d\  -f1`
	fi
	

	if [ "$FMD5" = "$VMD5" ]; then
		echo 0;
	else
		echo 1;
	fi
}

getFile() {
	cd ${CWD};

        if [ ! -s ${1} ]
        then
                $ECHO -e "Downloading\t\t$1...";
                if [ ${OS} = "FreeBSD" ]; then
                        fetch -o ${CWD}/${1} ${WEBPATH}/${1};
                else
                        wget -O ${CWD}/${1} ${WEBPATH}/${1}
                fi

                if [ ! -s $1 ]
                then
			echo "Downloaded file ${CWD}/${1} does not exist or is empty after download";
			echo "cwd is: `pwd`";
	 		echo "Fileserver might be down, using the backup file server..";
                        if [ ${OS} = "FreeBSD" ]; then
                                fetch -o ${CWD}/${1} ${WEBPATH_BACKUP}/${1};
                        else
                                wget -O ${CWD}/${1} ${WEBPATH_BACKUP}/${1};
                        fi
                fi

        else
                $ECHO -e "File already exists:\t${1}";
        fi

	if [ "$#" -eq 2 ]; then

		M=`checkMD5 ${1} ${2}`

		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for $1 Failed.  Redownloading...***${boldoff}";
			echo "";
			#we will call it recursively but will *not* pass $2 for the md5 cus it would get stuck in a loop.

			rm -f $1
			getFile $1

			M=`checkMD5 ${1} ${2}`			

			if [ "$M" != "0" ]; then
				echo "";
				echo "";
				echo "${boldon}*** MD5 Checksum for $1 failed *again*.***${boldoff}";
				echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
				echo "Install continuing with this possibly corrupted file. (it may also be fine)";
				echo "";
				echo "";
			else
				echo "MD5 Checksum on $1 passed."
			fi

		else
			echo "MD5 Checksum on $1 passed."
		fi
	fi
}

getMD5CL()
{
        grep -m1 $1: ${VERSIONS_FILE_CL} | cut -d ':' -f 3
}

checkMD5CL()
{
	#$1 is the local file
	#$2 is the versions_cl.txt variable
	#return values:
	#1 for error, try agian
	#0 for nothing to report.

	MD5SUM=/usr/bin/md5sum
	
	if [ ! -e $MD5SUM ]; then
		echo 0;
		return;
	fi

	if [ ! -e "$1" ]; then
		echo 1;
	fi

	VMD5=`getMD5CL $2`
	if [ "$VMD5" = "" ]; then
		echo 0;
		return;
	fi

	FMD5=`$MD5SUM $1 | cut -d\  -f1`
	
	if [ "$FMD5" = "$VMD5" ]; then
		echo 0;
	else
		echo 1;
	fi
}

getFileCL() {
	cd ${CWD};

        if [ ! -s ${1} ]
        then
			$ECHO -e "Downloading\t\t$1...";
			wget -O ${CWD}/${1} ${WEBPATH_CL}/${1}
			tar xzf ${1} --no-same-owner
        fi

	if [ "$#" -eq 2 ]; then

		M=`checkMD5CL ${1} ${2}`

		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for $1 Failed.  Redownloading...***${boldoff}";
			echo "";
			#we will call it recursively but will *not* pass $2 for the md5 cus it would get stuck in a loop.

			rm -f $1
			getFileCL $1
            		tar xzf ${1} --no-same-owner
			M=`checkMD5CL ${1} ${2}`			

			if [ "$M" != "0" ]; then
				echo "";
				echo "";
				echo "${boldon}*** MD5 Checksum for $1 failed *again*.***${boldoff}";
				echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
				echo "Install continuing with this possibly corrupted file. (it may also be fine)";
				echo "";
				echo "";
			fi
		fi
	fi
}

if [ "${CLINUX_OPT}" = "yes" ]; then
	wget ${WEBPATH_CL}/versions.txt -O ${VERSIONS_FILE_CL} 2> /dev/null
	getFileCL cl-apache-patches.tar.gz cl-apache-patches
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		getFileCL mod_hostinglimits.tar.gz mod_hostinglimits
	fi
fi

####################################################

# Rewrite directadmin-vhosts.conf
doVhosts(){
	PATHNAME=${HTTPDCONF}/extra

	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		PATHNAME=${NGINXCONF}
	fi
	
	if [ ! -d ${PATHNAME} ]; then
		mkdir -p ${PATHNAME}
	fi
	echo -n '' > ${PATHNAME}/directadmin-vhosts.conf
	#for i in `ls /usr/local/directadmin/data/users`; do { echo "Include /usr/local/directadmin/data/users/$i/httpd.conf" >> ${HTTPDCONF}/extra/directadmin-vhosts.conf; }; done;
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		for i in `ls /usr/local/directadmin/data/users/*/nginx.conf`; do { echo "include $i;" >> ${PATHNAME}/directadmin-vhosts.conf; }; done;
	else
		for i in `ls /usr/local/directadmin/data/users/*/httpd.conf`; do { echo "Include $i" >> ${PATHNAME}/directadmin-vhosts.conf; }; done;
	fi
}

####################################################

# init.d scripts
if [ "${OS}" = "FreeBSD" ]; then
	INITDDIR=/usr/local/etc/rc.d
else
	INITDDIR=/etc/init.d
fi

# check if we have versions.txt
if [ ! -s ${VERSIONS_FILE} ]; then
	cd ${WORKDIR}
	getFile versions.txt
fi

if [ ! -s ${VERSIONS_FILE} ]; then
    echo "There is no versions.txt file. Unable to download."
    exit 0;
fi

#####################################################
# User Variables

NGINX_VER=`getVer nginx`
DIRECTADMIN_VER=`getVer directadmin`
MODSSL_VER=`getVer mod_ssl`
if [ "${APACHE_OPT}" = "2.4" ]; then
	APACHE2_VER=`getVer apache2.4`
fi

APR_VER=`getVer apr`
APR_UTIL_VER=`getVer apr-util`
if [ "${OLD_APR_UTIL}" = "yes" ]; then
	APR_UTIL_VER=1.4.1

	#apache 2.4.7 requires apr-util 1.5.0
	#but with old_apr_util, we don't have it, so fall back.
	if [ "${APACHE_OPT}" = "2.4" ]; then
		AP2_MINOR_VER=`echo ${APACHE2_VER} | cut -d. -f3`
		if [ "${AP2_MINOR_VER}" -ge 7 ]; then
			echo "${boldon}old_apr_util=yes is set. Apache ${APACHE2_VER} requires apr-util 1.5.0 or newer.${boldoff}";
			echo "${boldon}Forcing the apache version back to 2.4.6${boldoff}";
			APACHE2_VER=2.4.6
		fi	
	fi
fi

PHP53_VER=`getVer php53`
PHP54_VER=`getVer php54`
PHP55_VER=`getVer php55`
HTSCANNER_VER=`getVer htscanner`
MOD_RUID2_VER=`getVer mod_ruid2`
MOD_FASTCGI_VER=`getVer mod_fastcgi`
MOD_FCGID_VER=`getVer mod_fcgid`
FCGID_SH_VER=`getVer fcgid_sh`

if [ "${MYSQL_OPT}" = "5.0" ]; then
	MYSQL_VER=`getVer mysql5.0`
elif [ "${MYSQL_OPT}" = "5.1" ]; then
	MYSQL_VER=`getVer mysql5.1`
elif [ "${MYSQL_OPT}" = "5.5" ]; then
	MYSQL_VER=`getVer mysql5.5`
elif [ "${MYSQL_OPT}" = "5.6" ]; then
	MYSQL_VER=`getVer mysql5.6`
fi

MYSQL_REL=`getVer mysql5.0_release`
if [ "$MYSQL_REL" = "" ]; then
        MYSQL_REL=0;
fi

PCRE_VER=`getVer pcre`
if [ "$NEW_PCRE_OPT" = "yes" ]; then
	PCRE_VER=`getVer pcre_current`
fi

CURL_VER=`getVer curl`
ZLIB_VER=`getVer zlib`
MCRYPT_VER=`getVer mcrypt`

MHASH_VER=`getVer mhash`

SUPHP_VER=`getVer suphp`
if [ "$NEW_SUPHP_OPT" = "yes" ]; then
	SUPHP_VER=`getVer suphp_current`
fi

DOVECOT_VER=`getVer dovecot`
DOVECOT_REL=`echo ${DOVECOT_VER} | cut -d. -f1,2`
PIGEONHOLE_VER=no
if [ "${DOVECOT_REL}" = "2.1" ]; then
	DOVECOT_SHORTREL=21
	PIGEONHOLE_VER=`getVer pigeonhole21`
elif [ "${DOVECOT_REL}" = "2.2" ]; then
	DOVECOT_SHORTREL=22
	PIGEONHOLE_VER=`getVer pigeonhole22`
fi
EXIM_VER=`getVer exim`
PROFTPD_VER=`getVer proftpd`
PUREFTPD_VER=`getVer pureftpd`
AUTOCONF_VER=`getVer autoconf`
AUTOMAKE_VER=`getVer automake`
M4_VER=`getVer m4`
LIBTOOL_VER=`getVer libtool`
LIBXML2_VER=`getVer libxml2`
LIBXSLT_VER=`getVer libxslt`
FREETYPE_VER=`getVer freetype`
ICONV_VER=`getVer iconv`
ICU_VER=`getVer icu4c`
CLAMAV_VER=`getVer clamav`
# Mailman is not yet supported
#MAILMAN_VER=`getVer mailman`
AWSTATS_VER=`getVer awstats`
#LIBEVENT_VER=`getVer libevent`

if [ "$NEW_ZLIB_OPT" = "yes" ]; then
	ZLIB_VER=`getVer zlib-current`
	LIBXML2_VER=`getVer libxml2-current`
fi
if [ "$NEW_XML2_OPT" = "yes" ]; then
	LIBXML2_VER=`getVer libxml2-current`
fi

IONCUBE_VER=`getVer ioncube_loaders_lin_x86`
FBSD4_IONCUBE_VER=`getVer ioncube_loaders_fre_4_x86`

if [ "${B64}" = "1" ]; then
	PNG_VER=`getVer libpng64`
else
	PNG_VER=`getVer libpng`
fi

# Applications versions
if [ "${PHPMYADMIN_VER_OPT}" = "4" ]; then
	PHPMYADMIN_VER=`getVer phpmyadmin4`
else
	PHPMYADMIN_VER=`getVer phpmyadmin3`
fi
ROUNDCUBE_VER=`getVer roundcubemail`
SQUIRRELMAIL_VER=`getVer squirrelmail`
SQUIRRELMAIL_LOCALE_VER=`getVer squirrelmail_locale`

roundcube_version()
{
	RCVERFILE=/var/www/html/roundcube/program/include/iniset.php
	if [ ! -e $RCVERFILE ]; then
		echo 0;
		return;
	fi
	grep RCMAIL_VERSION $RCVERFILE | cut -d\' -f4
}

# Jailed shell
JAIL_VER=`getVer jail`
COREUTILS_VER=`getVer coreutils`
NB_SMTP_VER=`getVer nbsmtp`

# More variables for jailed shell
SU_FILE=${JAIL_DIR}/ap${APACHE_OPT}/suexec.c

# SpamAssassin versions
SPAMASSASSIN_VER=`getVer spamassassin`

# Variable for proftpd
PROFTPD_CONFIGURE=configure/proftpd/configure.proftpd
if [ -e custom/proftpd/configure.proftpd ]; then
	PROFTPD_CONFIGURE=custom/proftpd/configure.proftpd
fi

# Variable for pureftpd
PUREFTPD_CONFIGURE=configure/pureftpd/configure.pureftpd
if [ -e custom/pureftpd/configure.pureftpd ]; then
	PUREFTPD_CONFIGURE=custom/pureftpd/configure.pureftpd
fi

EXIM_MAKEFILE=""
if [ -e custom/exim/Makefile ]; then
	EXIM_MAKEFILE=${CWD}/custom/exim/Makefile
fi

# Dovecot variables
DOVECOT_CONFIGURE=configure/dovecot/configure.dovecot
if [ -e custom/dovecot/configure.dovecot ]; then
	DOVECOT_CONFIGURE=custom/dovecot/configure.dovecot
fi

# Variables for apache
APACHE_SSL_CONFIGURE=configure/ap1/configure.apache_ssl
if [ -e custom/ap1/configure.apache_ssl ]; then
	APACHE_SSL_CONFIGURE=custom/ap1/configure.apache_ssl
fi
APACHE2_CONFIGURE=configure/ap2/configure.apache
if [ -e custom/ap2/configure.apache ]; then
	APACHE2_CONFIGURE=custom/ap2/configure.apache
fi
PHP_HANDLERS_HTTPD=/etc/httpd/conf/extra/httpd-php-handlers.conf
SUPHP_HTTPD=/etc/httpd/conf/extra/httpd-suphp.conf

APCONF=ap2;

PHP53_CONFIGURE=configure/${APCONF}/configure.php53
if [ -e custom/${APCONF}/configure.php53 ]; then
	PHP53_CONFIGURE=custom/${APCONF}/configure.php53
fi
PHP54_CONFIGURE=configure/${APCONF}/configure.php54
if [ -e custom/${APCONF}/configure.php54 ]; then
	PHP54_CONFIGURE=custom/${APCONF}/configure.php54
fi
PHP55_CONFIGURE=configure/${APCONF}/configure.php55
if [ -e custom/${APCONF}/configure.php55 ]; then
	PHP55_CONFIGURE=custom/${APCONF}/configure.php55
fi

APCONFDIR=${WORKDIR}/configure/${APCONF}/conf
APCUSTOMCONFDIR=0
#custom/configure isn't supposed to be there
if [ -d ${WORKDIR}/custom/configure/${APCONF}/conf ]; then
	APCUSTOMCONFDIR=${WORKDIR}/custom/configure/${APCONF}/conf
fi
if [ -d ${WORKDIR}/custom/${APCONF}/conf ]; then
        APCUSTOMCONFDIR=${WORKDIR}/custom/${APCONF}/conf
fi

APCERTCONF=configure/${APCONF}/cert_config.txt
if [ -e custom/configure/${APCONF}/cert_config.txt ]; then
    APCERTCONF=custom/configure/${APCONF}/cert_config.txt
fi
if [ -e custom/${APCONF}/cert_config.txt ]; then
    APCERTCONF=custom/${APCONF}/cert_config.txt
fi

# Variables for nginx
NGINX_CONFIGURE=configure/nginx/configure.nginx
if [ -e custom/nginx/configure.nginx ]; then
	NGINX_CONFIGURE=custom/nginx/configure.nginx
fi
NGINXCONFDIR=${WORKDIR}/configure/nginx/conf
NGINXCUSTOMCONFDIR=0
if [ -d ${WORKDIR}/custom/nginx/conf ]; then
        NGINXCUSTOMCONFDIR=${WORKDIR}/custom/nginx/conf
fi

# Variables for FPM
PHP53_CONFIGURE_FPM=configure/fpm/configure.php53
if [ -e custom/fpm/configure.php53 ]; then
	PHP53_CONFIGURE_FPM=custom/fpm/configure.php53
fi
PHP54_CONFIGURE_FPM=configure/fpm/configure.php54
if [ -e custom/fpm/configure.php54 ]; then
	PHP54_CONFIGURE_FPM=custom/fpm/configure.php54
fi
PHP55_CONFIGURE_FPM=configure/fpm/configure.php55
if [ -e custom/fpm/configure.php55 ]; then
	PHP55_CONFIGURE_FPM=custom/fpm/configure.php55
fi

PHP53_FPM_CONF=${WORKDIR}/configure/fpm/conf/php-fpm.conf.53
if [ -e ${WORKDIR}/custom/fpm/conf/php-fpm.conf.53 ]; then
	PHP53_FPM_CONF=${WORKDIR}/custom/fpm/conf/php-fpm.conf.53
fi
PHP54_FPM_CONF=${WORKDIR}/configure/fpm/conf/php-fpm.conf.54
if [ -e ${WORKDIR}/custom/fpm/conf/php-fpm.conf.54 ]; then
	PHP54_FPM_CONF=${WORKDIR}/custom/fpm/conf/php-fpm.conf.54
fi
PHP55_FPM_CONF=${WORKDIR}/configure/fpm/conf/php-fpm.conf.55
if [ -e ${WORKDIR}/custom/fpm/conf/php-fpm.conf.55 ]; then
	PHP55_FPM_CONF=${WORKDIR}/custom/fpm/conf/php-fpm.conf.55
fi

PHP_INI=/usr/local/lib/php.ini
PHP_INI_FPM53=/usr/local/php53/lib/php.ini
PHP_INI_FPM54=/usr/local/php54/lib/php.ini
PHP_INI_FPM55=/usr/local/php55/lib/php.ini
PHP_BIN=/usr/local/bin/php
PHP_SBIN_FPM53=/usr/local/php53/sbin/php-fpm53
PHP_SBIN_FPM54=/usr/local/php54/sbin/php-fpm54
PHP_SBIN_FPM55=/usr/local/php55/sbin/php-fpm55

PHP_INI_SUPHP53=/usr/local/php53/lib/php.ini
PHP_INI_SUPHP54=/usr/local/php54/lib/php.ini
PHP_INI_SUPHP55=/usr/local/php55/lib/php.ini
PHP_BIN_SUPHP53=/usr/local/php53/bin/php-cgi53
PHP_BIN_SUPHP54=/usr/local/php54/bin/php-cgi54
PHP_BIN_SUPHP55=/usr/local/php55/bin/php-cgi55

# Variables for php-fastcgi
PHP53_CONFIGURE_FCGI=configure/fastcgi/configure.php53
if [ -e custom/fastcgi/configure.php53 ]; then
	PHP53_CONFIGURE_FCGI=custom/fastcgi/configure.php53
fi
PHP54_CONFIGURE_FCGI=configure/fastcgi/configure.php54
if [ -e custom/fastcgi/configure.php54 ]; then
	PHP54_CONFIGURE_FCGI=custom/fastcgi/configure.php54
fi
PHP55_CONFIGURE_FCGI=configure/fastcgi/configure.php55
if [ -e custom/fastcgi/configure.php55 ]; then
	PHP55_CONFIGURE_FCGI=custom/fastcgi/configure.php55
fi

# Variables for suPHP
PHP53_CONFIGURE_SUPHP=configure/suphp/configure.php53
if [ -e custom/suphp/configure.php53 ]; then
	PHP53_CONFIGURE_SUPHP=custom/suphp/configure.php53
fi
PHP54_CONFIGURE_SUPHP=configure/suphp/configure.php54
if [ -e custom/suphp/configure.php54 ]; then
	PHP54_CONFIGURE_SUPHP=custom/suphp/configure.php54
fi
PHP55_CONFIGURE_SUPHP=configure/suphp/configure.php55
if [ -e custom/suphp/configure.php55 ]; then
	PHP55_CONFIGURE_SUPHP=custom/suphp/configure.php55
fi
SUPHP_CONFIGURE=configure/suphp/configure.suphp
if [ -e custom/suphp/configure.suphp ]; then
	SUPHP_CONFIGURE=custom/suphp/configure.suphp
fi
SUPHP_PATH=/usr/local/suphp
SUPHP_CONF_FILE=${SUPHP_PATH}/etc/suphp.conf
SUPHP_SO=/usr/lib/apache/mod_suphp.so

#php extensions file rewritten by DirectAdmin
PHP_EXT=/usr/local/lib/php.conf.d/directadmin.ini
PHP_EXT_FPM53=/usr/local/php53/lib/php.conf.d/directadmin.ini
PHP_EXT_FPM54=/usr/local/php54/lib/php.conf.d/directadmin.ini
PHP_EXT_FPM55=/usr/local/php55/lib/php.conf.d/directadmin.ini
PHP_EXT_SUPHP53=/usr/local/php53/lib/php.conf.d/directadmin.ini
PHP_EXT_SUPHP54=/usr/local/php54/lib/php.conf.d/directadmin.ini
PHP_EXT_SUPHP55=/usr/local/php55/lib/php.conf.d/directadmin.ini

#custom script configs
PMA_CONFIG=${CWD}/custom/phpmyadmin/config.inc.php
PMA_THEMES=${CWD}/custom/phpmyadmin/themes
SQUIRREL_CONFIG=${CWD}/custom/squirrelmail/config.php
ROUNDCUBE_CONFIG=${CWD}/custom/roundcube/main.inc.php
ROUNDCUBE_CONFIG_DB=${CWD}/custom/roundcube/db.inc.php
ROUNDCUBE_PLUGINS=${CWD}/custom/roundcube/plugins
ROUNDCUBE_SKINS=${CWD}/custom/roundcube/skins

# Variables for frontpage
ROOT_GRP=root
if [ ${OS} = "FreeBSD" ]; then
	ROOT_GRP=wheel
fi

USER_INPUT=1
INPUT_VALUE=d

if [ ${OS} = "FreeBSD" ]; then
        OS_VER=`uname -r | cut -d- -f1`
elif [ -e /etc/fedora-release ]; then
        OS=fedora
 	if [ "`cat /etc/fedora-release | awk '{ print $1, $2 }'`" = "Fedora Core" ]; then
        	OS_VER=`cat /etc/fedora-release | awk '{ print $4 }'`
	elif [ "`cat /etc/fedora-release | awk '{ print $1, $2 }'`" = "Fedora release" ]; then
        	OS_VER=`cat /etc/fedora-release | awk '{ print $3 }'`
	fi
elif [ -e ${DEBIAN_VERSION} ]; then
	OS_VER=3.1
else
        OS_VER=`cat /etc/redhat-release | cut -d\  -f5`
	if [ "${OS_VER}" = "" ]; then
		OS_VER=`cat /etc/redhat-release | cut -d\  -f1`
	fi
fi

MAINVER=""
if [ "${OS}" = "FreeBSD" ]; then
        MAINVER=`echo ${OS_VER} | cut -d. -f1`
        case "${MAINVER}" in
                4)      IONCUBE_VER=$FBSD4_IONCUBE_VER
			IONCUBENAME=ioncube_loaders_fre_4_x86
                        ;;
                5)      IONCUBENAME=ioncube_loaders_fre_5_x86
                        ;;
                6)      IONCUBENAME=ioncube_loaders_fre_6_x86
                        ;;
		7)      IONCUBENAME=ioncube_loaders_fre_7_x86
			if [ ${B64} -eq 1 ]; then
			    IONCUBENAME=ioncube_loaders_fre_7_x86-64
			fi
                        ;;
		8)      IONCUBENAME=ioncube_loaders_fre_8_x86-64
                        ;;
		9)	if [ ${B64} -eq 1 ]; then
				IONCUBENAME=ioncube_loaders_fre_9_x86-64
			else
				IONCUBENAME=ioncube_loaders_fre_9_x86
			fi
			;;
        esac
else
	IONCUBENAME=ioncube_loaders_lin_x86
	ZENDNAME_PHP53=ZendGuardLoader-php-5.3-linux-glibc23-i386
	ZENDNAME_PHP54=ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386
fi

if [ ${B64} -eq 1 ]; then
	if [ "${OS}" = "FreeBSD" ]; then
		ZEND_VER=$FBSD6_64_ZEND_VER
	else
		IONCUBENAME=ioncube_loaders_lin_x86-64
		ZENDNAME_PHP53=ZendGuardLoader-php-5.3-linux-glibc23-x86_64
		ZENDNAME_PHP54=ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64
	fi
fi

ZENDFILE_GUARD53=${ZENDNAME_PHP53}.tar.gz
ZENDFILE_GUARD54=${ZENDNAME_PHP54}.tar.gz
IONCUBEFILE=${IONCUBENAME}.tar.gz

JPEGFILE=jpegsrc.v6b.tar.gz
JPEGDIR=jpeg-6b

WEBALIZER_VER=`getVer webalizer`
WEBALIZER=webalizer-${WEBALIZER_VER}
WEBALIZER_FILE=webalizer-${WEBALIZER_VER}-src.tgz

####################################################

ensureVersion() {

	PERL_VER=`perl -v | head -n2 | tail -n1 | cut -d\  -f4 | cut -dv -f2`
	NUM1=`echo $PERL_VER | cut -d. -f1`
	NUM2=`echo $PERL_VER | cut -d. -f2`
	NUM3=`echo $PERL_VER | cut -d. -f3`
	
	if [ $NUM1 -gt 5 ]; then
		return 1;
	fi
	if [ $NUM2 -gt 6 ]; then
		return 1;
	fi
	if [ $NUM3 -gt 0 ]; then
		return 1;
	fi

	echo "Your perl version is $PERL_VER. You require at least perl 5.6.1 for Mail-SpamAssassin-${SPAMASSASSIN_VER}.";
	exit 1;
}

####################################################

downloadMake() {
	cd $CWD

	VER=`getVer ${1}`
	NAME=${1}-${VER}
		
	getFile ${NAME}.tar.gz ${1}
	tar xzf ${NAME}.tar.gz --no-same-owner
	cd ${NAME}
	perl Makefile.PL
	make
	make install

	cd $CWD
}

####################################################

clean_tarball(){
	#clean_tarball name current_version extension
	if [ "$1" = "" ] || [ "$2" = "" ] || [ "$3" = "" ]; then
		echo "Skipping $1 tarball, needs more arguments in doclean_old_tarballs()."
		return;
	fi
	for i in `ls ${WORKDIR} | grep "${1}-[0-9]" | grep -v "$2" | grep "$3"`; do { 
		rm -f ${WORKDIR}/$i; 
		if [ "${CLEAN_OPT}" = "no" ]; then
			echo "Removing ${WORKDIR}/$i..."; 
		fi
	};
	done;
}

doclean_old_tarballs() {
	clean_tarball httpd ${APACHE2_VER} tar.gz;
	clean_tarball apr ${APR_VER} tar.gz;
	clean_tarball apr-util ${APR_UTIL_VER} tar.gz;
	clean_tarball clamav ${CLAMAV_VER} tar.gz;
	clean_tarball Mail-SpamAssassin ${SPAMASSASSIN_VER} tar.gz;
	clean_tarball curl ${CURL_VER} tar.gz;
	clean_tarball pcre ${PCRE_VER} tar.gz;
	clean_tarball zlib ${ZLIB_VER} tar.gz;
	clean_tarball libpng ${PNG_VER} tar.gz;
	clean_tarball libmcrypt ${MCRYPT_VER} tar.gz;
	clean_tarball mhash ${MHASH_VER} tar.gz;
	clean_tarball freetype ${FREETYPE_VER} tar.gz;
	clean_tarball libiconv ${ICONV_VER} tar.gz;
	clean_tarball libxslt ${LIBXSLT_VER} tar.gz;
	clean_tarball libxml2 ${LIBXML2_VER} tar.gz;
	clean_tarball pigeohole${DOVECOT_SHORTREL} ${PIGEONHOLE_VER} tar.gz;
	clean_tarball icu4c ${ICU_VER}-src tgz;
	clean_tarball webalizer ${WEBALIZER_VER}-src tgz;
	clean_tarball proftpd ${PROFTPD_VER} tar.gz;
	clean_tarball pure-ftpd ${PUREFTPD_VER} tar.gz;
	clean_tarball exim ${EXIM_VER} tar.gz;
	clean_tarball dovecot ${DOVECOT_VER} tar.gz;
	clean_tarball suphp ${SUPHP_VER} tar.gz;
	clean_tarball nginx ${NGINX_VER} tar.gz;
#	clean_tarball libevent ${LIBEVENT_VER} tar.gz;
	clean_tarball autoconf ${AUTOCONF_VER} tar.gz;
	clean_tarball automake ${AUTOMAKE_VER} tar.gz;
	clean_tarball m4 ${M4_VER} tar.gz;
	clean_tarball libtool ${LIBTOOL_VER} tar.gz;
	clean_tarball coreutils ${COREUTILS_VER} tar.gz;
	clean_tarball roundcubemail ${ROUNDCUBE_VER} tar.gz;
	clean_tarball squirrelmail ${SQUIRRELMAIL_VER} tar.gz;
	clean_tarball awstats ${AWSTATS_VER} tar.gz;
	clean_tarball phpMyAdmin ${PHPMYADMIN_VER} tar.gz;
	clean_tarball mod_ruid2 ${MOD_RUID2_VER} tar.bz2;
	clean_tarball mod_htscanner2 ${HTSCANNER_VER} tgz;
	clean_tarball mod_fastcgi ${MOD_FASTCGI_VER} tar.gz;
	clean_tarball mod_fcgid ${MOD_FCGID_VER} tar.gz;
	
	#PHP bit needs to be different
	for i in `ls ${WORKDIR} | grep '^php-' | grep -v "${PHP53_VER}" | grep -v "${PHP54_VER}" | grep -v "${PHP55_VER}" | grep tar.gz`; do {
		rm -f ${WORKDIR}/$i; 
		if [ "${CLEAN_OPT}" = "no" ]; then
			echo "Removing ${WORKDIR}/$i..."; 
		fi
	};
	done;
}

####################################################

doclean_old_webapps() {
	if [ "${CLEAN_OLD_WEBAPPS_OPT}" != "yes" ]; then
		echo "You cannot clean webapps, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	#Clean phpMyAdmin
	if [ "${PHPMYADMIN_OPT}" = "yes" ] && [ -e /var/www/html/phpMyAdmin ]; then
		PHPMYADMIN_CUR=`ls -ld /var/www/html/phpMyAdmin | cut -d\> -f2 | cut -d- -f2,3,4`
		for i in `ls /var/www/html/ | grep phpMyAdmin- | grep -v "${PHPMYADMIN_CUR}"`; do { 
			rm -rf /var/www/html/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /var/www/html/$i..."; 
			fi
		};
		done;
	fi

	#Clean SquirrelMail
	if [ "${SQUIRRELMAIL_OPT}" = "yes" ] && [ -e /var/www/html/squirrelmail ]; then
		SQUIRRELMAIL_CUR=`ls -ld /var/www/html/squirrelmail | cut -d\> -f2 | cut -d- -f2,3`
		for i in `ls /var/www/html/ | grep squirrelmail- | grep -v -e "${SQUIRRELMAIL_CUR}\$"`; do { 
			rm -rf /var/www/html/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /var/www/html/$i..."; 
			fi
		};
		done;
	fi

	#Clean RoundCube
	if [ "${ROUNDCUBE_OPT}" = "yes" ] && [ -e /var/www/html/roundcube ]; then
		#ROUNDCUBE_CUR=`ls -ld /var/www/html/roundcube | cut -d\> -f2 | cut -d- -f2`
		ROUNDCUBE_CUR=`roundcube_version`
		for i in `ls /var/www/html/ | grep roundcubemail- | grep -v "${ROUNDCUBE_CUR}"`; do { 
			rm -rf /var/www/html/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /var/www/html/$i..."; 
			fi
		};
		done;
	fi

	#Clean AWstats
	if [ "${AWSTATS_OPT}" = "yes" ] && [ -e /usr/local/awstats ]; then
		AWSTATS_CUR=`ls -ld /usr/local/awstats | cut -d\> -f2 | cut -d- -f2`
		for i in `ls /usr/local/ | grep awstats- | grep -v "${AWSTATS_CUR}"`; do { 
			rm -rf /usr/local/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /usr/local/$i..."; 
			fi
		};
		done;
	fi
}

####################################################

doClean() {
	cd ${CWD}
	if [ -e .custombuild ]; then
	    return;
	fi
	rm -rf mod_ruid2-${MOD_RUID2_VER};
	rm -rf htscanner-${HTSCANNER_VER};
	rm -rf mod_fastcgi-${MOD_FASTCGI_VER};
	rm -rf mod_fcgid-${MOD_FASTCGI_VER};
	rm -rf php-${PHP53_VER};
	rm -rf php-${PHP54_VER};
	rm -rf php-${PHP55_VER};
	rm -rf curl-${CURL_VER};
	rm -rf nginx-${NGINX_VER};
	rm -rf pcre-${PCRE_VER};
	rm -rf zlib-${ZLIB_VER};
	rm -rf ${JPEGDIR}
	rm -rf libpng-${PNG_VER};
	rm -rf libmcrypt-${MCRYPT_VER};
	rm -rf mhash-${MHASH_VER};
	rm -rf freetype-${FREETYPE_VER};
	rm -rf libiconv-${ICONV_VER};
	rm -rf libxslt-${LIBXSLT_VER};
	rm -rf libxml2-${LIBXML2_VER};
	rm -rf icu4c-${ICU_VER}-src;
	rm -rf icu;
	rm -rf ${ZENDNAME};
	rm -rf ${WEBALIZER};
	rm -rf proftpd-${PROFTPD_VER};
	rm -rf pure-ftpd-${PUREFTPD_VER};
	rm -rf httpd-${APACHE2_VER}
	rm -rf exim-${EXIM_VER};
	rm -rf dovecot-${DOVECOT_VER};
	rm -rf suphp-${SUPHP_VER};
	rm -rf autoconf-${AUTOCONF_VER};
	rm -rf m4-${M4_VER};
	rm -rf dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER};
	rm -rf automake-${AUTOMAKE_VER};
	rm -rf libtool-${LIBTOOL_VER};
	rm -rf Mail-SpamAssassin-${SPAMASSASSIN_VER};
	rm -rf clamav-${CLAMAV_VER};
# Mailman is not yet supported
#	rm -rf mailman-${MAILMAN_VER};
	
	# Jailed shell
	rm -rf coreutils-${COREUTILS_VER}
	rm -f ${JAIL_DIR}/su
	rm -f ${JAIL_DIR}/jail
	rm -rf nbsmtp-${NB_SMTP_VER}
	rm -f nbsmtp
	rm -rf ${ZENDNAME_PHP53};
	rm -rf ${ZENDNAME_PHP54};

	if [ "${CLEAN_OLD_TARBALLS_OPT}" = "yes" ]; then
		doclean_old_tarballs;
	fi
	
	if [ "${CLEAN_OLD_WEBAPPS_OPT}" = "yes" ]; then
		doclean_old_webapps;
	fi
	
	if [ "${CLEAN_OPT}" = "no" ]; then
		echo "All clean!";
	fi
}

####################################################

if [ "${CLEAN_OPT}" = "yes" ] && [ "$1" != "update" ] && [ "$1" != "update_data" ]; then
	doClean;
fi

####################################################

showHelp() {
	echo " +--------------------------------------------------------+";
	echo " |                                                        |";
	echo " |            DirectAdmin WebServices Installer           |";
	echo " |     Written by Martynas Bendorius and DirectAdmin      |";
	echo " |                   Version: ${BUILDSCRIPT_VER}                   |";
	echo " |                                                        |";
	echo " +--------------------------------------------------------+";
	echo " |  To build everything run:                              |";
	echo " |     $0 all                                        |";
	echo " |                                                        |";
	echo " | ${boldon}NOTE${boldoff}: Command all will compile everything as it is set |";
	echo " |      in the options.conf file, please take a look at   |";
	echo " |      \"${boldon}$0 options${boldoff}\"!                                |";
	echo " +--------------------------------------------------------+";
	echo " |  Install/update server components:                     |";
	echo " |     $0 apache                                     |";
	echo " |     $0 autoconf                                   |";
	echo " |     $0 automake                                   |";
	echo " |     $0 awstats                                    |";
	echo " |     $0 clamav                                     |";
	echo " |     $0 curl                                       |";
	echo " |     $0 dovecot                                    |";
	echo " |     $0 exim                                       |";
	echo " |     $0 freetype                                   |";
	echo " |     $0 iconv                                      |";
	echo " |     $0 icu                                        |";
	echo " |     $0 ioncube                                    |";
#	echo " |     $0 libevent                                   |";
	echo " |     $0 libjpeg                                    |";
	echo " |     $0 libpng                                     |";
	echo " |     $0 libtool                                    |";
	echo " |     $0 libxml2                                    |";
	echo " |     $0 libxslt                                    |";
	echo " |     $0 m4                                         |";
# Mailman is not yet supported
#	echo " |     $0 mailman                                    |";
	echo " |     $0 mcrypt                                     |";
	echo " |     $0 mhash                                      |";
	echo " |     $0 mod_ruid2                                  |";
	echo " |     $0 mod_htscanner2                             |";
	echo " |     $0 mod_fastcgi                                |";
	echo " |     $0 mod_fcgid                                  |";
	echo " |     $0 mysql                                      |";
	echo " |     $0 nginx                                      |";
	echo " |     $0 pigeonhole                                 |";
	echo " |     $0 pcre                                       |";
	echo " |     $0 php                                        |";
	echo " |     $0 proftpd                                    |";
	echo " |     $0 pureftpd                                   |";
	echo " |     $0 spamassassin                               |";
	echo " |     $0 suphp                                      |";
	echo " |     $0 webalizer                                  |";
	echo " |     $0 zend                                       |";
	echo " |     $0 zlib                                       |";
	echo " +--------------------------------------------------------+";
	echo " |  Components configuration options:                     |";
	echo " |     $0 exim_conf                                  |";
	echo " |     $0 php-ini                                    |";
	echo " |     $0 rewrite_confs                              |";
	echo " |     $0 secure_php                                 |";
	echo " +--------------------------------------------------------+";
	echo " |  Install/update web applications:                      |";
	echo " |     $0 phpmyadmin                                 |";
	echo " |     $0 roundcube                                  |";
	echo " |     $0 squirrelmail                               |";
	echo " +--------------------------------------------------------+";
	echo " |  CustomBuild related options/functions:                |";
	echo " |     $0 create_options                             |";
	echo " |     $0 cron                                       |";
	echo " |     $0 options                                    |";
	echo " |     $0 set option_name value                      |";
	echo " |     $0 set_fastest                                |";
	echo " |     $0 set_fastest_quiet                          |";
	echo " |     $0 update_da                                  |";
	echo " |     $0 update_versions                            |";
	echo " |     $0 update_webapps                             |";
	echo " |     $0 used_configs                               |";
	echo " |     $0 versions                                   |";
	echo " +--------------------------------------------------------+";
	echo " |  Jailed shell (beta):                                  |";
	echo " |     $0 all_jail                                   |";
	echo " |     $0 coreutils                                  |";
	echo " |     $0 shell                                      |";
	echo " |     $0 smtp_mail                                  |";
	echo " |     ./jail/jail_user.sh ${boldon}user${boldoff}                           |";
	echo " +--------------------------------------------------------+";
	echo " |  Remove old build data:                                |";
	echo " |     $0 clean                                      |";
	echo " |     $0 clean_old_webapps                          |";
	echo " +--------------------------------------------------------+";
	echo " |  Get latest build script or (and) data:                |";
	echo " |     $0 update                                     |";
	echo " |     $0 update_script                              |";
	echo " +--------------------------------------------------------+";
	echo " |  Get data for current build script:                    |";
	echo " |     $0 update_data                                |";
	echo " +--------------------------------------------------------+";
	echo " |  Recommended ${boldon}for experienced users only (!)${boldoff}:           |";
	echo " |     $0 php_expert php_release php_mode            |";
	echo " |     $0 php_htscanner2 php_shortrelease (e.g. 55)   |";
	echo " |     $0 todovecot                                  |";
	echo " |     $0 set_service service ON|OFF|delete          |";
	echo " +--------------------------------------------------------+";
	echo " |  You can pass a 2nd argument to automate the input:    |";
	echo " |     $0 <option> d : do the default action         |";
	echo " |     $0 <option> y : answer yes to all questions   |";
	echo " |     $0 <option> n : answer no to all questions    |";
	echo " +--------------------------------------------------------+";
}

checkFile() {
	if [ ! -s $1 ]
	then
		echo "*** Cannot find $1. Aborting ***";
		do_exit 0;
	else
		echo "Found $1";
	fi
}

quitIfLocked(){
	if [ -e ${LOCKFILE} ]; then
		echo "Another instance of custombuild is running (lockfile: ${LOCKFILE}."
		if [ "$1" != "" ]; then
			echo "Executing: $1";
		fi
		exit 1
	else
		trap "rm -f ${LOCKFILE}; exit" INT TERM EXIT
		touch ${LOCKFILE}
	fi
}

add_proxymatch_webapps_alias()
{
	MODE=$1
	FILE=$2
	ALIAS=$3
	ALIAS_PATH=${ALIAS}
	
	if [ "$4" != "" ]; then
		ALIAS_PATH=$4
	fi
	
	DOTPHP=
	SHORT=${PHP1_SHORTRELEASE}
	if [ "${MODE}" -eq 2 ]; then
		SHORT=${PHP2_SHORTRELEASE}
		DOTPHP=${SHORT}
	fi
	
	echo "ProxyPassMatch ^/${ALIAS}/(.*\.php${DOTPHP}(/.*)?)\$ fcgi://socket=%2fusr%2flocal%2fphp${PHP1_SHORTRELEASE}%2fsockets%2fwebapps.sock/var/www/html/${ALIAS_PATH}/\$1" >> ${FILE}
}

doApacheHostConf(){
	HOSTCONF=${HTTPDCONF}/extra/httpd-hostname.conf
	if [ -e ${WORKDIR}/custom/ap2/conf/extra/httpd-hostname.conf ]; then
		cp -pf ${WORKDIR}/custom/ap2/conf/extra/httpd-hostname.conf ${HOSTCONF}
	else
		echo -n '' > ${HOSTCONF}
		
		WEBMAILLINK=`get_webmail_link`
		
		if [ "${HAVE_FPM_CGI}" = "yes" ]; then
			echo 'SetEnvIfNoCase ^Authorization$ "(.+)" HTTP_AUTHORIZATION=$1' >> ${HOSTCONF}
		fi
		
		if [ "${PHP1_MODE}" = "php-fpm" ]; then

			if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
				add_proxymatch_webapps_alias 1 ${HOSTCONF} phpmyadmin phpMyAdmin
				add_proxymatch_webapps_alias 1 ${HOSTCONF} pma phpMyAdmin
				add_proxymatch_webapps_alias 1 ${HOSTCONF} phpMyAdmin
			fi

			if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
				add_proxymatch_webapps_alias 1 ${HOSTCONF} squirrelmail
			fi
			
			if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
				add_proxymatch_webapps_alias 1 ${HOSTCONF} roundcube
			fi
			
			if [ -e /var/www/html/${WEBMAILLINK} ]; then
				add_proxymatch_webapps_alias 1 ${HOSTCONF} webmail ${WEBMAILLINK}
			fi
		fi

		if [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
			
			if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
				add_proxymatch_webapps_alias 2 ${HOSTCONF} phpmyadmin phpMyAdmin
				add_proxymatch_webapps_alias 2 ${HOSTCONF} phpmyadmin phpMyAdmin
				add_proxymatch_webapps_alias 2 ${HOSTCONF} phpMyAdmin
			fi

			if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
				add_proxymatch_webapps_alias 2 ${HOSTCONF} squirrelmail
			fi
			
			if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
				add_proxymatch_webapps_alias 2 ${HOSTCONF} roundcube
			fi
			
			if [ -e /var/www/html/${WEBMAILLINK} ]; then
				add_proxymatch_webapps_alias 2 ${HOSTCONF} webmail ${WEBMAILLINK}
			fi
		fi
		
		echo '' >> ${HOSTCONF}
		
		echo '<Directory /var/www/html>' >> ${HOSTCONF}
		echo '	Options +SymLinksIfOwnerMatch +IncludesNoExec' >> ${HOSTCONF}
		echo '	AllowOverride AuthConfig FileInfo Indexes Limit Options=Includes,IncludesNOEXEC,Indexes,ExecCGI,MultiViews,SymLinksIfOwnerMatch,None' >> ${HOSTCONF}
		echo '' >> ${HOSTCONF}
		echo '	Order allow,deny' >> ${HOSTCONF}
		echo '	Allow from all' >> ${HOSTCONF}
		echo '	<IfModule mod_suphp.c>' >> ${HOSTCONF}
		echo '		suPHP_Engine On' >> ${HOSTCONF}
		echo '		suPHP_UserGroup webapps webapps' >> ${HOSTCONF}
		echo '		setEnv PHP_INI_SCAN_DIR' >> ${HOSTCONF}
		echo '	</IfModule>' >> ${HOSTCONF}
		echo '	<IfModule mod_ruid2.c>' >> ${HOSTCONF}
		echo '		RUidGid webapps webapps' >> ${HOSTCONF}
		echo '	</IfModule>' >> ${HOSTCONF}


		WEBAPPS_FCGID_DIR=/var/www/fcgid

		if [ "${PHP1_MODE}" = "fastcgi" ]; then
			echo '	<IfModule mod_fcgid.c>' >> ${HOSTCONF}
			echo '	        AddHandler fcgid-script .php' >> ${HOSTCONF}
			echo "	        FcgidWrapper /usr/local/safe-bin/fcgid${PHP1_SHORTRELEASE}.sh .php" >> ${HOSTCONF}
			echo '	        <FilesMatch "\.php$">' >> ${HOSTCONF}
			echo '	                Options +ExecCGI' >> ${HOSTCONF}
			echo '	        </FilesMatch>' >> ${HOSTCONF}
			echo '	</IfModule>' >> ${HOSTCONF}		
		fi
		if [ "${PHP2_MODE}" = "fastcgi" ] && [ "${PHP2_RELEASE}" != "no" ]; then	
			echo '	<IfModule mod_fcgid.c>' >> ${HOSTCONF}
			echo "	        AddHandler fcgid-script .php${PHP2_SHORTRELEASE}" >> ${HOSTCONF}
			echo "	        FcgidWrapper /usr/local/safe-bin/fcgid${PHP2_SHORTRELEASE}.sh .php${PHP2_SHORTRELEASE}" >> ${HOSTCONF}
			echo "         <FilesMatch \"\.php${PHP2_SHORTRELEASE}\$\">" >> ${HOSTCONF}
			echo '	                Options +ExecCGI' >> ${HOSTCONF}
			echo '	        </FilesMatch>' >> ${HOSTCONF}
			echo '	</IfModule>' >> ${HOSTCONF}
		fi

		echo '</Directory>' >> ${HOSTCONF}
	fi
}

####################################################

doFastcgiConf(){
	mkdir -p /var/run/fastcgi/dynamic
	chown -R apache:apache /var/run/fastcgi
	FASTCGICONF=${HTTPDCONF}/extra/httpd-fastcgi.conf
	if [ -e ${WORKDIR}/custom/ap2/conf/extra/httpd-fastcgi.conf ]; then
		cp -pf ${WORKDIR}/custom/ap2/conf/extra/httpd-fastcgi.conf ${FASTCGICONF}
	else
		echo -n '' > ${FASTCGICONF}
		echo '<IfModule mod_fastcgi.c>' >> ${FASTCGICONF}
		echo 'FastCgiWrapper /usr/sbin/suexec' >> ${FASTCGICONF}
		echo 'FastCgiIpcDir /var/run/fastcgi' >> ${FASTCGICONF}
		echo '' >> ${FASTCGICONF}
		if [ "${PHP1_MODE}" = "php-fpm" ]; then
			echo '<FilesMatch \.php$>' >> ${FASTCGICONF}
			echo "SetHandler php${PHP1_SHORTRELEASE}-fcgi" >> ${FASTCGICONF}
			echo '</FilesMatch>' >> ${FASTCGICONF}
			echo '' >> ${FASTCGICONF}
			echo "<Location /php${PHP1_SHORTRELEASE}-bin>" >> ${FASTCGICONF}
			echo 'Order Deny,Allow' >> ${FASTCGICONF}
			echo 'Deny from All' >> ${FASTCGICONF}
			echo 'Allow from env=REDIRECT_STATUS' >> ${FASTCGICONF}
			echo '</Location>' >> ${FASTCGICONF}
			echo '' >> ${FASTCGICONF}
			echo "Action php${PHP1_SHORTRELEASE}-fcgi /php${PHP1_SHORTRELEASE}-bin" >> ${FASTCGICONF}
		fi

		if [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
			echo "<FilesMatch \.php${PHP2_SHORTRELEASE}\$>" >> ${FASTCGICONF}
			echo "SetHandler php${PHP2_SHORTRELEASE}-fcgi" >> ${FASTCGICONF}
			echo '</FilesMatch>' >> ${FASTCGICONF}
			echo '' >> ${FASTCGICONF}
			echo "<Location /php${PHP2_SHORTRELEASE}-bin>" >> ${FASTCGICONF}
			echo 'Order Deny,Allow' >> ${FASTCGICONF}
			echo 'Deny from All' >> ${FASTCGICONF}
			echo 'Allow from env=REDIRECT_STATUS' >> ${FASTCGICONF}
			echo '</Location>' >> ${FASTCGICONF}
			echo '' >> ${FASTCGICONF}
			echo "Action php${PHP2_SHORTRELEASE}-fcgi /php${PHP2_SHORTRELEASE}-bin" >> ${FASTCGICONF}
		fi
		echo '</IfModule>' >> ${FASTCGICONF}
	fi
}
####################################################

options(){
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		echo "Apache: ${boldon}${APACHE2_VER}${boldoff}"
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Nginx: ${boldon}${NGINX_VER}${boldoff}"
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ "${WEBSERVER_OPT}" = "apache" ]; then
			echo "mod_ruid2: ${boldon}${MOD_RUID2_VER}${boldoff}"
		else
			echo "mod_ruid2: ${boldon}no${boldoff}"
		fi
	fi
	
	if [ "${HAVE_CLI}" = "no" ]; then
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			echo "htscanner: ${boldon}${HTSCANNER_VER}${boldoff}"
		else
			echo "htscanner: ${boldon}no${boldoff}"
		fi
	fi
	
	if [ "${DOVECOT_OPT}" = "yes" ]; then
		echo "Dovecot: ${boldon}${DOVECOT_VER}${boldoff}"
	else
		echo "Dovecot: ${boldon}no${boldoff}"
	fi

	if [ "${AWSTATS_OPT}" = "yes" ]; then
		echo "AWstats: ${boldon}${AWSTATS_VER}${boldoff}"
	else
		echo "AWstats: ${boldon}no${boldoff}"
	fi
	
	if [ "${EXIM_OPT}" = "yes" ]; then
		echo "Exim: ${boldon}${EXIM_VER}${boldoff}"
	else
		echo "Exim: ${boldon}no${boldoff}"
	fi

	echo "exim.conf update: ${boldon}${EXIMCONF_OPT}${boldoff}"

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		echo "SpamAssassin: ${boldon}${SPAMASSASSIN_VER}${boldoff}"
	else
		echo "SpamAssassin: ${boldon}no${boldoff}"
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		echo "ClamAV: ${boldon}${CLAMAV_VER}${boldoff}"
	else
		echo "ClamAV: ${boldon}no${boldoff}"
	fi
	
	if [ "${MYSQLINST_OPT}" = "yes" ]; then
		echo "MySQL: ${boldon}${MYSQL_VER}${boldoff}"
	else
		echo "MySQL: ${boldon}no${boldoff}"
	fi

	echo "MySQL backup: ${boldon}${MYSQLBACK_OPT}${boldoff}"
	
	if [ "${MYSQLBACK_OPT}" = "yes" ]; then
		echo "MySQL backup directory: ${boldon}${MYSQLBACKDIR_OPT}${boldoff}"
	fi

	echo "PHP (default): ${boldon}${PHP1_RELEASE}${boldoff} as ${boldon}${PHP1_MODE}${boldoff}"
	if [ "${PHP2_RELEASE}" != "no" ]; then
		echo "PHP (additional): ${boldon}${PHP2_RELEASE}${boldoff} as ${boldon}${PHP2_MODE}${boldoff}"
	fi

	if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
		echo "phpMyAdmin: ${boldon}${PHPMYADMIN_VER}${boldoff}"
	else
		echo "phpMyAdmin: ${boldon}no${boldoff}"
	fi

	if [ "${FTPD_OPT}" = "proftpd" ]; then
		echo "ProFTPD: ${boldon}${PROFTPD_VER}${boldoff}"
	else
		echo "ProFTPD: ${boldon}no${boldoff}"
	fi

	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		echo "Pure-FTPd: ${boldon}${PUREFTPD_VER}${boldoff}"
	else
		echo "Pure-FTPd: ${boldon}no${boldoff}"
	fi
	
	if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		echo "RoundCube webmail: ${boldon}${ROUNDCUBE_VER}${boldoff}"
	else
		echo "RoundCube webmail: ${boldon}no${boldoff}"
	fi

	echo "Replace \"php.ini\" with '$0 all' and '$0 php-ini': ${boldon}${PHPINI_OPT}${boldoff}"

	if [ "${PHPINI_OPT}" = "yes" ]; then
		echo "Replace \"php.ini\" using type: ${boldon}${PHPINITYPE_OPT}${boldoff}"
	fi

	if [ "${CRON_OPT}" = "yes" ]; then
		echo "Cron for notifications and (or) updates: ${boldon}yes${boldoff}"
		echo "Cron frequency: ${boldon}${CRON_FREQUENCY_OPT}${boldoff}";
		if [ "${NOTIFICATIONS_OPT}" = "yes" ]; then
			echo "Auto notifications: ${boldon}yes${boldoff}"
			echo "Auto notifications email address: ${boldon}${EMAIL_OPT}${boldoff}"
		fi
		if [ "${NOTIFICATIONS_OPT}" = "yes" ]; then
			echo "Auto updates: ${boldon}yes${boldoff}"
		fi
	else
		echo "Auto updates/notifications: ${boldon}no${boldoff}"
	fi
	
	echo "Run \"clean\" every time: ${boldon}${CLEAN_OPT}${boldoff}"
	echo "Run \"clean_old_webapps\" every time: ${boldon}${CLEAN_OLD_WEBAPPS_OPT}${boldoff}"
	echo "Run \"clean_old_tarballs\" every time: ${boldon}${CLEAN_OLD_TARBALLS_OPT}${boldoff}"

	echo "Show texts in bold: ${boldon}${BOLD_OPT}${boldoff}"
	
	if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
		echo "SquirrelMail: ${boldon}${SQUIRRELMAIL_VER}${boldoff}"
	else
		echo "SquirrelMail: ${boldon}no${boldoff}"
	fi

	if [ "${ZEND_OPT}" = "yes" ]; then
		echo "Zend Guard Loader: ${boldon}${ZEND_VER}${boldoff}"
	else
		echo "Zend Guard Loader: ${boldon}no${boldoff}"
	fi
	
	if [ "${IONCUBE_OPT}" = "yes" ]; then
		echo "ionCube loader: ${boldon}${IONCUBE_VER}${boldoff}"
	else
		echo "ionCube loader: ${boldon}no${boldoff}"
	fi
}

####################################################

create_options(){
	HIDE_CHANGES=1
	
	if [ $# -eq 1 ]; then
		INPUT_VALUE=$1
	fi

	if [ -s ${OPTIONS_CONF} ]; then
		echo -n "Would you like to backup the current options.conf? (yes/no): ";
		read do_opt_backup;
		until [ "${do_opt_backup}" = "yes" ] || [ "${do_opt_backup}" = "no" ]; do
			echo -n "Please enter 'yes' or 'no': "
			read do_opt_backup;
		done
		
		if [ "${do_opt_backup}" = "yes" ]; then
			cp -f ${OPTIONS_CONF} ${OPTIONS_CONF}.`date +%Y%m%d%I%M%S`.backup
			echo "Backup created: ${OPTIONS_CONF}.`date +%Y%m%d%I%M%S`.backup";
		fi
	
	fi

	echo -n "Which webserver would yo like to use? (apache/nginx): ";
	read webserveropt;
	until [ "${webserveropt}" = "apache" ] || [ "${webserveropt}" = "nginx" ]; do
		echo -n "Please enter 'apache' or 'nginx':"
		read webserveropt;
	done
	if [ "${webserveropt}" = "apache" ]; then
		setOpt webserver apache;
	elif [ "${webserveropt}" = "nginx" ]; then
		setOpt webserver nginx;
	fi
	
	echo -n "Which FTP server would yo like to use? (proftpd/pureftpd): ";
	read ftpserveropt;
	until [ "${ftpserveropt}" = "proftpd" ] || [ "${ftpserveropt}" = "pureftpd" ]; do
		echo -n "Please enter 'proftpd' or 'pureftpd':"
		read ftpserveropt;
	done
	if [ "${ftpserveropt}" = "proftpd" ]; then
		setOpt ftpd proftpd;
	elif [ "${ftpserveropt}" = "pureftpd" ]; then
		setOpt ftpd pureftpd;
	fi
	
	echo -n "What PHP release should be installed as a default one? (5.3/5.4/5.5): ";
	read php1ver;
	until [ "${php1ver}" = "5.3" ] || [ "${php1ver}" = "5.4" ] || [ "${php1ver}" = "5.5" ]; do
		echo -n "Please enter '5.3', '5.4' or '5.5':"
		read php1ver;
	done
	if [ "${php1ver}" = "5.3" ]; then
		setOpt php1_release 5.3;
	elif [ "${php1ver}" = "5.4" ]; then
		setOpt php1_release 5.4;
	elif [ "${php1ver}" = "5.5" ]; then
		setOpt php1_release 5.5;
	fi

        echo -n "What mode should the default instance of PHP use? (mod_php/suphp/php-fpm/fastcgi): ";
        read php1type;
        until [ "${php1type}" = "mod_php" ] || [ "${php1type}" = "suphp" ] || [ "${php1type}" = "php-fpm" ] || [ "${php1type}" = "fastcgi" ]; do
                echo -n "Please enter 'mod_php', 'suphp', 'php-fpm' or 'fastcgi':"
                read php1type;
        done
        if [ "${php1type}" = "mod_php" ]; then
                setOpt php1_mode mod_php;
        elif [ "${php1type}" = "suphp" ]; then
                setOpt php1_mode suphp;
        elif [ "${php1type}" = "php-fpm" ]; then
                setOpt php1_mode php-fpm;
        elif [ "${php1type}" = "fastcgi" ]; then
                setOpt php1_mode fastcgi;
        fi

        echo -n "Would you like to have a second instance of PHP installed? (yes/no): ";
        read wantsec;
        until [ "${wantsec}" = "yes" ] || [ "${wantsec}" = "no" ]; do
                echo -n "Please enter 'yes' or 'no': "
                read wantsec
        done
        
        if [ "${wantsec}" = "yes" ]; then
        	echo -n "Please enter '5.3', '5.4' or '5.5':";
                read php2ver;
                until [ "${php2ver}" = "5.3" ] || [ "${php2ver}" = "5.4" ] || [ "${php2ver}" = "5.5" ]; do
                        echo -n "Please enter '5.3', '5.4' or '5.5':"
                        read php2ver;
                done
                if [ "${php2ver}" = "5.3" ]; then
                        setOpt php2_release 5.3;
                elif [ "${php2ver}" = "5.4" ]; then
                        setOpt php2_release 5.4;
                elif [ "${php2ver}" = "5.5" ]; then
                        setOpt php2_release 5.5;
                fi
                echo -n "What mode should the second instance of PHP use? (mod_php/suphp/php-fpm/fastcgi): ";
                read php2type;
                until [ "${php2type}" = "mod_php" ] || [ "${php2type}" = "suphp" ] || [ "${php2type}" = "php-fpm" ] || [ "${php2type}" = "fastcgi" ]; do
                        echo -n "Please enter 'mod_php', 'suphp', 'php-fpm' or 'fastcgi':"
                        read php2type;
                done
                if [ "${php2type}" = "mod_php" ]; then
                        setOpt php2_mode mod_php;
                elif [ "${php2type}" = "suphp" ]; then
                        setOpt php2_mode suphp;
                elif [ "${php2type}" = "php-fpm" ]; then
                        setOpt php2_mode php-fpm;
                elif [ "${php2type}" = "fastcgi" ]; then
                        setOpt php2_mode fastcgi
                fi
        fi
	
	echo -n "Would you like to have mod_ruid2? (yes/no): ";
	read installruid2;
	until [ "${installruid2}" = "yes" ] || [ "${installruid2}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read installruid2;
	done
	
	setOpt mod_ruid2 ${installruid2};
	
	echo -n "Would you like to have ionCube? (yes/no): ";
	read installioncube;
	until [ "${installioncube}" = "yes" ] || [ "${installioncube}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read installioncube;
	done
	
	setOpt ioncube ${installioncube};
	
	echo -n "Would you like to have Zend Optimizer? (yes/no): ";
	read installzend;
	until [ "${installzend}" = "yes" ] || [ "${installzend}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read installzend;
	done
	
	setOpt zend ${installzend};
	
	if [ ! -s ${DACONF_FILE} ]; then
		echo "********"
		echo "For new DirectAdmin installs, we don't recommend updating MySQL until after everything is finished";
		echo "${boldon}We recommend using 'no' here to use the already included precompiled binaries.${boldoff}";
		echo "You can still update MySQL later.";
		echo "";
	fi

	echo -n "Would you like to have an ability to update MySQL using CustomBuild? (yes/${boldon}no${boldoff}): ";
	read installmysql;
	until [ "${installmysql}" = "yes" ] || [ "${installmysql}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read installmysql;
	done

	setOpt mysql_inst ${installmysql};
	
	if [ "${installmysql}" = "yes" ]; then
		echo -n "Which version of MySQL you would like to have? (5.1/5.5/5.6): ";
		read mysqlvers;
			until [ "${mysqlvers}" = "5.1" ] || [ "${mysqlvers}" = "5.5" ] || [ "${mysqlvers}" = "5.6" ]; do
			echo -n "Please enter '5.1', '5.5' or '5.6: "
			read mysqlvers;
		done

		setOpt mysql ${mysqlvers};
	fi

#CustomBuild 2.0 supports the latest release of apache only	
#	echo -n "Which version of Apache you would like to have? (2.0/2.2/2.4): ";
#	read apachever;
#	until [ "${apachever}" = "2.0" ] || [ "${apachever}" = "2.2" ] || [ "${apachever}" = "2.4" ]; do
#		echo -n "Please enter '2.0', '2.2' or '2.4': "
#		read apachever;
#	done
#
#	setOpt apache_ver ${apachever};
	
	echo -n "Would you like to prevent htaccess files from using Options FollowSymLinks? More secure, but may break scripts. (yes/no): ";
	read secure_htaccess;
	until [ "${secure_htaccess}" = "yes" ] || [ "${secure_htaccess}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read secure_htaccess;
	done

	setOpt secure_htaccess ${secure_htaccess};

	echo -n "Would you like to have an ability to update/instal Exim using CustomBuild? (yes/no): ";
	read installexim;
	until [ "${installexim}" = "yes" ] || [ "${installexim}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read installexim;
	done

	setOpt exim ${installexim};
	
	echo -n "Would you like to have an ability to install Dovecot? (yes/no): ";
	read dovecot;
	until [ "${dovecot}" = "yes" ] || [ "${dovecot}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read dovecot;
	done

	setOpt dovecot ${dovecot}
	
	echo -n "Would you like to have an ability to install/update phpMyAdmin using CustomBuild? (yes/no): ";
	read phpmyadmin;
	until [ "${phpmyadmin}" = "yes" ] || [ "${phpmyadmin}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read phpmyadmin;
	done

	setOpt phpmyadmin ${phpmyadmin};
	
	echo -n "Would you like to have an ability to install/update SquirrelMail webmail using CustomBuild? (yes/no): ";
	read squirrelmail;
	until [ "${squirrelmail}" = "yes" ] || [ "${squirrelmail}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read squirrelmail;
	done

	setOpt squirrelmail ${squirrelmail};
	
	echo -n "Would you like to have an ability to install/update RoundCube webmail using CustomBuild? (yes/no): ";
	read roundcube;
	until [ "${roundcube}" = "yes" ] || [ "${roundcube}" = "no" ]; do
		echo -n "Please enter 'yes' or 'no': "
		read roundcube;
	done

	setOpt roundcube ${roundcube};
}

####################################################

used_configs(){
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		echo "Apache configuration file: ${WORKDIR}/${APACHE2_CONFIGURE}"
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Nginx configuration file: ${WORKDIR}/${NGINX_CONFIGURE}"
	fi

	if [ "${PHP1_MODE}" != "mod_php" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ]; then
			echo "PHP (default) php.ini file: ${PHP_INI_FPM53}"
		elif [ "${PHP1_RELEASE}" = "5.4" ]; then
			echo "PHP (default) php.ini file: ${PHP_INI_FPM54}"
		elif [ "${PHP1_RELEASE}" = "5.5" ]; then
			echo "PHP (default) php.ini file: ${PHP_INI_FPM55}"
		fi
	fi
	
	if [ "${PHP1_MODE}" = "mod_php" ]; then
		echo "PHP (default) php.ini file: ${PHP_INI}"
	fi
	
	if [ "${PHP2_MODE}" != "mod_php" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		if [ "${PHP2_RELEASE}" = "5.3" ]; then
			echo "PHP (additional) php.ini file: ${PHP_INI_FPM53}"
		elif [ "${PHP2_RELEASE}" = "5.4" ]; then
			echo "PHP (additional) php.ini file: ${PHP_INI_FPM54}"
		elif [ "${PHP2_RELEASE}" = "5.5" ]; then
			echo "PHP (additional) php.ini file: ${PHP_INI_FPM55}"
		fi
	fi
	
	if [ "${PHP2_MODE}" = "mod_php" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		echo "PHP (additional) php.ini file: ${PHP_INI}"
	fi
	
  if [ "${PHP1_MODE}" = "mod_php" ]; then
        if [ "${PHP1_RELEASE}" = "5.3" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP53_CONFIGURE}"
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP54_CONFIGURE}"
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP55_CONFIGURE}"
	fi
  fi

  if [ "${PHP1_MODE}" = "php-fpm" ]; then
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP53_CONFIGURE_FPM}"
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP54_CONFIGURE_FPM}"
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP55_CONFIGURE_FPM}"
	fi
  fi

  if [ "${PHP1_MODE}" = "suphp" ] ||  [ "${PHP2_MODE}" = "suphp" ]; then
	echo "suPHP configuration file: ${WORKDIR}/${SUPHP_CONFIGURE}"
  fi

  if [ "${PHP1_MODE}" = "suphp" ]; then
  	echo "suPHP configuration file: ${WORKDIR}/${SUPHP_CONFIGURE}"
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP53_CONFIGURE_SUPHP}"
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP54_CONFIGURE_SUPHP}"
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP55_CONFIGURE_SUPHP}"
	fi
  fi
  
  if [ "${PHP1_MODE}" = "fastcgi" ]; then
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP53_CONFIGURE_FCGI}"
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP54_CONFIGURE_FCGI}"
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
		echo "PHP (default) configuration file: ${WORKDIR}/${PHP55_CONFIGURE_FCGI}"
	fi
  fi
 
  if [ "${PHP2_MODE}" = "suphp" ] && [ "${PHP2_RELEASE}" != "no" ]; then
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP53_CONFIGURE_SUPHP}"
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP54_CONFIGURE_SUPHP}"
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP55_CONFIGURE_SUPHP}"
	fi
  fi
  
  if [ "${PHP2_MODE}" = "fastcgi" ] && [ "${PHP2_RELEASE}" != "no" ]; then
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP53_CONFIGURE_FCGI}"
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP54_CONFIGURE_FCGI}"
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP55_CONFIGURE_FCGI}"
	fi
  fi
  
  if [ "${PHP2_MODE}" = "mod_php" ] && [ "${PHP2_RELEASE}" != "no" ]; then
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP53_CONFIGURE}"
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP54_CONFIGURE}"
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP55_CONFIGURE}"
	fi
  fi

  if [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
	if [ "${PHP2_RELEASE}" = "5.3" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP53_CONFIGURE_FPM}"
	elif [ "${PHP2_RELEASE}" = "5.4" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP54_CONFIGURE_FPM}"
	elif [ "${PHP2_RELEASE}" = "5.5" ]; then
		echo "PHP (additional) configuration file: ${WORKDIR}/${PHP55_CONFIGURE_FPM}"
	fi
  fi

  if [ "${FTPD_OPT}" = "proftpd" ]; then
	echo "ProFTPD configuration file: ${WORKDIR}/${PROFTPD_CONFIGURE}"
  fi
  
  if [ "${FTPD_OPT}" = "pureftpd" ]; then
	echo "PureFTPD configuration file: ${WORKDIR}/${PUREFTPD_CONFIGURE}"
  fi

  if [ "${EXIM_OPT}" = "yes" ]; then
  	echo -n "Exim Makefile: ";
  	if [ "${EXIM_MAKEFILE}" != "" ]; then
  		echo "${EXIM_MAKEFILE}";
  	else
  		echo "${WEBPATH}/Makefile";
  	fi
  fi

  if [ "${DOVECOT_OPT}" = "yes" ]; then
  	echo "Dovecot configuration file: ${WORKDIR}/${DOVECOT_CONFIGURE}"
  fi
  
  if [ -d ${PMA_THEMES} ]; then
	  if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
		echo "phpMyAdmin themes directory: ${PMA_THEMES}"
	  fi
  fi
  
  if [ -e ${PMA_CONFIG} ]; then
	  if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
		echo "phpMyAdmin configuration file: ${PMA_CONFIG}"
	  fi
  fi
  
  if [ -e ${SQUIRREL_CONFIG} ]; then
	  if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
		echo "SquirrelMail configuration file: ${SQUIRREL_CONFIG}"
	  fi
  fi
  
  if [ -e ${ROUNDCUBE_CONFIG} ]; then
	  if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		echo "RoundCube webmail configuration file: ${ROUNDCUBE_CONFIG}"
	  fi
  fi
  
  if [ -e ${ROUNDCUBE_CONFIG_DB} ]; then
	  if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		echo "RoundCube webmail database configuration file: ${ROUNDCUBE_CONFIG_DB}"
	  fi
  fi

  if [ -d ${ROUNDCUBE_PLUGINS} ]; then
	  if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		echo "RoundCube webmail plugins overwrite directory: ${ROUNDCUBE_PLUGINS}"
	  fi
  fi
  
  if [ -d ${ROUNDCUBE_SKINS} ]; then
	  if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		echo "RoundCube webmail skins overwrite directory: ${ROUNDCUBE_SKINS}"
	  fi
  fi

}

####################################################

preCheck() {
	checkFile /usr/bin/patch
	checkFile /usr/bin/gcc
}


####################################################

addNginxToAccess() {
	COUNT=`grep -c "^access" /etc/group`
	# Check for nginx user in access group
	if [ "${COUNT}" -gt 0 ]; then
		COUNT=`grep "^access" /etc/group | grep -c nginx`
		if [ "${COUNT}" -eq 0 ]; then
			usermod -G access nginx
		fi
	fi
}

####################################################

fpmChecks() {
	if [ "${HAVE_FPM53_CGI}" = "yes" ] && [ -d /usr/local/php53/sockets ]; then
		CHANGED=0
		COUNT=`grep -c nginx /usr/local/php53/etc/php-fpm.conf`
		chown ${WEBSERVER_OPT}:${WEBSERVER_OPT} /usr/local/php53/sockets
		FPM_SOCK_CHMOD=700
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			FPM_SOCK_CHMOD=711
		fi
		chmod ${FPM_SOCK_CHMOD} /usr/local/php53/sockets

		cp -f ${PHP53_FPM_CONF} /usr/local/php53/etc/php-fpm.conf
		if [ "${WEBSERVER_OPT}" = "nginx" ] && [ "${COUNT}" -eq 0 ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/php53/etc/php-fpm.conf
			CHANGED=1
		elif [ "${WEBSERVER_OPT}" = "apache" ] && [ "${COUNT}" -gt 0 ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/php53/etc/php-fpm.conf
			CHANGED=1
		fi
		if [ -e ${INITDDIR}/php-fpm53 ] && [ ${CHANGED} -eq 1 ]; then
			${INITDDIR}/php-fpm53 restart
		fi
	fi
		
	if [ "${HAVE_FPM54_CGI}" = "yes" ] && [ -d /usr/local/php54/sockets ]; then
		CHANGED=0
		COUNT=`grep -c nginx /usr/local/php54/etc/php-fpm.conf`
		chown ${WEBSERVER_OPT}:${WEBSERVER_OPT} /usr/local/php54/sockets
		FPM_SOCK_CHMOD=700
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			FPM_SOCK_CHMOD=711
		fi
		chmod ${FPM_SOCK_CHMOD} /usr/local/php54/sockets

		cp -f ${PHP54_FPM_CONF} /usr/local/php54/etc/php-fpm.conf
		if [ "${WEBSERVER_OPT}" = "nginx" ] && [ "${COUNT}" -eq 0 ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/php54/etc/php-fpm.conf
			CHANGED=1
		elif [ "${WEBSERVER_OPT}" = "apache" ] && [ "${COUNT}" -gt 0 ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/php54/etc/php-fpm.conf
			CHANGED=1
		fi
		if [ -e ${INITDDIR}/php-fpm54 ] && [ ${CHANGED} -eq 1 ]; then
			${INITDDIR}/php-fpm54 restart
		fi
	fi
	
	if [ "${HAVE_FPM55_CGI}" = "yes" ] && [ -d /usr/local/php55/sockets ]; then
		CHANGED=0
		COUNT=`grep -c nginx /usr/local/php55/etc/php-fpm.conf`
		chown ${WEBSERVER_OPT}:${WEBSERVER_OPT} /usr/local/php55/sockets
		FPM_SOCK_CHMOD=700
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			FPM_SOCK_CHMOD=711
		fi
		chmod ${FPM_SOCK_CHMOD} /usr/local/php55/sockets

		cp -f ${PHP55_FPM_CONF} /usr/local/php55/etc/php-fpm.conf
		if [ "${WEBSERVER_OPT}" = "nginx" ] && [ "${COUNT}" -eq 0 ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/php55/etc/php-fpm.conf
			CHANGED=1
		elif [ "${WEBSERVER_OPT}" = "apache" ] && [ "${COUNT}" -gt 0 ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/php55/etc/php-fpm.conf
			CHANGED=1
		fi
		if [ -e ${INITDDIR}/php-fpm55 ] && [ ${CHANGED} -eq 1 ]; then
			${INITDDIR}/php-fpm55 restart
		fi
	fi
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		if [ "${WEBSERVER_OPT}" = "nginx" ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/directadmin/data/templates/php-fpm.conf
		elif [ "${WEBSERVER_OPT}" = "apache" ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/directadmin/data/templates/php-fpm.conf
		fi
	fi
}

dovecotChecks(){
	if [ -e /etc/dovecot.conf ]; then
		COUNT=`grep -c '/etc/httpd/conf/' /etc/dovecot.conf`
		if [ "${WEBSERVER_OPT}" = "nginx" ] && [ ${COUNT} -gt 0 ]; then
			perl -pi -e 's#/etc/httpd/conf/#/etc/nginx/#' /etc/dovecot.conf
			${INITDDIR}/dovecot restart
		elif [ "${WEBSERVER_OPT}" = "apache" ] && [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's#/etc/nginx/#/etc/httpd/conf/#' /etc/dovecot.conf
			${INITDDIR}/dovecot restart
		fi
	fi
}

####################################################

# Check for webapps user
if [ `grep -c -e "^${APPUSER}:" /etc/passwd` = "0" ]; then
        if [ "${OS}" = "FreeBSD" ]; then
                /usr/sbin/pw groupadd ${APPUSER} 2> /dev/null
                /usr/sbin/pw useradd -g ${APPUSER} -n ${APPUSER} -b ${WWWDIR} -s /sbin/nologin 2> /dev/null
        elif [ -e /etc/debian_version ]; then
                /usr/sbin/adduser --system --group --firstuid 100 --home ${WWWDIR} --no-create-home --disabled-login --force-badname ${APPUSER}
        else
                /usr/sbin/useradd -d ${WWWDIR} -s /bin/false ${APPUSER} 2> /dev/null
        fi
fi

####################################################

if [ "${WEBSERVER_OPT}" = "apache" ]; then
	# Do we have httpd-phpmodules.conf line?
	NEWCONFIGS=1
	if [ -e ${HTTPD_CONF} ]; then
		if [ "`grep -c -e '/etc/httpd/conf/extra/httpd-phpmodules.conf' ${HTTPD_CONF}`" = "0" ]; then
			NEWCONFIGS=0
		fi
	fi
fi

####################################################

checkCURL() {
	cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-curl'`
	fi
	if [ ${NUM} = "0" ]
	then
		return;
	fi

	if [ -e /usr/local/lib/libcurl.so ]
	then
		if [ ${USER_INPUT} -eq 1 ]; then
			echo -n "cURL is already installed. Would you like to build it again? (y/n) :";
			read yesno;
			echo "";
		else
			if [ "${INPUT_VALUE}" = "d" ]; then
				yesno=y
			else
				yesno=${INPUT_VALUE}
			fi
		fi
		if [ "${yesno}" = "n" ]
		then
			return;
		fi	
	fi
	
	doCURL;	
}

checkLibJpeg() {
	cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-jpeg\-dir'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

	if [ -e /usr/local/lib/libjpeg.a ]
	then
		if [ ${FORCE} = 1 ]
		then
			return;
		fi

		if [ ${USER_INPUT} -eq 1 ]; then
			echo -n "LibJPEG is already installed. Would you like to build it again? (y/n) :";
			read yesno;
			echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi


		if [ "${yesno}" = "n" ]
		then
			return;
		fi
	fi

	doLibJpeg;
}

checkLibz() {

	if [ "${ZLIB_OPT}" = "no" ]; then
		LIBZ1=/usr/lib/libz.so
		LIBZ2=/usr/lib64/libz.so
		LIBZ3=/lib/x86_64-linux-gnu/libz.so.1
		LIBZ4=/usr/lib/i386-linux-gnu/libz.so
		LIBZ5=/lib/i386-linux-gnu/libz.so.1
		if [ ! -e ${LIBZ1} ] && [ ! -e ${LIBZ2} ] && [ ! -e ${LIBZ3} ] && [ ! -e ${LIBZ4} ] && [ ! -e ${LIBZ5} ]; then
			echo "Cannot find zlib, as installed by package manager (${LIBZ1} or ${LIBZ2} or ${LIBZ3} or ${LIBZ4} or ${LIBZ5})";
			echo "Please install zlib via your package manager (or set zlib=on in the options.conf)";
			echo "";
			
			if [ ${OS} = "FreeBSD" ]; then
				echo "missing zlib on FreeBSD.. Just set zlib=yes in options.conf";
			elif [ -e ${DEBIAN_VERSION} ]; then
				echo "apt-get install zlib1g zlib1g-dev";
			else
				echo "yum install zlib zlib-devel";
			fi
			
			do_exit 0;		
		fi
		
		return;
	fi

	if [ -e /usr/local/lib/libz.so ]
	then
		if [ ${FORCE} = 1 ]
		then
			return;
		fi

		if [ ${USER_INPUT} -eq 1 ]; then	
	                echo -n "LibZ is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

	doZlib;
}

checkLibPng() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-png\-dir'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

	checkLibz;

        if [ -e /usr/local/lib/libpng.a ]
        then
		if [ ${FORCE} = 1 ]
		then
			return;
		fi
		
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "LibPng is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doLibPng;
}

checkMCrypt() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-mcrypt'`
	fi
        if [ ${NUM} = "0" ]
        then
        	return;
        fi

	if [ -e /usr/local/lib/libmcrypt.so ]
	then

		if [ ${USER_INPUT} -eq 1 ]; then
			echo -n "mCrypt is already installed. Would you like to build it again? (y/n) :";
			read yesno;
			echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi
		
		if [ "${yesno}" = "n" ]
		then
			return;
		fi	
	fi

        doMCrypt;
}

checkMHash() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-mhash'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

        if [ -e /usr/local/lib/libmhash.so ]
        then
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "mHash is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doMHash;
}

####################################################

checkFreeType() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-freetype'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

        if [ -e /usr/local/lib/libfreetype.so ]
        then
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "FreeType is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doFreeType;
}

####################################################

checkIconv() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep configure | cut -d\> -f2 | grep -c '\-\-with\-iconv'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

        if [ -e /usr/local/lib/libiconv.so ]
        then
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "iconv is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doIconv;
}

####################################################

dophpMyAdmin(){
	if [ "${PHPMYADMIN_OPT}" != "yes" ]; then
		echo "You cannot install phpMyAdmin, because you do not have it set in options.conf file.";
		exit 1;
	fi

	cd ${CWD};
	if [ ! -d ${WWWDIR} ]; then
		echo "${WWWDIR} does not exist."
		do_exit 0
	fi

	if [ "`version_cmp ${PHPMYADMIN_VER} 4.1.0 'pma ver check'`" -ge 0 ]; then
		#4.1.0 need php 5.3.. which we have.. and mysql 5.5+
		
		if [ ! -s "$MYSQL_BIN" ]; then
			echo "${boldon}phpMyAdmin requires mysqld.  Cannot find $MYSQL_BIN${boldoff}";
			return;
		fi
		
		MYSQLV="`$MYSQL_BIN --version | awk '{ print $5 }' | cut -d , -f1`"
		
		if [ "`version_cmp ${MYSQLV} 5.5.0 'pma mysql check'`" -lt 0 ]; then
			echo "${boldon}phpMyAdmin ${PHPMYADMIN_VER} requires MySQL 5.5+, but ${MYSQLV} is installed${boldoff}";
			echo "${boldon}Dropping phpMyAdmin version down to 4.0.10${boldoff}";
			
			PHPMYADMIN_VER=4.0.10-all-languages
			#prevent md5 lookup
			PHPMYADMIN_VER_OPT=old
		fi
	fi


	TARFILE=${WORKDIR}/phpMyAdmin-${PHPMYADMIN_VER}.tar.gz
	REALPATH=${WWWDIR}/phpMyAdmin-${PHPMYADMIN_VER}
	ALIASPATH=${WWWDIR}/phpMyAdmin
	CONFIG=${REALPATH}/config.inc.php
	WEBFILE=${WEBPATH_SERVICES}/all/phpMyAdmin/phpMyAdmin-${PHPMYADMIN_VER}.tar.gz

	if [ ! -s ${TARFILE} ]; then
	        ${WGET} -O ${TARFILE} ${WEBFILE}
	fi

	if [ ! -s ${TARFILE} ]; then
		echo "The phpMyAdmin package cannot be found. Please ensure that the paths are correct";
		do_exit 0;
	fi

	PMA_NAME="phpmyadmin${PHPMYADMIN_VER_OPT}"

	M=`checkMD5 $TARFILE ${PMA_NAME}`
	if [ "$M" != "0" ]; then
		echo "";
		echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
		echo "";
		${WGET} -O ${TARFILE} ${WEBFILE}
	
	        M=`checkMD5 $TARFILE ${PMA_NAME}`
		if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
		fi
	fi

	${TAR} xzf ${TARFILE} --no-same-owner -C ${WWWDIR};

	if [ -e ${PMA_CONFIG} ]; then
		echo "Installing custom PhpMyAdmin Config: ${PMA_CONFIG}";
		cp -f ${PMA_CONFIG} ${REALPATH}/config.inc.php
	else
		cp -f ${REALPATH}/config.sample.inc.php ${REALPATH}/config.inc.php
		perl -pi -e "s#\['host'\] = 'localhost'#\['host'\] = '${MYSQLHOST}'#" ${REALPATH}/config.inc.php
		perl -pi -e "s#\['auth_type'\] = 'cookie'#\['auth_type'\] = 'http'#" ${REALPATH}/config.inc.php
		perl -pi -e "s#\['extension'\] = 'mysql'#\['extension'\] = 'mysqli'#" ${REALPATH}/config.inc.php
	fi

	if [ -d ${PMA_THEMES} ]; then
			echo "Installing custom PhpMyAdmin themes: ${PMA_THEMES}";
			cp -Rf ${PMA_THEMES} ${REALPATH}
	fi
		
	rm -f ${ALIASPATH} >/dev/null 2>&1
	ln -s ${REALPATH} ${ALIASPATH}

	${CHOWN} -f -R ${APPUSER}:${APPUSER} ${REALPATH};
	${CHOWN} -h ${APPUSER}:${APPUSER} ${ALIASPATH}
	chmod -f 755 ${REALPATH};

	if [ -d ${REALPATH}/scripts ]; then
		chmod 000 ${REALPATH}/scripts
	fi
	
	if [ -d ${REALPATH}/setup ]; then
		chmod 000 ${REALPATH}/setup
	fi
	
	echo "phpMyAdmin ${PHPMYADMIN_VER} installation is done."
}

####################################################

doSquirrelmail(){
	if [ "${SQUIRRELMAIL_OPT}" != "yes" ]; then
		echo "You cannot install Squirrelmail, because you do not have it set in options.conf file.";
		exit 1;
	fi

        cd ${CWD};
	if [ ! -d ${WWWDIR} ]; then
		echo "${WWWDIR} does not exist."
		do_exit 0
	fi

	TARFILE=${WORKDIR}/squirrelmail-${SQUIRRELMAIL_VER}.tar.gz
	LOCALEFILE=${WORKDIR}/all_locales-${SQUIRRELMAIL_LOCALE_VER}.tar.gz
	REALPATH=${WWWDIR}/squirrelmail-${SQUIRRELMAIL_VER}
	ALIASPATH=${WWWDIR}/squirrelmail
	CONFIG=${REALPATH}/config/config.php

	if [ ! -s ${TARFILE} ]; then
	        ${WGET} -O ${TARFILE} ${WEBPATH_SERVICES}/all/squirrelmail-${SQUIRRELMAIL_VER}.tar.gz
	fi

	if [ ! -s ${TARFILE} ]; then
                echo "The squirrelmail package cannot be found. Please ensure that the paths are correct";
                do_exit 0;
	fi

	if [ ! -s ${LOCALEFILE} ]; then
		${WGET} -O ${LOCALEFILE} ${WEBPATH_SERVICES}/all/squirrelmail/locales/all_locales-${SQUIRRELMAIL_LOCALE_VER}.tar.gz
	fi

        M=`checkMD5 $TARFILE squirrelmail`
        if [ "$M" != "0" ]; then
                echo "";
                echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
                echo "";
		${WGET} -O ${TARFILE} ${WEBPATH_SERVICES}/all/squirrelmail-${SQUIRRELMAIL_VER}.tar.gz

                M=`checkMD5 $TARFILE squirrelmail`
                if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
                fi
        fi

	M=`checkMD5 ${LOCALEFILE} squirrelmail_locale`
	if [ "$M" != "0" ]; then
		echo "${boldon}*** MD5 Checksum for $LOCALEFILE Failed.  Redownloading...***${boldoff}";
		${WGET} -O ${LOCALEFILE} ${WEBPATH_SERVICES}/all/squirrelmail/locales/all_locales-${SQUIRRELMAIL_LOCALE_VER}.tar.gz
	fi

	#Extract the file
	${TAR} xzf ${TARFILE} --no-same-owner -C ${WWWDIR}

	#install locales
	${TAR} xzf ${LOCALEFILE} --no-same-owner -C ${REALPATH}

	#this bit is to copy all of the preious setup to the new setup
	if [ -e ${ALIASPATH} ]; then
	   cp -fR ${ALIASPATH}/data ${REALPATH}
	fi

	#link it from a fake path:
	/bin/rm -f ${ALIASPATH}
	/bin/ln -sf squirrelmail-${SQUIRRELMAIL_VER} ${ALIASPATH}
	${CHOWN} -h ${APPUSER}:${APPUSER} ${ALIASPATH}

	#install the proper config:
	if [ ! -e ${CONFIG} ]; then
		if [ -e ${SQUIRREL_CONFIG} ]; then
			echo "Installing custom SquirrelMail Config: ${SQUIRREL_CONFIG}";
			/bin/cp -f ${SQUIRREL_CONFIG} ${CONFIG}
		else
			/bin/cp -f ${REALPATH}/config/config_default.php ${CONFIG}

			/usr/bin/perl -pi -e 's/\$force_username_lowercase = false/\$force_username_lowercase = true/' ${CONFIG}
			/usr/bin/perl -pi -e "s/\'example.com\';/\\$\_SERVER\[\'HTTP_HOST\'\];\nwhile \(sizeof\(explode\(\'\.\', \\$\domain\)\) \> 2) {\n\t\\$\domain = substr(\\$\domain, strpos\(\\$\domain, \'\.\'\) \+ 1\);\n\}/" ${CONFIG}
			/usr/bin/perl -pi -e 's/\$show_contain_subfolders_option = false/\$show_contain_subfolders_option = true/' ${CONFIG}

			/usr/bin/perl -pi -e 's/\$allow_thread_sort = false/\$allow_thread_sort = true/' ${CONFIG}
			/usr/bin/perl -pi -e 's/\$allow_server_sort = false/\$allow_server_sort = true/' ${CONFIG}

			/usr/bin/perl -pi -e 's#/var/local/squirrelmail/data/#/var/www/html/squirrelmail/data/#' ${CONFIG}
			/usr/bin/perl -pi -e 's#/var/local/squirrelmail/attach/#/var/www/html/squirrelmail/data/#' ${CONFIG}

			#we want it to use port 587 and use smtp auth.
			/usr/bin/perl -pi -e 's/\$smtpPort = 25/\$smtpPort = 587/' ${CONFIG}
			/usr/bin/perl -pi -e "s#\$smtp_auth_mech = \'none\'#\$smtp_auth_mech = \'login\'#" ${CONFIG}

			#enable the pluguins
			/usr/bin/perl -pi -e "s/Add list of enabled plugins here/Add list of enabled plugins here\n\\$\plugins\[0\] = \'spamcop\';\n\\$\plugins\[1\] = \'filters\';\n\\$\plugins\[2\] = \'squirrelspell\';/" ${CONFIG}
		fi
	fi

	/usr/bin/perl -pi -e 's/\$allow_charset_search = true;/\$allow_charset_search = false;/' ${CONFIG}

	#set the permissions:
	/bin/chmod -R 755 ${REALPATH}
	${CHOWN} -R ${APPUSER}:${APPUSER} ${REALPATH}

	if [ "${PHP1_MODE}" = "mod_php" ] && [ "${MOD_RUID2_OPT}" = "no" ]; then
		/bin/chmod -R 770 ${REALPATH}/data
		${CHOWN} -R apache:${APPUSER} ${REALPATH}/data
	fi
	
	echo "SquirrelMail ${SQUIRRELMAIL_VER} installation is done."
}

####################################################

doroundcube(){
	if [ "${ROUNDCUBE_OPT}" != "yes" ]; then
		echo "You cannot install RoundCube webmail, because you do not have it set in options.conf file.";
		exit 1;
	fi

    cd ${CWD};
	TARFILE=${WORKDIR}/roundcubemail-${ROUNDCUBE_VER}.tar.gz
	REALPATH=${WWWDIR}/roundcubemail-${ROUNDCUBE_VER}
	ALIASPATH=${WWWDIR}/roundcube
	if [ -e /etc/httpd/conf/extra/httpd-alias.conf ]; then
		HTTPDCONF=/etc/httpd/conf/extra/httpd-alias.conf
	else
		HTTPDCONF=/etc/httpd/conf/httpd.conf
	fi
	CONFIG=${REALPATH}/config/main.inc.php
	DA_HOSTNAME=`hostname`
	HTTPPATH=${WEBPATH_SERVICES}/all/roundcube

	# variables for the database:
	ROUNDCUBE_DB=da_roundcube
	ROUNDCUBE_DB_USER=da_roundcube
	ROUNDCUBE_DB_PASS=`perl -le'print map+(A..Z,a..z,0..9)[rand 62],0..7'`;
	DB_CONFIG=${REALPATH}/config/db.inc.php
	
	if [ ! -s ${TARFILE} ]; then
		${WGET} -O ${TARFILE} ${HTTPPATH}/roundcubemail-${ROUNDCUBE_VER}.tar.gz
	fi

	if [ ! -s ${TARFILE} ]; then
		echo "Cannot download roundcubemail-${ROUNDCUBE_VER}"
		do_exit 0
	fi

        M=`checkMD5 $TARFILE roundcube`
        if [ "$M" != "0" ]; then
                echo "";
                echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
                echo "";
				${WGET} -O ${TARFILE} ${HTTPPATH}/roundcubemail-${ROUNDCUBE_VER}.tar.gz

                M=`checkMD5 $TARFILE roundcube`
                if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
                fi
        fi

	MYSQLUP=0
	OLD_RC_VER=`roundcube_version`
	if [ -d $MYSQL_DATA/${ROUNDCUBE_DB} ]; then
		if [ "${OLD_RC_VER}" != "${ROUNDCUBE_VER}" ]; then
			MYSQLUP=1
		fi
	fi

	#Extract the file
	${TAR} xzf ${TARFILE} --no-same-owner -C ${WWWDIR}

	if [ ! -e ${REALPATH} ]; then
		echo "Directory ${REALPATH} does not exist"
		exit 1
	fi

	if [ -e ${ALIASPATH} ]; then
		if [ -d ${ALIASPATH}/logs ]; then
			cp -fR ${ALIASPATH}/logs ${REALPATH}
		fi
		if [ -d ${ALIASPATH}/temp ]; then
			cp -fR ${ALIASPATH}/temp ${REALPATH}
		fi
	fi

	#link it from a fake path:
	/bin/rm -f ${ALIASPATH}
	/bin/ln -sf roundcubemail-${ROUNDCUBE_VER} ${ALIASPATH}
	${CHOWN} -h ${APPUSER}:${APPUSER} ${ALIASPATH}
	cd ${REALPATH}

	#insert data to mysql and create database/user for roundcube:
	if [ ! -d $MYSQL_DATA/${ROUNDCUBE_DB} ]; then
		if [ -d SQL ]; then
			echo "Inserting data to mysql and creating database/user for roundcube..."
			mysql -e "CREATE DATABASE ${ROUNDCUBE_DB};" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
			mysql -e "GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,LOCK TABLES,INDEX ON ${ROUNDCUBE_DB}.* TO '${ROUNDCUBE_DB_USER}'@'${MYSQL_ACCESS_HOST}' IDENTIFIED BY '${ROUNDCUBE_DB_PASS}';" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
			mysql -e "use ${ROUNDCUBE_DB}; source SQL/mysql.initial.sql;" --user=${ROUNDCUBE_DB_USER} --password=${ROUNDCUBE_DB_PASS}
			echo "Database created, ${ROUNDCUBE_DB_USER} password is ${ROUNDCUBE_DB_PASS}"
		else
			echo "Cannot find SQL directory in roundcubemail-${ROUNDCUBE_VER}"
			do_exit 0
		fi
	else
		if [ ! -e ${ROUNDCUBE_CONFIG_DB} ]; then
			mysql -e "SET PASSWORD FOR '${ROUNDCUBE_DB_USER}'@'${MYSQL_ACCESS_HOST}' = PASSWORD('${ROUNDCUBE_DB_PASS}');" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
			mysql -e "GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,LOCK TABLES,INDEX ON ${ROUNDCUBE_DB}.* TO '${ROUNDCUBE_DB_USER}'@'${MYSQL_ACCESS_HOST}' IDENTIFIED BY '${ROUNDCUBE_DB_PASS}';" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD}

			#There is a new bin/update.sh script, packages with the script, so no longer needed.
			#if [ "${MYSQLUP}" = "1" ]; then
			if [ "0" = "1" ]; then
				UPDATE_FROM=${OLD_RC_VER}
				NEWSQL=${REALPATH}/SQL/mysql.update.proper.sql
				UPDATE_SQL=${REALPATH}/SQL/mysql.update.sql

				if [ "${UPDATE_FROM}" != "0" ]; then
					tail -n +`grep -n "version $UPDATE_FROM\$" ${UPDATE_SQL} | cut -d: -f1` ${UPDATE_SQL} > $NEWSQL
					echo "Updating mysql database ...";
					mysql -e "use ${ROUNDCUBE_DB}; source $NEWSQL;" --user=${ROUNDCUBE_DB_USER} --password=${ROUNDCUBE_DB_PASS}
				fi
			fi
		fi
	fi

	#install the proper config:
	if [ -d ../roundcube ]; then
		echo "Editing roundcube configuration..."
		cd ${REALPATH}/config
		
		if [ -e ${ROUNDCUBE_CONFIG_DB} ]; then
			/bin/cp -f ${ROUNDCUBE_CONFIG_DB} db.inc.php
		else		
			/bin/cp -f db.inc.php.dist db.inc.php
			/usr/bin/perl -pi -e "s|mysql://roundcube:pass\@localhost/roundcubemail|mysql://${ROUNDCUBE_DB_USER}:${ROUNDCUBE_DB_PASS}\@${MYSQLHOST}/${ROUNDCUBE_DB}|" db.inc.php > /dev/null
			/usr/bin/perl -pi -e "s/\'mdb2\'/\'db\'/" db.inc.php > /dev/null
		fi
		
		if [ -e ${ROUNDCUBE_CONFIG} ]; then
			echo "Installing custom RoundCube Config: ${ROUNDCUBE_CONFIG}";
			cp -f ${ROUNDCUBE_CONFIG} main.inc.php
		else
			/bin/mv -f main.inc.php.dist main.inc.php
			/usr/bin/perl -pi -e "s|\['enable_caching'] = TRUE|\['enable_caching'] = FALSE|" main.inc.php > /dev/null

			#It's better not use use imap_root/delimiter
			#/usr/bin/perl -pi -e "s|\['imap_root'] = null|\['imap_root'] = 'INBOX.'|" main.inc.php > /dev/null
			#/usr/bin/perl -pi -e "s|\['imap_delimiter'] = null|\['imap_delimiter'] = '.'|" main.inc.php > /dev/null

			/usr/bin/perl -pi -e "s|\['default_host'] = ''|\['default_host'] = 'localhost'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['drafts_mbox'] = 'Drafts'|\['drafts_mbox'] = 'INBOX.Drafts'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['junk_mbox'] = 'Junk'|\['junk_mbox'] = 'INBOX.spam'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['sent_mbox'] = 'Sent'|\['sent_mbox'] = 'INBOX.Sent'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['trash_mbox'] = 'Trash'|\['trash_mbox'] = 'INBOX.Trash'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['default_imap_folders'] = array\('INBOX', 'Drafts', 'Sent', 'Junk', 'Trash'\)|\['default_imap_folders'] = array\('INBOX', 'INBOX.Drafts', 'INBOX.Sent', 'INBOX.spam', 'INBOX.Trash'\)|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['default_folders'] = array\('INBOX', 'Drafts', 'Sent', 'Junk', 'Trash'\)|\['default_folders'] = array\('INBOX', 'INBOX.Drafts', 'INBOX.Sent', 'INBOX.spam', 'INBOX.Trash'\)|" main.inc.php > /dev/null

			#smtp stuff
			/usr/bin/perl -pi -e "s|\['smtp_port'] = 25|\['smtp_port'] = 587|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['smtp_server'] = ''|\['smtp_server'] = 'localhost'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['smtp_user'] = ''|\['smtp_user'] = '%u'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['smtp_pass'] = ''|\['smtp_pass'] = '%p'|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['smtp_auth_type'] = ''|\['smtp_auth_type'] = 'LOGIN'|" main.inc.php > /dev/null

			/usr/bin/perl -pi -e "s|\['create_default_folders'] = FALSE;|\['create_default_folders'] = TRUE;|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['create_default_folders'] = false;|\['create_default_folders'] = true;|" main.inc.php > /dev/null
			
			/usr/bin/perl -pi -e "s|\['login_lc'] = 0;|\['login_lc'] = 2;|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['login_autocomplete'] = 0;|\['login_autocomplete'] = 2;|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['quota_zero_as_unlimited'] = false;|\['quota_zero_as_unlimited'] = true;|" main.inc.php > /dev/null
			/usr/bin/perl -pi -e "s|\['enable_spellcheck'] = true;|\['enable_spellcheck'] = false;|" main.inc.php > /dev/null
		fi                

                #password plugin
                if [ -e ${REALPATH}/plugins/password ]; then
                        /usr/bin/perl -pi -e "s|\['plugins'] = array\(\);|\['plugins'] = array\('password'\);|" main.inc.php > /dev/null

                        cd ${REALPATH}/plugins/password
                        if [ ! -e config.inc.php ]; then
                                cp config.inc.php.dist config.inc.php
                        fi

			/usr/bin/perl -pi -e "s|\['password_driver'] = 'sql'|\['password_driver'] = 'directadmin'|" config.inc.php > /dev/null

                        if [ -e $DACONF_FILE ]; then
                                DAPORT=`grep -e '^port=' /usr/local/directadmin/conf/directadmin.conf | cut -d= -f2`
                                /usr/bin/perl -pi -e "s|\['password_directadmin_port'] = 2222|\['password_directadmin_port'] = $DAPORT|" config.inc.php > /dev/null

				DASSL=`grep -e '^SSL=' /usr/local/directadmin/conf/directadmin.conf | cut -d= -f2`
				if [ "$DASSL" -eq 1 ];then
					/usr/bin/perl -pi -e "s|\['password_directadmin_host'] = 'tcp://localhost'|\['password_directadmin_host'] = 'ssl://localhost'|" config.inc.php > /dev/null
				fi
                        fi
			cd ${REALPATH}/config
                fi
                
                #pigeonhole plugin
                if [ "${PIGEONHOLE_OPT}" = "yes" ]; then
			if [ -d ${REALPATH}/plugins/managesieve ]; then
				/usr/bin/perl -pi -e "s|\['plugins'] = array\('password'\);|\['plugins'] = array\('password','managesieve'\);|" main.inc.php > /dev/null
				/usr/bin/perl -pi -e "s|\['managesieve_port'] = null|\['managesieve_port'] = null|" main.inc.php > /dev/null;

				cd ${REALPATH}/plugins/managesieve
				if [ ! -e config.inc.php ]; then
					cp config.inc.php.dist config.inc.php
				fi
				cd ${REALPATH}/config
			fi
		fi

		if [ -d ${ROUNDCUBE_PLUGINS} ]; then
			echo "Copying files from ${ROUNDCUBE_PLUGINS} to ${REALPATH}/plugins";
			cp -Rp ${ROUNDCUBE_PLUGINS}/* ${REALPATH}/plugins
		fi
		
		if [ -d ${ROUNDCUBE_SKINS} ]; then
			echo "Copying files from ${ROUNDCUBE_SKINS} to ${REALPATH}/skins";
			cp -Rp ${ROUNDCUBE_SKINS}/* ${REALPATH}/skins
		fi

		echo "Roundcube ${ROUNDCUBE_VER} has been installed successfully."
	fi

	#set the permissions:
	${CHOWN} -R ${APPUSER}:${APPUSER} ${REALPATH}
	if [ "${PHP1_MODE}" = "mod_php" ] && [ "${MOD_RUID2_OPT}" = "no" ]; then
		${CHOWN} -R apache ${REALPATH}/temp ${REALPATH}/logs
		/bin/chmod -R 770 ${REALPATH}/temp
		/bin/chmod -R 770 ${REALPATH}/logs
	fi

	#secure the db.inc.php
	if [ -s ${DB_CONFIG} ]; then
		chmod 440 ${DB_CONFIG}
		chown ${APPUSER}:${WEBSERVER_OPT} ${DB_CONFIG}
	fi

	#systems with "system()" in disable_functions need to use no php.ini:
	if [ "`have_php_system`" = "0" ]; then
		perl -pi -e 's#^\#\!/usr/bin/env php#\#\!/usr/local/bin/php \-n#' ${REALPATH}/bin/update.sh
	fi


	#update if needed
	${REALPATH}/bin/update.sh '--version=?'

	#cleanup
	rm -rf ${ALIASPATH}/installer

	RC_HTACCESS=${REALPATH}/.htaccess
	if [ -s "${RC_HTACCESS}" ]; then
		COUNT=`grep -c upload_max_filesize ${RC_HTACCESS}`
		if [ "${COUNT}" -ge 1 ]; then
			perl -pi -e 's/^php_value\supload_max_filesize/#php_value       upload_max_filesize/' ${RC_HTACCESS}
			perl -pi -e 's/^php_value\spost_max_size/#php_value       post_max_size/' ${RC_HTACCESS}
		fi
	fi

	#writing alias to httpd.conf
	COUNTALIAS=`grep -c -e "Alias /roundcube" ${HTTPDCONF}`
	if [ "${COUNTALIAS}" = "0" ]; then
		echo "Adding roundcube alias to ${HTTPDCONF}"
		echo "" >> ${HTTPDCONF}
		echo "# Alias for RoundCube webmail" >> ${HTTPDCONF}
		echo "Alias /roundcube ${ALIASPATH}/" >> ${HTTPDCONF}
		echo "" >> ${HTTPDCONF}
		echo "You need to restart the httpd service if you want alias to work."
	fi
	
	cd ${CWD}
}

####################################################

doExim(){
	if [ "${EXIM_OPT}" != "yes" ]; then
		echo "You cannot update Exim configuration files, because you do not have it set in options.conf file.";
		exit 1;
	fi

	if [ ! -e /usr/include/db.h ]; then
		echo "Cannot find /usr/include/db.h.  Please install db.h";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install libdb4.8-dev libperl-dev libsasl2-dev";
		elif [ ${OS} = "FreeBSD" ]; then
			echo "pkg_add -r cyrus-sasl2"
		else
			echo "yum install db4-devel cyrus-sasl-devel perl-ExtUtils-Embed";
		fi
		do_exit 0;
	fi

	getFile exim-${EXIM_VER}.tar.gz
	getFile exim
	getFile exim_freebsd
	getFile exim_debian

	quitIfLocked doExim
	
	cd ${CWD};
	FILE=${CWD}/exim-${EXIM_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";

	cd exim-${EXIM_VER}

	if [ "${EXIM_MAKEFILE}" != "" ]; then
		cp -f ${EXIM_MAKEFILE} Local/Makefile
	else
		wget -O Local/Makefile ${WEBPATH}/Makefile
	fi

	while
	echo "Trying to make exim..."
	do
	{
		#removed multiple cores: http://www.directadmin.com/forum/showthread.php?p=181950&posted=1#post181950
		#C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}
		C_INCLUDE_PATH=/usr/kerberos/include make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
	                else
        	                if [ "${INPUT_VALUE}" = "d" ]; then
                	                yesno=n
                        	else
                                	yesno=${INPUT_VALUE}
	                        fi
        	        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make Complete";

	while
	echo "Installing exim...";
	do
	{
		make install

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The install has failed, would you like to try to install it again? (y,n): ";
        	                read yesno;
                	        echo "";
			else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
			fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
	}
	done;

	echo "Moving exim binary."
	EXIM_BINARY=`ls -t /usr/sbin/exim-${EXIM_VER}-* | head -n1`
	mv -f ${EXIM_BINARY} /usr/sbin/exim
	chmod 4755 /usr/sbin/exim

	if [ ! -e /etc/exim.conf ]; then
		wget -O /etc/exim.conf $WEBPATH/exim.conf
		wget -O /etc/exim.pl $WEBPATH/exim.pl
	fi

	if [ ! -e ${INITDDIR}/exim ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			cp ${CWD}/exim_freebsd ${INITDDIR}/exim
			chmod 755 ${INITDDIR}/exim
		elif [ -e /etc/debian_version ]; then
			cp ${CWD}/exim_debian ${INITDDIR}/exim
			chmod 755 ${INITDDIR}/exim
			update-rc.d exim defaults
		else
			cp ${CWD}/exim_boot ${INITDDIR}/exim
			chmod 755 ${INITDDIR}/exim
			/sbin/chkconfig exim on
		fi
	fi

	echo "Exim ${EXIM_VER} Installed.";
	removeLockfile
	cd ${CWD};

	cagefsctl_update;
	
	echo "Restarting exim."
	${INITDDIR}/exim restart
}

####################################################

doEximConf(){
	if [ "${EXIMCONF_OPT}" != "yes" ]; then
		echo "You cannot update Exim configuration files, because you do not have it set in options.conf file.";
		exit 1;
	fi
	wget -O /etc/exim.conf http://${DOWNLOADSERVER_OPT}/services/exim.conf
	wget -O /etc/exim.pl http://${DOWNLOADSERVER_OPT}/services/exim.pl
	wget -O /etc/exim.spamassassin.conf http://${DOWNLOADSERVER_OPT}/services/exim.spamassassin.conf
#Commented out for ClamAV
#	wget -O /etc/exim.clamav.load.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.load.conf
#	wget -O /etc/exim.clamav.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.conf
	chmod 755 /etc/exim.pl
	cd /etc/virtual
	touch blacklist_domains whitelist_from use_rbl_domains bad_sender_hosts blacklist_senders whitelist_domains whitelist_hosts whitelist_senders
	echo 0 > limit
	mkdir -p usage
	chown mail:mail blacklist_domains whitelist_from use_rbl_domains bad_sender_hosts blacklist_senders whitelist_domains whitelist_hosts whitelist_senders limit usage

	if [ "${DOVECOT_OPT}" = "yes" ]; then
		cd ${WORKDIR}
		patch -p0 < exim.conf.dovecot.patch
	fi

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		perl -pi -e 's|#.include_if_exists /etc/exim.spamassassin.conf|.include_if_exists /etc/exim.spamassassin.conf|' /etc/exim.conf
	else
		perl -pi -e 's|^.include_if_exists /etc/exim.spamassassin.conf|#.include_if_exists /etc/exim.spamassassin.conf|' /etc/exim.conf
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		perl -pi -e 's|#.include_if_exists /etc/exim.clamav.load.conf|.include_if_exists /etc/exim.clamav.load.conf|' /etc/exim.conf
		perl -pi -e 's|#.include_if_exists /etc/exim.clamav.conf|.include_if_exists /etc/exim.clamav.conf|' /etc/exim.conf
	else
		perl -pi -e 's|^.include_if_exists /etc/exim.clamav.load.conf|#.include_if_exists /etc/exim.clamav.load.conf|' /etc/exim.conf
		perl -pi -e 's|^.include_if_exists /etc/exim.clamav.conf|#.include_if_exists /etc/exim.clamav.conf|' /etc/exim.conf
	fi
	
	echo "Restarting exim."
	${INITDDIR}/exim restart
}

####################################################

compile_mysql_binary()
{
		MYSQLURL=${WEBPATH_SERVICES}/all/mysql
		MYSQLSRC=mysql-${MYSQL_VER}		

		if [ ! -s ${MYSQLSRC}.tar.gz ]; then
			fetch -o ./${MYSQLSRC}.tar.gz ${MYSQLURL}/${MYSQLSRC}.tar.gz
			if [ ! -s ${MYSQLSRC}.tar.gz ]; then
					wget -O ${MYSQLSRC}.tar.gz ${MYSQLURL}/${MYSQLSRC}.tar.gz
			fi
		fi

		M=`checkMD5 ${MYSQLSRC}.tar.gz mysql${MYSQL_OPT}`
		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for ${MYSQLSRC}.tar.gz  Failed.  Redownloading...***${boldoff}";
			echo "";
			wget -O ${MYSQLSRC}.tar.gz ${MYSQLURL}/${MYSQLSRC}.tar.gz

			M=`checkMD5 ${MYSQLSRC}.tar.gz mysql${MYSQL_OPT}`
        	        if [ "$M" != "0" ]; then
                	                echo "";
                        	        echo "";
                                	echo "${boldon}*** MD5 Checksum for ${MYSQLSRC}.tar.gz failed *again*.***${boldoff}";
	                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
        	                        echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                	                echo "";
                        	        echo "";
	                fi
		fi
		
		if [ -e ${MYSQLSRC} ]; then
			echo "Found old ${MYSQLSRC}, removing ...";
			rm -rf ${MYSQLSRC};
		fi

		echo "Extracting ${MYSQLSRC}.tar.gz ... ";

		tar xzf ${MYSQLSRC}.tar.gz --no-same-owner
		cd ${MYSQLSRC}

		CFLAGS=-DHAVE_BROKEN_REALPATH
		if [ "${MYSQL_OPT}" = "5.5" ] || [ "${MYSQL_OPT}" = "5.6" ]; then
			if [ "${OS}" != "FreeBSD" ]; then
				if [ ! -e /usr/lib/libaio.so.1 ] && [ ! -e /lib64/libaio.so.1 ] && [ ! -e /lib/libaio.so.1 ] && [ ! -e /lib/x86_64-linux-gnu/libaio.so.1 ] && [ ! -e /lib/i386-linux-gnu/libaio.so.1 ]; then
					echo "Cannot find libaio.so.1.  Please install libaio";
					if [ -e /etc/debian_version ]; then
						echo "apt-get install libaio1 libaio-dev";
					else
						echo "yum install libaio";
					fi
					return;
				fi
			fi
			if [ -e /etc/debian_version ] || [ "${OS}" = "FreeBSD" ]; then
				if [ ! -e /usr/local/cmake ] && [ ! -e /usr/local/bin/cmake ] && [ ! -e /usr/bin/cmake ]; then
					echo "Cannot find cmake, please install it.";
					if [ -e /etc/debian_version ]; then
						echo "apt-get install cmake";
					elif [ "${OS}" = "FreeBSD" ]; then
						echo "pkg_add -r cmake";
					fi
					
					echo "If your package manager is not working, see: http://help.directadmin.com/item.php?id=494";
					return;
				fi
			fi
			cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DWITH_INNOBASE_STORAGE_ENGINE=1 \
					-DWITH_FEDERATED_STORAGE_ENGINE=1 \
					-DWITH_ZLIB=bundled -DWITH_EXTRA_CHARSETS=all
		else
			./configure --prefix=/usr/local/mysql --with-extra-charsets=all --enable-thread-safe-client \
					 --enable-static --enable-assembler --with-named-z-libs=not-used --enable-shared \
					 --with-federated-storage-engine \
					 --with-innodb --with-plugins=innobase
		fi
		echo "Done. Making ${MYSQLSRC}...";
		while
		echo "Trying to make ${MYSQLSRC}..."
		do
		{
				make -j ${CPU_CORES}

				if [ $? -ne 0 ]
				then
						if [ ${USER_INPUT} -eq 1 ]; then
								$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
								read yesno;
								echo "";
						else
								if [ "${INPUT_VALUE}" = "d" ]; then
										yesno=n
								else
										yesno=${INPUT_VALUE}
								fi
						fi

						if [ "${yesno}" = "n" ]
						then
								do_exit 0;
						fi
				else
						break;
				fi
		}
		done
		echo "Make complete";
		echo "Packaging ${MYSQLSRC}...";
		./scripts/make_binary_distribution

		echo "Moving ${MYSQLSRC}-*.tar.gz to ${WORKDIR} ...";
		mv -f ${MYSQLSRC}-*.tar.gz ..
		cd ..
		echo "Done.";
}

all_databases()
{
	if [ "$MYSQLUSER" = "" ] || [ "$MYSQLPASSWORD" = "" ]; then
		do_exit 1 "all_databases: user or password is blank";
	fi

	#Assumes that MYSQLUSER and MYSQLPASSWORD are already set.
	CMD="echo 'SHOW DATABASES' | $MYSQL_BIN -u${MYSQLUSER} -p'${MYSQLPASSWORD}'";
	eval $CMD | grep -v '^Database$' | grep -v '^information_schema$' | grep -v '^performance_schema$';
}

doMySQLback(){
    if [ "${MYSQLBACK_OPT}" = "yes" ]; then

	MYSQLDUMP=/usr/local/mysql/bin/mysqldump
	if [ ! -e $MYSQLDUMP ]; then
		MYSQLDUMP=/usr/bin/mysqldump
	fi
	if [ ! -e $MYSQLDUMP ]; then
		echo "Cannot find $MYSQLDUMP";
		return;
	fi

	if [ ! -d ${MYSQLBACKDIR_OPT} ]; then
	  mkdir -p ${MYSQLBACKDIR_OPT}
	fi
	chmod 700 ${MYSQLBACKDIR_OPT}

	# sysbk code
	cd ${MYSQL_DATA}
	#for i in `ls -d */ | cut -d/ -f1`; do
	for i in `all_databases`; do
	  echo -ne "       Dumping database $i \n"
	  echo -ne "       Dumping database $i \n" >> ${WORKDIR}/mysql_backups.log
	  $MYSQLDUMP -l -u${MYSQLUSER} -p${MYSQLPASSWORD} $i > ${MYSQLBACKDIR_OPT}/$i.sql
	  chmod 660 ${MYSQLBACKDIR_OPT}/$i.sql
	done
    fi
}

backup_libmysqlclient()
{
	if [ ! -e /etc/debian_version ]; then
		return;
	fi

	LDD=/usr/bin/ldd
	LIB_PATH=/usr/local/mysql/lib
	COUNT=`${LDD} ${DA_BIN} 2>/dev/null | grep -c libmysqlclient.so`

	if [ "${COUNT}" -gt 0 ]; then
		LIB_NAME=`${LDD} ${DA_BIN} 2>/dev/null | grep libmysqlclient.so | awk '{ print $1; }'`
		CLIENT_LIB=`${LDD} ${DA_BIN} 2>/dev/null | grep libmysqlclient.so | awk '{ print $3; }'`
		if [ -s "${CLIENT_LIB}" ]; then
			echo "Backing up ${CLIENT_LIB} to ${WORKDIR}/${LIB_NAME}"
			cp -fp ${CLIENT_LIB} ${WORKDIR}/${LIB_NAME}
		fi
	fi
}

restore_libmysqlclient()
{
	if [ ! -e /etc/debian_version ]; then
		return;
	fi

	LDD=/usr/bin/ldd
	LIB_PATH=/usr/local/mysql/lib
	COUNT=`${LDD} ${DA_BIN} 2>/dev/null | grep -c libmysqlclient.so`
		
	if [ "${COUNT}" -gt 0 ]; then
		LIB_NAME=`${LDD} ${DA_BIN} 2>/dev/null | grep libmysqlclient.so | awk '{ print $1; }'`
		CLIENT_LIB=${LIB_PATH}/${LIB_NAME}
		if [ ! -s "${CLIENT_LIB}" ]; then
			if [ ! -s ${WORKDIR}/${LIB_NAME} ]; then
				echo "Cannot find ${WORKDIR}/${LIB_NAME} to restore.";
				echo "DirectAdmin might crash. If needed, see this guide:";
				echo "http://help.directadmin.com/item.php?id=236";
				return;
			fi
		
			cp -fp ${WORKDIR}/${LIB_NAME} ${CLIENT_LIB}
		fi
	fi
}

doMySQL() {
	if [ "${MYSQLINST_OPT}" != "yes" ]; then
		echo "You cannot install MySQL, because you do not have it set in options.conf file.";
		exit 1;
	fi

	doMySQLback;

	cd ${CWD};

	set_service mysqld OFF

	if [ ${OS} = "FreeBSD" ]; then

		MYSQLURL=${WEBPATH_SERVICES}/all/mysql
		MYSQLPACK=mysql-${MYSQL_VER}

		BINPACK=`ls $MYSQLPACK-*i386.tar.gz $MYSQLPACK-*i686.tar.gz $MYSQLPACK-*i486.tar.gz $MYSQLPACK-*x86_64.tar.gz 2>/dev/null | head -n 1`
		
		if [ "$BINPACK" = "" ]; then
			compile_mysql_binary
		fi

		#make sure were back
		cd ${CWD};

		BINPACK=`ls $MYSQLPACK-*i386.tar.gz $MYSQLPACK-*i686.tar.gz $MYSQLPACK-*i486.tar.gz $MYSQLPACK-*x86_64.tar.gz 2>/dev/null | head -n 1`

		if [ "$BINPACK" = "" ]; then
			echo "Cannot find $MYSQLPACK package for installation"
			exit 0;
		fi
		
		if [ ! -s ${BINPACK} ]; then
			echo "Cannot find ${BINPACK} for installation"
			exit 0;
		fi

		echo "Stopping mysqld ...";
		/usr/local/etc/rc.d/mysqld stop

		echo "Installing ${BINPACK}...";

		#we need the non tar.gz form .. but its not basic it has freebsd and i386 and stuff we need
		#since we know the name of the file, we can get its contents which will tell us.
		MYSQLPACK=`tar tzf ${BINPACK} | head -n 1 | cut -d/ -f1`

		mv -f ${BINPACK} /usr/local
		cd /usr/local

		tar xzf ${MYSQLPACK}.tar.gz --no-same-owner
		rm -f mysql
		ln -s ${MYSQLPACK} mysql
		cd mysql

		chown -R mysql:mysql /usr/local/mysql
		chown -R mysql:mysql /usr/local/$MYSQLPACK

		rm -rf data
		ln -s /home/mysql ./data
		/usr/local/etc/rc.d/mysqld start

		MYSQLPATH="`echo ${PATH} | grep /usr/local/mysql/bin | wc -l`"
		if [ "${MYSQLPATH}" -eq 0 ]; then
			export PATH=${PATH}:/usr/local/mysql/bin
		fi
		
		echo "Giving mysqld a few seconds to start up...";
		sleep 5;

		if [ -e /usr/local/mysql/bin/mysql_upgrade ]; then
			/usr/local/mysql/bin/mysql_upgrade --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		elif [ -e /usr/local/mysql/bin/mysql_fix_privilege_tables ]; then
			/usr/local/mysql/bin/mysql_fix_privilege_tables --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		fi

		if [ -e /usr/local/mysql/bin/mysqlcheck ] && [ "${MYSQL_OPT}" = "5.1" ]; then
			/usr/local/mysql/bin/mysqlcheck --user=${MYSQLUSER} --password=${MYSQLPASSWORD} --fix-db-names --fix-table-names -A
		fi

                if [ ! -e /usr/local/mysql/bin/mysqld ] && [ -e /usr/local/mysql/libexec/mysqld ]; then
                        ln -s ../libexec/mysqld /usr/local/mysql/bin/mysqld
                fi

		echo "Done ${MYSQLPACK}.";

	elif [ -e /etc/debian_version ]; then
		LINUX_STR=linux
		MACHINE=i686
		
		if [ "${MYSQL_OPT}" = "5.5" ]; then
			LINUX_STR=linux2.6
		fi
		
		MYSQLURL=${WEBPATH_SERVICES}/all/mysql/debian

                if [ "${B64}" = "1" ]; then
                        MYSQLURL=${MYSQLURL}/64-bit
                        MACHINE=x86_64
                fi
                
                MYSQLPACK=mysql-${MYSQL_VER}-${LINUX_STR}-${MACHINE}

		cd /usr/local
		if [ "${MYSQL_FORCE_COMPILE}" != "yes" ] && [ ! -s ${MYSQLPACK}.tar.gz ]; then
			wget -O ${MYSQLPACK}.tar.gz ${MYSQLURL}/${MYSQLPACK}.tar.gz
		fi

		if [ ! -s ${MYSQLPACK}.tar.gz ]; then
			echo "Attempting to compile a package from source...";
			cd ${CWD};
			compile_mysql_binary
			cd ${CWD};
			
			if [ ! -s ${MYSQLPACK}.tar.gz ]; then
			
				#sometimes it's linux, sometimes it's linux2.6.. sometimes it's just linux.
				#Debian 6 was kernel 2.6, but when 5.6 is compiled, is linux. 5.5 is linux. Consistent? no.
				
				PACK_PRE=mysql-${MYSQL_VER}
				BINPACK=`ls ${PACK_PRE}-*i386.tar.gz ${PACK_PRE}-*i686.tar.gz ${PACK_PRE}-*i486.tar.gz ${PACK_PRE}-*x86_64.tar.gz 2>/dev/null | head -n 1`
				
				if [ "$BINPACK" = "" ]; then			
					echo "Cannot find ${MYSQLPACK} package for installation"
					exit 0;
				fi
				
				echo "Found created package: $BINPACK";
				
				LINUX_STR=`echo $BINPACK | cut -d- -f3`
				MACHINE=`echo $BINPACK | cut -d- -f4 | cut -d. -f1`
				
				MYSQLPACK=mysql-${MYSQL_VER}-${LINUX_STR}-${MACHINE}
			fi
			
			mv -f ${MYSQLPACK}.tar.gz /usr/local
			cd /usr/local
		fi
		
		echo "Stopping mysqld ...";
		/etc/init.d/mysqld stop
		
		backup_libmysqlclient;

		tar xzf ${MYSQLPACK}.tar.gz --no-same-owner
		rm -f mysql
		ln -s ${MYSQLPACK} mysql
		cd mysql

		chown -R mysql:mysql /usr/local/mysql
		chown -R mysql:mysql /usr/local/$MYSQLPACK

		rm -rf data
		ln -s /home/mysql ./data
		
		rm -f /usr/local/bin/mysql_config
		ln -s /usr/local/mysql/bin/mysql_config /usr/local/bin/mysql_config
		
		chown -R mysql:mysql /home/mysql

		MYSQLPATH="`echo ${PATH} | grep /usr/local/mysql/bin | wc -l`"
		if [ "${MYSQLPATH}" -eq 0 ]; then
			export PATH=${PATH}:/usr/local/mysql/bin
		fi
		
		if [ -d /etc/mysql ]; then
		    if [ ! -L /etc/mysql/my.cnf ]; then
			    mv -f /etc/mysql/my.cnf /etc/mysql/my.cnf.back
				ln -s /etc/my.cnf /etc/mysql/my.cnf
			fi
		fi
		
		/etc/init.d/mysqld start

		echo "Giving mysqld a few seconds to start up...";
		sleep 5;

		if [ -e /usr/local/mysql/bin/mysql_upgrade ]; then
			/usr/local/mysql/bin/mysql_upgrade --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		elif [ -e /usr/local/mysql/bin/mysql_fix_privilege_tables ]; then
			/usr/local/mysql/bin/mysql_fix_privilege_tables --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		fi

		if [ -e /usr/local/mysql/bin/mysqlcheck ] && [ "${MYSQL_OPT}" = "5.1" ]; then
			/usr/local/mysql/bin/mysqlcheck --user=${MYSQLUSER} --password=${MYSQLPASSWORD} --fix-db-names --fix-table-names -A
		fi

		restore_libmysqlclient;

		#mysql 5.5.11 changed to libmysqlclient.so.18 from libmysqlclient.so.16
		if [ "${MYSQL_OPT}" = "5.5" ] || [ "${MYSQL_OPT}" = "5.6" ]; then
			if [ -e /usr/local/directadmin/directadmin ]; then
				COUNT=`ldd /usr/local/directadmin/directadmin | grep -c libmysqlclient.so.16`
				if [ "${COUNT}" -eq 1 ]; then
					if [ ! -e /usr/local/mysql/lib/libmysqlclient.so.16 ] && [ -e /usr/local/mysql/lib/libmysqlclient.so.18 ]; then
						echo "*** Linking libmysqlclient.so.16 to libmysqlclient.so.18";
						ln -s libmysqlclient.so.18 /usr/local/mysql/lib/libmysqlclient.so.16
						ldconfig
					fi
				fi
				COUNT=`ldd /usr/local/directadmin/directadmin | grep -c libmysqlclient.so.18`
				if [ "${COUNT}" -eq 1 ]; then
					if [ ! -e /usr/local/mysql/lib/libmysqlclient.so.18 ] && [ -e /usr/local/mysql/lib/libmysqlclient.so.16 ]; then
						echo "*** Linking libmysqlclient.so.18 to libmysqlclient.so.16";
						ln -s libmysqlclient.so.16 /usr/local/mysql/lib/libmysqlclient.so.18
						ldconfig
					fi
				fi
			fi
		fi
	else
		if [ "${MYSQL_OPT}" = "5.5" ] || [ "${MYSQL_OPT}" = "5.6" ]; then
			if [ ! -e /usr/lib/libaio.so.1 ] && [ ! -e /lib64/libaio.so.1 ] && [ ! -e /lib/libaio.so.1 ] && [ ! -e /lib/i386-linux-gnu/libaio.so.1 ]; then
				echo "Cannot find libaio.so.1.  Please install libaio";
				echo "yum install libaio";
				return;
			fi
		fi
		if [ "${B64}" = "0" ]; then
			MYSQLURL=${WEBPATH_SERVICES}/all/mysql
			if [ "${MYSQL_OPT}" = "5.1" ]; then
				MYSQL_EXT=glibc23.i386
			elif [ "${MYSQL_OPT}" = "5.5" ]; then
				MYSQL_EXT=linux2.6.i386
			elif [ "${MYSQL_OPT}" = "5.6" ]; then
				MYSQL_EXT=linux_glibc2.5.i386
			else
				MYSQL_EXT=i386
			fi
		else
			MYSQLURL=${WEBPATH_SERVICES}/all/mysql/64-bit
			if [ "${MYSQL_OPT}" = "5.5" ]; then
				MYSQL_EXT=linux2.6.x86_64
			elif [ "${MYSQL_OPT}" = "5.6" ]; then
				MYSQL_EXT=linux_glibc2.5.x86_64
			else
				MYSQL_EXT=glibc23.x86_64
			fi
		fi

		MYSQLCLIENT=MySQL-client-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
		MYSQLDEVEL=MySQL-devel-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
		MYSQLSERVER=MySQL-server-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
		MYSQLSHARED=MySQL-shared-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm

		mkdir -p mysql
		cd mysql
		if [ ! -s ${MYSQLCLIENT} ]; then
			wget -O ${MYSQLCLIENT} ${MYSQLURL}/${MYSQL_VER}/${MYSQLCLIENT}
		fi
		if [ ! -s ${MYSQLDEVEL} ]; then
			wget -O ${MYSQLDEVEL} ${MYSQLURL}/${MYSQL_VER}/${MYSQLDEVEL}
		fi
		if [ ! -s ${MYSQLSERVER} ]; then
			wget -O ${MYSQLSERVER} ${MYSQLURL}/${MYSQL_VER}/${MYSQLSERVER}
		fi
		if [ ! -s ${MYSQLSHARED} ]; then
			wget -O ${MYSQLSHARED} ${MYSQLURL}/${MYSQL_VER}/${MYSQLSHARED}
		fi

		FILE1=${CWD}/mysql/${MYSQLCLIENT}
		FILE2=${CWD}/mysql/${MYSQLDEVEL}
		FILE3=${CWD}/mysql/${MYSQLSERVER}
		FILE4=${CWD}/mysql/${MYSQLSHARED}
		checkFile ${FILE1}
		checkFile ${FILE2}
		checkFile ${FILE3}
		checkFile ${FILE4}

		echo "Stopping mysqld ...";
		/sbin/service mysqld stop

		if [ -e /usr/bin/mysql ]; then
			MYSQL_MAIN="`/usr/bin/mysql --version | awk '{ print $5 }' | cut -d , -f1 | cut -d. -f1,2`"
			MYSQL_V="`/usr/bin/mysql --version | awk '{ print $5 }' | cut -d , -f1`"
			if [ "${MYSQL_MAIN}" != "${MYSQL_OPT}" ]; then
				echo "Upgrading MySQL ${MYSQL_MAIN} to ${MYSQL_OPT}"
				for i in `rpm -qa | grep -i "^mysql"`; do { rpm -ev $i --nodeps; }; done;
				rpm -Uhv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED}
			else
				echo "Updating MySQL ${MYSQL_V} to ${MYSQL_VER}"
				rpm -Uhv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED}
			fi
		else
			echo "Cannot find /usr/bin/mysql, installing MySQL"
			rpm -ihv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED}
		fi

                if [ -e /etc/rc.d/init.d/mysql ]
                then
                        /sbin/chkconfig --del mysql
                        mv -f /etc/rc.d/init.d/mysql /etc/rc.d/init.d/mysqld
                        /sbin/chkconfig --add mysqld
                fi
		
		/sbin/service mysqld start

                echo "Giving mysqld a few seconds to start up...";
                sleep 5;

		if [ -e /usr/bin/mysql_upgrade ]; then
			/usr/bin/mysql_upgrade --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		elif [ -e /usr/bin/mysql_fix_privilege_tables ]; then
			/usr/bin/mysql_fix_privilege_tables --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		fi

		if [ -e /usr/bin/mysqlcheck ]; then
			/usr/bin/mysqlcheck --user=${MYSQLUSER} --password=${MYSQLPASSWORD} --fix-db-names --fix-table-names -A
		fi

		# Fixing "gcc: /usr/lib/mysql/libmysqlclient.so: No such file or directory"
		#if [ ! -e /usr/lib/mysql/libmysqlclient.so ]; then
		if [ -d /usr/lib/mysql ]; then
			cp -f /usr/lib/libmysqlclient.* /usr/lib/mysql/
		fi
	fi

	set_service mysqld ON

	cd ${CWD};

	cagefsctl_update;
	
	echo "Restarting MySQL."
	${INITDDIR}/mysqld restart
}

####################################################

doPhpIni() {
	if [ "${PHPINI_OPT}" = "no" ]; then
		do_exit 1 "Cannot install php.ini because it is not set in options.conf."
	fi
	
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
		getFile php-${PHP53_VER}.tar.gz php53
		FILE=${CWD}/php-${PHP53_VER}.tar.gz
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
		getFile php-${PHP54_VER}.tar.gz php54
		FILE=${CWD}/php-${PHP54_VER}.tar.gz
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
		getFile php-${PHP55_VER}.tar.gz php55
		FILE=${CWD}/php-${PHP55_VER}.tar.gz
	fi

	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	if [ "${PHP1_RELEASE}" = "5.3" ]; then
		cd php-${PHP53_VER}
	elif [ "${PHP1_RELEASE}" = "5.4" ]; then
		cd php-${PHP54_VER}
	elif [ "${PHP1_RELEASE}" = "5.5" ]; then
		cd php-${PHP55_VER}
	fi

#Not needed anymore
#	if [ "${CLINUX_OPT}" = "yes" ]; then
#		patch -p1 < ../fpm-lve.patch
#	fi
	
	/usr/bin/perl -pi -e 's/upload_max_filesize = 2M/upload_max_filesize = 64M/' php.ini-${PHPINITYPE_OPT}
	/usr/bin/perl -pi -e 's/post_max_size = 8M/post_max_size = 64M/' php.ini-${PHPINITYPE_OPT}

	#short_open_tag: http://help.directadmin.com/item.php?id=438
	perl -pi -e 's/^short_open_tag = Off/short_open_tag = On/' php.ini-${PHPINITYPE_OPT}

	if [ "${X_MAIL_HEADER_OPT}" = "yes" ]; then
		echo "Enabling mail.add_x_header option in php.ini"
#		touch /var/log/php-mail.log
#		chmod 666 /var/log/php-mail.log
#		/usr/bin/perl -pi -e 's#;mail.log =\n#mail.log = /var/log/php-mail.log\n#' php.ini-${PHPINITYPE_OPT}
		/usr/bin/perl -pi -e 's/mail.add_x_header = Off/mail.add_x_header = On/' php.ini-${PHPINITYPE_OPT}
		/usr/bin/perl -pi -e 's/mail.add_x_header = 0/mail.add_x_header = On/' php.ini-${PHPINITYPE_OPT}
		COUNT=`grep -c '^mail.add_x_header' php.ini-${PHPINITYPE_OPT}`
		if [ ${COUNT} -eq 0 ]; then
			echo "mail.add_x_header = On" >> php.ini-${PHPINITYPE_OPT}
		fi
#		COUNT=`grep -c '^mail.log' php.ini-${PHPINITYPE_OPT}`
#		if [ ${COUNT} -eq 0 ]; then
#			echo "mail.log = /var/log/php-mail.log" >> php.ini-${PHPINITYPE_OPT}
#		fi
	else
		echo "Disabling mail.add_x_header option in php.ini"
#		/usr/bin/perl -pi -e 's/^mail.log =#;mail.log =#' php.ini-${PHPINITYPE_OPT}
		/usr/bin/perl -pi -e 's/^mail.add_x_header =/;mail.add_x_header =/' php.ini-${PHPINITYPE_OPT}
	fi
	
	if [ "${PHP1_MODE}" = "mod_php" ]; then
		cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI}
	elif [ "${PHP1_MODE}" = "php-fpm" ] || [ "${PHP1_MODE}" = "fastcgi" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_FPM53}
		elif [ "${PHP1_RELEASE}" = "5.4" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_FPM54}
		elif [ "${PHP1_RELEASE}" = "5.5" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_FPM55}
		fi
	elif [ "${PHP1_MODE}" = "suphp" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_SUPHP53}
		elif [ "${PHP1_RELEASE}" = "5.4" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_SUPHP54}
		elif [ "${PHP1_RELEASE}" = "5.5" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_SUPHP55}
		fi
	fi

	echo "Done for php1_release.";
	cd ${WORKDIR};
	
	if [ "${PHP2_RELEASE}" = "5.3" ] || [ "${PHP2_RELEASE}" = "5.4" ] || [ "${PHP2_RELEASE}" = "5.5" ]; then
		
		if [ "${PHP2_RELEASE}" = "5.3" ]; then
			getFile php-${PHP53_VER}.tar.gz php53
			FILE=${CWD}/php-${PHP53_VER}.tar.gz
		elif [ "${PHP2_RELEASE}" = "5.4" ]; then
			getFile php-${PHP54_VER}.tar.gz php54
			FILE=${CWD}/php-${PHP54_VER}.tar.gz
		elif [ "${PHP2_RELEASE}" = "5.5" ]; then
			getFile php-${PHP55_VER}.tar.gz php55
			FILE=${CWD}/php-${PHP55_VER}.tar.gz
		fi

		checkFile ${FILE}
		echo "Extracting ...";
		tar xzf ${FILE} --no-same-owner
		if [ "${PHP2_RELEASE}" = "5.3" ]; then
			cd php-${PHP53_VER}
		elif [ "${PHP2_RELEASE}" = "5.4" ]; then
			cd php-${PHP54_VER}
		elif [ "${PHP2_RELEASE}" = "5.5" ]; then
			cd php-${PHP55_VER}
		fi

		/usr/bin/perl -pi -e 's/upload_max_filesize = 2M/upload_max_filesize = 64M/' php.ini-${PHPINITYPE_OPT}
		/usr/bin/perl -pi -e 's/post_max_size = 8M/post_max_size = 64M/' php.ini-${PHPINITYPE_OPT}
	
		#short_open_tag: http://help.directadmin.com/item.php?id=438
		/usr/bin/perl -pi -e 's/^short_open_tag = Off/short_open_tag = On/' php.ini-${PHPINITYPE_OPT}
	
		if [ "${PHP2_MODE}" = "mod_php" ]; then
			cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI}
		elif [ "${PHP2_MODE}" = "php-fpm" ] || [ "${PHP2_MODE}" = "fastcgi" ]; then
			if [ "${PHP2_RELEASE}" != "no" ]; then
				if [ "${PHP2_RELEASE}" = "5.3" ]; then
					cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_FPM53}
				elif [ "${PHP2_RELEASE}" = "5.4" ]; then
					cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_FPM54}
				elif [ "${PHP2_RELEASE}" = "5.5" ]; then
					cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_FPM55}
				fi
			fi
		elif [ "${PHP2_MODE}" = "suphp" ]  && [ "${PHP2_RELEASE}" != "no" ]; then
			if [ "${PHP2_RELEASE}" = "5.3" ]; then
				cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_SUPHP53}
			elif [ "${PHP2_RELEASE}" = "5.4" ]; then
				cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_SUPHP54}
			elif [ "${PHP2_RELEASE}" = "5.5" ]; then
				cp -f php.ini-${PHPINITYPE_OPT} ${PHP_INI_SUPHP55}
			fi
		fi
		echo "Done for php2_release";
	fi
	cd ${WORKDIR};
	
}

####################################################

disable_asm_atomic() {
	# for this error:
	# /usr/include/mysql/my_global.h:361:24: error: asm/atomic.h: No such file or directory

	MY_GLOBAL=/usr/include/mysql/my_global.h
	if [ ${OS} = "FreeBSD" ] || [ -e /etc/debian_version ]; then
		MY_GLOBAL=/usr/local/mysql/include/my_global.h
	fi

	if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP2_RELEASE}" = "5.3" ]; then
		if [ -e ${MY_GLOBAL} ]; then
			echo "Disabling asm/atomic in ${MY_GLOBAL}";
			perl -pi -e 's#\#include <asm/atomic.h>#//\#include <asm/atomic.h>#' ${MY_GLOBAL}
		fi
        fi
}

####################################################

doSuPhp() {
	if [ "$NEW_SUPHP_OPT" = "yes" ]; then
		getFile suphp-${SUPHP_VER}.tar.gz suphp_current
	else
		getFile suphp-${SUPHP_VER}.tar.gz suphp
	fi

	getFile patches/suphp_calling_user.patch suphp_calling_user_patch
	getFile patches/suphp_script_name.patch suphp_script_name_patch
	#getFile patches/suphp_attachment.diff suphp_attachment_diff
	getFile patches/suphp_attachment.patch suphp_attachment_patch
	quitIfLocked doSuPhp
	
	cd ${CWD};
	FILE=${CWD}/suphp-${SUPHP_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";

	mkdir -p /usr/local/suphp/etc
	cd suphp-${SUPHP_VER}
	
	if [ "${CLINUX_OPT}" = "yes" ]; then
		patch -p1 < ../suphp-0.7.1-cagefs.patch
	fi
	
	patch -p1 < ../patches/suphp_calling_user.patch
	patch -p1 < ../patches/suphp_script_name.patch 
	#patch -p1 < ../patches/suphp_attachment.diff
	patch -p1 < ../patches/suphp_attachment.patch
	
	if [ "${SUPHP_VER}" != "0.7.1" ]; then
		echo "re-configuring suphp configure...";

		echo "calling aclocal:";
		perl -pi -e 's/AM_CONFIG_HEADER/AC_CONFIG_HEADERS/' configure.ac
		aclocal

		echo "calling libtoolize:";
		libtoolize --force
		
		echo "calling automake:";
		automake --add-missing
		
		echo "calling autoreconf:";
		autoreconf
	fi

	perl -pi -e 's#"\$major_version" = "2.2"#"\$major_version" = "2.4"#' ./configure

	echo "Configuring suphp-${SUPHP_VER}...";
	CONF_FILE=${CWD}/${SUPHP_CONFIGURE};

	${CONF_FILE}
	if [ $? -ne 0 ]
	then
		$ECHO -e "\n*** There was an error while trying to configure suPHP. Check the ${SUPHP_CONFIGURE} file\n";
		do_exit 1;
	fi

	echo "Done Configuration.";

	while
	echo "Trying to make suPHP..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
	                else
        	                if [ "${INPUT_VALUE}" = "d" ]; then
                	                yesno=n
                        	else
                                	yesno=${INPUT_VALUE}
	                        fi
        	        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make Complete";

	if [ -e /usr/lib/apache/mod_suphp.so ]; then
		rm -f /usr/lib/apache/mod_suphp.so
	fi

	while
	echo "Installing suPHP...";
	do
	{
                #only freebsd 7 seemed affected with this, thus added.
                chmod 755 config/install-sh

		make install

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The install has failed, would you like to try to install it again? (y,n): ";
        	                read yesno;
                	        echo "";
			else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
			fi

                        if [ "${yesno}" = "n" ]
                        then
				do_exit 0;
                        fi
                else
                        break;
                fi
	}
	done;
	
	touch /var/log/suphp.log

	echo "suPHP ${SUPHP_VER} Installed.";
	removeLockfile
	cd ${CWD};
	cagefsctl_update;
}

####################################################

set_sendmail_link() {

	SM=/usr/sbin/sendmail
	MW=/usr/sbin/mailwrapper
	LINK_TO_EXIM="ln -sf exim ${SM}"

	if [ "$OS" = "FreeBSD" ] && [ -x ${MW} ]; then
		MC=/etc/mail/mailer.conf
		T=${MC}.temp
		E=`grep -c exim ${MC}`
		if [ "${E}" -eq 0 ]; then
			cp -f ${MC} ${MC}.backup
			${WGET} -O ${T} ${WEBPATH_SERVICES}/mailer.conf
			
			if [ ! -s ${T} ]; then
				${LINK_TO_EXIM}
				return;
			fi
			
			cp -f ${T} ${MC}			
		fi

		L=`readlink $SM`
		if [ "${L}" = "exim" ]; then
			ln -sf ${MW} ${SM}
			
		fi

		return;
	fi
	
	${LINK_TO_EXIM}
}

####################################################

doPhp_build() {
	cd ${CWD};
	#$1 is PHP release
	#$2 is PHP mode
	INT_RELEASE=$1
	INT_MODE=$2
	if [ "${INT_RELEASE}" = "5.3" ]; then
		getFile php-${PHP53_VER}.tar.gz php53
		PHP_VER=${PHP53_VER}
		SHORT_RELEASE=53
	elif [ "${INT_RELEASE}" = "5.4" ]; then
		getFile php-${PHP54_VER}.tar.gz php54
		PHP_VER=${PHP54_VER}
		SHORT_RELEASE=54
	elif [ "${INT_RELEASE}" = "5.5" ]; then
		getFile php-${PHP55_VER}.tar.gz php55
		PHP_VER=${PHP55_VER}
		SHORT_RELEASE=55
	fi
	
	if [ "${INT_MODE}" = "suphp" ]; then
		mkdir -p /usr/local/php${SHORT_RELEASE}/lib
		if [ ! -s ${SUPHP_SO} ]; then
			doSuPhp
		fi
	fi
	
#	checkCURL
#	checkFreeType
#	checkIconv
#	checkMCrypt
#	checkMHash

	quitIfLocked doPhp
	
	cd ${CWD};
	FILE=${CWD}/php-${PHP_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";

	disable_asm_atomic
	
	if [ "${CLINUX_OPT}" = "yes" ]; then
		tar xzf cl-apache-patches.tar.gz --no-same-owner
	fi
	
	cd php-${PHP_VER}

	#make sure we have the sendmail link
	set_sendmail_link;

	#some reports of missing -lltdl, problem found to be simple missing link
	if [ ! -e /usr/lib/libltdl.so ]; then
		ln -sf libltdl.so.3 /usr/lib/libltdl.so
	fi
	
	if [ "${OS}" = "FreeBSD" ] && [ "${OS_VER}" = "6.1" ]; then
		if [ ! -e /lib/libm.so.3 ]; then
			ln -sf libm.so.4 /lib/libm.so.3
		fi
		if [ ! -e /lib/libz.so.2 ]; then
			ln -sf libz.so.3 /lib/libz.so.2
		fi
	fi
	
	echo "Configuring php-${PHP_VER}...";

	PHP_INI_INT=${PHP_INI}
	if [ "${INT_RELEASE}" = "5.3" ]; then
		if [ "${CLINUX_OPT}" = "yes" ]; then
			patch -p1 --fuzz=1 < ../fpm-lve-php5.3.3.patch
			autoconf
		fi
		CONF_FILE=${CWD}/${PHP53_CONFIGURE};
		if [ "${INT_MODE}" = "php-fpm" ]; then
			CONF_FILE=${CWD}/${PHP53_CONFIGURE_FPM};
			PHP_INI_INT=${PHP_INI_FPM53};
		elif [ "${INT_MODE}" = "suphp" ]; then
			CONF_FILE=${CWD}/${PHP53_CONFIGURE_SUPHP};
			PHP_INI_INT=${PHP_INI_SUPHP53};
		elif [ "${INT_MODE}" = "fastcgi" ]; then
			CONF_FILE=${CWD}/${PHP53_CONFIGURE_FCGI};
			PHP_INI_INT=${PHP_INI_SUPHP53};
		fi
	elif [ "${INT_RELEASE}" = "5.4" ]; then
		if [ "${CLINUX_OPT}" = "yes" ]; then
			patch -p1 --fuzz=1 < ../fpm-lve-php5.4_autoconf.patch
			autoconf
		fi
		CONF_FILE=${CWD}/${PHP54_CONFIGURE};
		if [ "${INT_MODE}" = "php-fpm" ]; then
			CONF_FILE=${CWD}/${PHP54_CONFIGURE_FPM};
			PHP_INI_INT=${PHP_INI_FPM54};
		elif [ "${INT_MODE}" = "suphp" ]; then
			CONF_FILE=${CWD}/${PHP54_CONFIGURE_SUPHP};
			PHP_INI_INT=${PHP_INI_SUPHP54};
		elif [ "${INT_MODE}" = "fastcgi" ]; then
			CONF_FILE=${CWD}/${PHP54_CONFIGURE_FCGI};
			PHP_INI_INT=${PHP_INI_SUPHP54};
		fi
	elif [ "${INT_RELEASE}" = "5.5" ]; then
		if [ "${CLINUX_OPT}" = "yes" ]; then
			patch -p1 --fuzz=1 < ../fpm-lve-php5.5_autoconf.patch
			autoconf
		fi
		CONF_FILE=${CWD}/${PHP55_CONFIGURE};
		if [ "${INT_MODE}" = "php-fpm" ]; then
			CONF_FILE=${CWD}/${PHP55_CONFIGURE_FPM};
			PHP_INI_INT=${PHP_INI_FPM55};
		elif [ "${INT_MODE}" = "suphp" ]; then
			CONF_FILE=${CWD}/${PHP55_CONFIGURE_SUPHP};
			PHP_INI_INT=${PHP_INI_SUPHP55};
		elif [ "${INT_MODE}" = "fastcgi" ]; then
			CONF_FILE=${CWD}/${PHP55_CONFIGURE_FCGI};
			PHP_INI_INT=${PHP_INI_SUPHP55};
		fi
	fi

	#we need to make sure that the mysql path is set.
	MYSQL_H="";

	if [ -d /usr/local/mysql/include ]; then
			MYSQL_H=/usr/local/mysql
	fi

	if [ "${MYSQL_H}" = "" ]; then
		if [ -e /usr/include/mysql/mysql.h ]; then
				MYSQL_H=/usr
		fi
	fi

	if [ "${MYSQL_H}" != "" ]; then
		STR="perl -pi -e 's#with-mysql\s#with-mysql=${MYSQL_H} #' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-mysql\"#with-mysql=${MYSQL_H}\"#' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-pdo-mysql\"#with-pdo-mysql=${MYSQL_H}\"#' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-pdo-mysql\s#with-pdo-mysql=${MYSQL_H} #' ${CONF_FILE}";
		eval ${STR};
	fi

	#we need to make sure that the mysqli path is set.
	MYSQLI_BIN="";
	if [ -e /usr/local/bin/mysql_config ]; then
		MYSQLI_BIN=/usr/local/bin/mysql_config
	fi
	if [ "${MYSQLI_BIN}" = "" ]; then
		if [ -e /usr/mysql/bin/mysql_config ]; then
			MYSQLI_BIN=/usr/mysql/bin/mysql_config
		fi
	fi
	if [ "${MYSQLI_BIN}" = "" ]; then
		if [ -e /usr/local/mysql/bin/mysql_config ]; then
			MYSQLI_BIN=/usr/local/mysql/bin/mysql_config
		fi
	fi
	if [ "${MYSQLI_BIN}" = "" ]; then
		if [ -e /usr/bin/mysql_config ]; then
			MYSQLI_BIN=/usr/bin/mysql_config
		fi
	fi

	if [ "${MYSQLI_BIN}" != "" ]; then
		STR="perl -pi -e 's#with-mysqli\s#with-mysqli=${MYSQLI_BIN} #' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-mysqli\"#with-mysqli=${MYSQLI_BIN}\"#' ${CONF_FILE}";
		eval ${STR};
	fi

	MYSQL_SOCK='/var/lib/mysql/mysql.sock'
	if [ ! -e ${MYSQL_SOCK} ]; then
		MYSQL_SOCK="`${MYSQLI_BIN} --socket`"
	fi
	
	perl -pi -e "s#/var/lib/mysql/mysql.sock#${MYSQL_SOCK}#" ${CONF_FILE}

	#if this is a 64bit system,make sure libmysqlclient is correct.
	if [ -e /usr/lib64/libmysqlclient.so ] && [ ! -e /usr/lib/libmysqlclient.so ]; then
			ln -s /usr/lib64/libmysqlclient.so /usr/lib/libmysqlclient.so
	fi
	
	if [ "${OS}" = "FreeBSD" ]; then
		echo "Patching fpm_sockets.c for https://bugs.php.net/bug.php?id=63983";
		perl -pi -e 's|info.tcpi_sacked|info.__tcpi_sacked|' sapi/fpm/fpm/fpm_sockets.c
		perl -pi -e 's|info.tcpi_unacked|info.__tcpi_unacked|' sapi/fpm/fpm/fpm_sockets.c
	fi
	

	${CONF_FILE}
	if [ $? -ne 0 ]
	then
		$ECHO -e "\n*** There was an error while trying to configure php. Check the configure file\n";
		do_exit 1;
	fi

	echo "Done Configuration.";

	while
	echo "Trying to make php..."
	do
	{
		C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
			else
				if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
				else
						yesno=${INPUT_VALUE}
				fi
			fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make Complete";

	#change the pear settings to remove the -n option.
	#the default memory limit was messing this up.
	/usr/bin/perl -pi -e 's/PEAR_INSTALL_FLAGS = .*/PEAR_INSTALL_FLAGS = -dshort_open_tag=0 -dsafe_mode=0/' Makefile
	
	#Remove symlink if exists
	if [ -h /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE} ]; then
			rm -f /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE}
	fi
	
	if [ -e ${PHP_INI_INT} ]; then
	  
	  #short_open_tag: http://help.directadmin.com/item.php?id=438
	  perl -pi -e 's/^short_open_tag = Off/short_open_tag = On/' ${PHP_INI_INT}
	  
	  if [ "${INT_RELEASE}" = "5.4" ] || [ "${INT_RELEASE}" = "5.5" ]; then
		  echo "Making PHP ${INT_RELEASE} installation compatible with php.ini file"
		  /usr/bin/perl -pi -e 's/^register_long_arrays/;register_long_arrays/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^magic_quotes_gpc/;magic_quotes_gpc/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^safe_mode/;safe_mode/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^register_globals/;register_globals/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^register_long_arrays/;register_long_arrays/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^allow_call_time_pass_reference/;allow_call_time_pass_reference/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^define_syslog_variables/;define_syslog_variables/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^highlight.bg/;highlight.bg/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^session.bug_compat_42/;session.bug_compat_42/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^session.bug_compat_warn/;session.bug_compat_warn/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^y2k_compliance/;y2k_compliance/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^magic_quotes_runtime/;magic_quotes_runtime/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^magic_quotes_sybase/;magic_quotes_sybase/' ${PHP_INI_INT}
	  fi
	fi
	
	while
	echo "Installing php...";
	do
	{
		make install

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The install has failed, would you like to try to install it again? (y,n): ";
				read yesno;
				echo "";
			else
				if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
				else
					yesno=${INPUT_VALUE}
				fi
			fi

				if [ "${yesno}" = "n" ]; then
					do_exit 0;
                fi
		else
			break;
		fi
	}
	done;

	#############################################################
	#we need to have this piece of code here, because without installation we do not have /usr/local/php53(54)/lib available, so we cannot copy php.ini there
	#old note: this was moved here, again for pear (before make install)
	echo "Copying php.ini..";
	if [ ! -e ${PHP_INI_INT} ]
	then
		cp php.ini-${PHPINITYPE_OPT} ${PHP_INI_INT};
	else
		echo "${PHP_INI_INT} already exists, skipping.";
	fi
	
	COUNT=`grep -c ^date.timezone ${PHP_INI_INT}`;
	COUNT2=`grep -c ';date.timezone' ${PHP_INI_INT}`;
	if [ "$COUNT" -eq 0 ] && [ "$COUNT2" -eq 0 ]; then
		echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to ${PHP_INI_INT}, please change it by yourself to fit your own needs.${boldoff}"
		echo "date.timezone = \"${PHP_TIMEZONE_OPT}\"" >> ${PHP_INI_INT}
	elif [ "$COUNT" -eq 0 ]; then
		echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to ${PHP_INI_INT}, please change it by yourself to fit your own needs.${boldoff}"
		perl -pi -e "s#;date.timezone.*#date.timezone = \"${PHP_TIMEZONE_OPT}\"#" ${PHP_INI_INT}
	fi
	/usr/bin/perl -pi -e 's/upload_max_filesize = 2M/upload_max_filesize = 64M/' ${PHP_INI_INT}
	/usr/bin/perl -pi -e 's/post_max_size = 8M/post_max_size = 64M/' ${PHP_INI_INT}

	if [ "${X_MAIL_HEADER_OPT}" = "yes" ]; then
		echo "Enabling  mail.add_x_header option in ${PHP_INI_INT}"
#		/usr/bin/perl -pi -e 's#;mail.log =\n#mail.log = /var/log/php-mail.log\n#' ${PHP_INI_INT}
		/usr/bin/perl -pi -e 's/mail.add_x_header = Off/mail.add_x_header = On/' ${PHP_INI_INT}
		/usr/bin/perl -pi -e 's/mail.add_x_header = 0/mail.add_x_header = On/' ${PHP_INI_INT}
		COUNT=`grep -c '^mail.add_x_header' ${PHP_INI_INT}`
		if [ ${COUNT} -eq 0 ]; then
			echo "mail.add_x_header = On" >> ${PHP_INI_INT}
		fi
#		COUNT=`grep -c '^mail.log' ${PHP_INI_INT}`
#		if [ ${COUNT} -eq 0 ]; then
#			echo "mail.log = /var/log/php-mail.log" >> ${PHP_INI_INT}
#		fi
		
#		if [ ! -e /etc/logrotate.d/php-mail ] && [ ${OS} != "FreeBSD" ]; then
#			wget ${WEBPATH}/php-mail.logrotate -O /etc/logrotate.d/php-mail
#		fi
	else
		echo "Disabling mail.add_x_header option in ${PHP_INI_INT}"
#		/usr/bin/perl -pi -e 's/^mail.log =#;mail.log =#' ${PHP_INI_INT}
		/usr/bin/perl -pi -e 's/^mail.add_x_header =/;mail.add_x_header =/' ${PHP_INI_INT}
	fi
	#############################################################
	
	if [ "${INT_MODE}" = "php-fpm" ]; then
		#configuration
		mkdir -p /usr/local/php${SHORT_RELEASE}/sockets
		if [ "${WEBSERVER_OPT}" = "apache" ]; then
			chown apache:apache /usr/local/php${SHORT_RELEASE}/sockets
		elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
			chown nginx:nginx /usr/local/php${SHORT_RELEASE}/sockets
		fi
		FPM_SOCK_CHMOD=700
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			FPM_SOCK_CHMOD=711
		fi
		chmod ${FPM_SOCK_CHMOD} /usr/local/php${SHORT_RELEASE}/sockets

		if [ ! -s /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf ]; then
			getFile php-fpm.conf.${SHORT_RELEASE} php-fpm-conf-${SHORT_RELEASE}
			cp -f ${CWD}/php-fpm.conf.${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		fi
		if [ "${WEBSERVER_OPT}" = "apache" ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		fi
		#Here we need to turn off autostart of other php-fpm's, for example, if we had PHP 5.4+FPM installed, but now we switch to 5.3, we do not want 5.4 to be started together with the OS anymore
		if [ ! -e ${INITDDIR}/php-fpm${SHORT_RELEASE} ]; then
			cd ${CWD};
			if [ "${OS}" = "FreeBSD" ]; then
				getFile php-fpm.freebsd
				cp ${CWD}/php-fpm.freebsd ${INITDDIR}/php-fpm${SHORT_RELEASE}
				chmod 755 ${INITDDIR}/php-fpm${SHORT_RELEASE}
			elif [ -e /etc/debian_version ]; then
				getFile php-fpm.debian
				cp ${CWD}/php-fpm.debian ${INITDDIR}/php-fpm${SHORT_RELEASE}
				chmod 755 ${INITDDIR}/php-fpm${SHORT_RELEASE}
				update-rc.d php-fpm${SHORT_RELEASE} defaults
			else
				getFile php-fpm
				cp ${CWD}/php-fpm ${INITDDIR}/php-fpm${SHORT_RELEASE}
				chmod 755 ${INITDDIR}/php-fpm${SHORT_RELEASE}
				/sbin/chkconfig php-fpm${SHORT_RELEASE} on
			fi

			perl -pi -e "s|53|${SHORT_RELEASE}|" ${INITDDIR}/php-fpm${SHORT_RELEASE}
			
		fi


		if [ -e /usr/local/php${SHORT_RELEASE}/sbin/php-fpm ] && [ ! -e /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE} ]; then
			mv /usr/local/php${SHORT_RELEASE}/sbin/php-fpm /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE}
		fi		

		if [ ! -e /usr/local/php${SHORT_RELEASE}/sbin/php-fpm ]; then
			rm -f /usr/local/php${SHORT_RELEASE}/sbin/php-fpm
			ln -sf /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/sbin/php-fpm
		fi
		
		if [ "${INT_MODE}" = "php-fpm" ]; then
			${INITDDIR}/php-fpm${SHORT_RELEASE} restart
		fi
	elif [ "${INT_MODE}" = "fastcgi" ]; then
		if [ ! -d /usr/local/safe-bin ]; then
			mkdir -p /usr/local/safe-bin
			chmod 511 /usr/local/safe-bin
			chown apache:apache /usr/local/safe-bin
		fi
		cp -f ${CWD}/configure/fastcgi/fcgid${SHORT_RELEASE}.sh /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
		if [ -e ${CWD}/custom/fastcgi/fcgid${SHORT_RELEASE}.sh ]; then
			cp -f ${CWD}/custom/fastcgi/fcgid${SHORT_RELEASE}.sh /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
		fi
		chown apache:apache /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
		chmod 555 /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
	fi
	
	if [ "${INT_MODE}" != "mod_php" ]; then
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/php${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/php${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/php${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/php
		fi
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/php-cgi${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/php-cgi${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/php-cgi${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/php-cgi
		fi
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/php-config${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/php-config${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/php-config${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/php-config
		fi
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/phpize${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/phpize${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/phpize${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/phpize
		fi
	fi
	
	if [ "${INT_MODE}" != "mod_php" ]; then
		doPHPHtscanner ${SHORT_RELEASE};
	fi
	
	removeLockfile

	echo "PHP ${PHP_VER} Installed.";

	cd ${CWD};
}

####################################################

doModRuid2() {
	cd ${CWD};
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Cannot build mod_ruid2, because nginx webserver is chosen in the options.conf file."
		exit 1;
	fi
	getFile mod_ruid2-${MOD_RUID2_VER}.tar.bz2 mod_ruid2

	if [ "${MOD_RUID2_OPT}" != "yes" ]; then
		echo "You cannot install mod_ruid2, because you do not have it set in options.conf file.";
		exit 1;
	fi

	if [ ! -e /lib/libcap.so ] && [ ! -e /lib64/libcap.so ] && [ ! -e /lib/x86_64-linux-gnu/libcap.so ] && [ ! -e /lib/i386-linux-gnu/libcap.so ]; then
		echo "Cannot find libcap.so.  Please install libcap";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install libcap-dev";
		else
			echo "yum -y install libcap-devel";
		fi
		return;
	fi
	
	if [ ! -e /usr/bin/bzip2 ] && [ ! -e /bin/bzip2 ]; then
		echo "Cannot find bzip2. Please install it.";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install bzip2";
		else
			echo "yum -y install bzip2";
		fi
		return;
	fi
	
	FILE=${CWD}/mod_ruid2-${MOD_RUID2_VER}.tar.bz2
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xjf ${FILE}
	cd mod_ruid2-${MOD_RUID2_VER}
	
	echo "Installing mod_ruid2-${MOD_RUID2_VER}...";

	APXS=/usr/sbin/apxs
	if [ ! -e $APXS ]; then
		echo "cannot find $APXS, trying a different path";
		APXS=/usr/bin/apxs
	fi
	$APXS -a -i -l cap -c mod_ruid2.c

	if [ $? -ne 0 ]
	then
		$ECHO -e "\n*** There was an error while trying to install mod_ruid2-${MOD_RUID2_VER}.\n";
		do_exit 1;
	fi

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -c 'ruid2_module' ${PHPMODULES}`"
		perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
		if [ ${COUNT} -eq 0 ]; then
			echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
			echo "Mutex posixsem" >> ${PHPMODULES}
		fi
	fi

	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	/usr/local/directadmin/dataskq --custombuild	
	echo "mod_ruid2 has been installed successfully.";

	cd ${CWD};
}

####################################################

doModHtscanner() {
	cd ${CWD};
	if [ "${HTSCANNER_OPT}" = "no" ]; then
		echo "Cannot build htscanner, because you do not have it set in options.conf file."
		exit 1;
	fi
	getFile htscanner-${HTSCANNER_VER}.tgz htscanner
	
	FILE=${CWD}/htscanner-${HTSCANNER_VER}.tgz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE}
	cd htscanner-${HTSCANNER_VER}
	
	echo "Installing mod_htscanner2-${HTSCANNER_VER}...";

	APXS=/usr/sbin/apxs
	if [ ! -e $APXS ]; then
		echo "cannot find $APXS, trying a different path";
		APXS=/usr/bin/apxs
	fi
	$APXS -a -i -c mod_htscanner2.c

	if [ $? -ne 0 ]
	then
		$ECHO -e "\n*** There was an error while trying to install mod_htscanner2-${HTSCANNER_VER}.\n";
		do_exit 1;
	fi

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -c 'htscanner_module' ${PHPMODULES}`"
		perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
		if [ ${COUNT} -eq 0 ]; then
			echo "LoadModule	htscanner_module		/usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
		fi
	fi

	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	/usr/local/directadmin/dataskq --custombuild	
	echo "mod_htscanner2 has been installed successfully.";

	cd ${CWD};
}

####################################################

doModFCGID() {
	cd ${CWD};
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Cannot build mod_fastcgi, because nginx webserver is chosen in the options.conf file."
		exit 1;
	fi
	getFile mod_fcgid-${MOD_FCGID_VER}.tar.gz mod_fcgid
	getFile fcgid.sh fcgid_sh
	
	FILE=${CWD}/mod_fcgid-${MOD_FCGID_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE} --no-same-owner
	cd mod_fcgid-${MOD_FCGID_VER}
	
	if [ "${CLINUX_OPT}" = "yes" ]; then
		patch -p1 < ../mod_fcgid_2_3_7.patch
	fi
	
	echo "Installing mod_fcgid-${MOD_FCGID_VER}...";
	
	APXS=/usr/sbin/apxs ./configure.apxs

	while
	echo "Trying to make mod_fcgid-${MOD_FCGID_VER}..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done;
	echo "Make complete";
	echo "Installing mod_fcgid-${MOD_FCGID_VER}...";
	make install

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -c 'fcgid_module' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule	fcgid_module|#LoadModule	fcgid_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule fcgid_module /usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
		fi
		COUNT="`grep -c 'httpd-fcgid.conf' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
		fi
	fi
 
	if [ ! -e ${HTTPDCONF}/extra/httpd-fcgid.conf ] && [ -e ${CWD}/configure/ap2/conf/extra/httpd-fcgid.conf ]; then
	  cp ${CWD}/configure/ap2/conf/extra/httpd-fcgid.conf ${HTTPDCONF}/extra/httpd-fcgid.conf
	fi
	
	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	/usr/local/directadmin/dataskq --custombuild	

	
	echo "mod_fcgid-${MOD_FCGID_VER} has been installed successfully.";

	cd ${CWD};
	cagefsctl_update;
}

####################################################

doModFastCGI() {
	cd ${CWD};
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Cannot build mod_fastcgi, because nginx webserver is chosen in the options.conf file."
		exit 1;
	fi
	getFile mod_fastcgi-${MOD_FASTCGI_VER}.tar.gz mod_fastcgi
	
	FILE=${CWD}/mod_fastcgi-${MOD_FASTCGI_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE} --no-same-owner
	cd mod_fastcgi-${MOD_FASTCGI_VER}
	
	echo "Installing mod_fastcgi-${MOD_FASTCGI_VER}...";

	echo "Patching mod_fastcgi-${MOD_FASTCGI_VER} for apache 2.4...";
	patch -p1 < debian/patches/byte-compile-against-apache24.diff
	
	cp -f Makefile.AP2 Makefile

	while
	echo "Trying to make mod_fastcgi-${MOD_FASTCGI_VER}..."
	do
	{
		if [ ${OS} = "FreeBSD" ]; then
			make top_dir=/etc/httpd
		else
			make top_dir=/etc/httpd CPPFLAGS=-I/usr/kerberos/include
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done;
	echo "Make complete";
	echo "Installing mod_fastcgi-${MOD_FASTCGI_VER}...";
	make install top_dir=/etc/httpd

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -c 'fastcgi_module' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule	fastcgi_module|#LoadModule	fastcgi_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule fastcgi_module /usr/lib/apache/mod_fastcgi.so" >> ${PHPMODULES}
		fi
	fi

	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	/usr/local/directadmin/dataskq --custombuild	
	
	echo "mod_fastcgi-${MOD_FASTCGI_VER} has been installed successfully.";

	cd ${CWD};
	cagefsctl_update;
}

####################################################

ensure_server_ca() {

	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		SSL_CA=${HTTPDCONF}/ssl.crt/server.ca
		SSL_CRT=${HTTPDCONF}/ssl.crt/server.crt
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		SSL_CA=${NGINXCONF}/ssl.crt/server.ca
		SSL_CRT=${NGINXCONF}/ssl.crt/server.crt
	else
		echo "Unknown value for webserver=${WEBSERVER_OPT}";
		return;
	fi

	echo "Checking to ensure ${SSL_CA} is set.";
	
	if [ ! -s ${SSL_CA} ]; then
		echo "Downloading new generic server.ca ...";
		${WGET} -O ${SSL_CA} ${WEBPATH_SERVICES}/all/ssl/server.ca
		
		if [ ! -s ${SSL_CA} ]; then
			echo "Trying server.ca from backup services url...";
			${WGET} -O ${SSL_CA} ${WEBPATH_SERVICES_BACKUP}/all/ssl/server.ca

			if [ ! -s ${SSL_CA} ]; then
				echo "server.ca download failed.";

				if [ -s ${SSL_CRT} ]; then
					echo "Copying main server.crt to server.ca just as a valid read value so apache can start up";
					cp -f ${SSL_CRT} ${SSL_CA}
				fi
			fi
		fi	
	fi
}

backupHttp() {
	echo "Backing up certificate and key, and turning off httpd for DirectAdmins's check.";

	if [ -e ${HTTPDCONF}/ssl.crt/server.crt ]
	then
		cp -fp ${HTTPDCONF}/ssl.crt/server.crt ${HTTPDCONF}/ssl.crt/server.crt.backup
	fi
	if [ -e ${HTTPDCONF}/ssl.key/server.key ]
	then
		cp -fp ${HTTPDCONF}/ssl.key/server.key ${HTTPDCONF}/ssl.key/server.key.backup
	fi
	if [ -e ${HTTPD_CONF} ]
	then
		cp -fp ${HTTPD_CONF} ${HTTPD_CONF}.backup
	fi
	
	#turn off httpd service checking
	set_service httpd OFF
}

restoreHttp() {
	echo "Restoring certificate and key, and turning on httpd for DirectAdmins's check.";

	if [ -e ${HTTPDCONF}/ssl.crt/server.crt.backup ]
	then
		cp -fp ${HTTPDCONF}/ssl.crt/server.crt.backup ${HTTPDCONF}/ssl.crt/server.crt
		chmod 600 ${HTTPDCONF}/ssl.crt/server.crt
	fi
	if [ -e ${HTTPDCONF}/ssl.key/server.key.backup ]
	then
		cp -fp ${HTTPDCONF}/ssl.key/server.key.backup ${HTTPDCONF}/ssl.key/server.key
		chmod 600 ${HTTPDCONF}/ssl.key/server.key
	fi
	if [ -e ${HTTPDCONF}/httpd.conf.backup ]
	then
		cp -fp ${HTTPDCONF}/httpd.conf.backup ${HTTPDCONF}/httpd.conf
	fi
	
	ensure_server_ca

	#turn on httpd service checking
	set_service httpd ON
}

####################################################

checkRPMS() {
	if [ ${OS} = "FreeBSD" ]; then
		return;
	fi

	if [ -e ${DEBIAN_VERSION} ]; then
		return;
	fi

	echo "Removing all apache related rpms...";
	rpm -e --nodeps mod_auth_pgsql 2> /dev/null
	rpm -e --nodeps mod_python 2> /dev/null
	rpm -e --nodeps mod_auth_mysql 2> /dev/null
	rpm -e --nodeps mod_auth_any 2> /dev/null
	rpm -e --nodeps mod_dav 2> /dev/null
	rpm -e --nodeps mod_ssl 2> /dev/null
	rpm -e --nodeps mod_perl 2> /dev/null
	rpm -e --nodeps mod_fpse 2> /dev/null
	rpm -e --nodeps apache-fp 2> /dev/null
	rpm -e --nodeps apache-fp-devel 2> /dev/null
	rpm -e --nodeps apache-manual 2> /dev/null
	rpm -e --nodeps apacheconf 2> /dev/null
	rpm -e --nodeps apache-devel 2> /dev/null
	rpm -e --nodeps apache 2> /dev/null
	rpm -e --nodeps httpd 2> /dev/null
	rpm -e --nodeps httpd-devel 2> /dev/null
	rpm -e --nodeps php 2> /dev/null
	echo "All apache related rpms have been removed.";
}

####################################################

addUserGroup() {
	if [ ${OS} = "FreeBSD" ]; then
		PW=/usr/sbin/pw
		if ! /usr/bin/grep -q "^${2}:" < /etc/group; then
			${PW} groupadd ${2}
		fi
		if ! /usr/bin/id ${1} > /dev/null; then
			${PW} useradd -g ${2} -n ${1} -s /sbin/nologin
		fi
	elif [ -e ${DEBIAN_VERSION} ]; then
		if ! /usr/bin/id ${1} > /dev/null; then
			adduser --system --group --no-create-home \
		            --disabled-login --force-badname ${1} > /dev/null
		fi
	else
		if ! /usr/bin/id ${1} > /dev/null; then				
			/usr/sbin/useradd -r -s /bin/false ${1}
		fi
	fi
}

####################################################

set64() {
	if [ ! -d /usr/lib64 ]; then
		return;
	fi

	if [ ! -e /usr/lib/libssl.so ]; then
		ln -sf /usr/lib64/libssl.so /usr/lib/libssl.so
	fi
	if [ ! -e /usr/lib/libidn.so ]; then
		ln -sf /usr/lib64/libidn.so /usr/lib/libidn.so
	fi
}

####################################################

doApacheCheck() {
	if [ ! -e ${HTTPDCONF}/extra/httpd-includes.conf ]; then
		echo -n "" > ${HTTPDCONF}/extra/httpd-includes.conf
	fi

	if [ ! -e ${SUPHP_HTTPD} ]; then
		echo -n "" > ${SUPHP_HTTPD}
	fi
	
	if [ ! -e ${HTTPDCONF}/extra/httpd-php-handlers.conf ]; then
		echo -n "" > ${HTTPDCONF}/extra/httpd-php-handlers.conf
	fi
	
	if [ ! -e ${HTTPDCONF}/extra/httpd-phpmodules.conf ]; then
		echo -n "" > ${HTTPDCONF}/extra/httpd-phpmodules.conf
	fi
}

####################################################

doRestartDA(){
	echo "action=directadmin&value=restart" >> ${TASK_QUEUE}
	/usr/local/directadmin/dataskq --custombuild
}

####################################################

hideFrontpage() {
        if [ -e ${DACONF_TEMPLATE_FILE} ] && [ "`grep -c frontpage_on ${DACONF_TEMPLATE_FILE}`" = "0" ]; then
                echo "frontpage_on=0" >> ${DACONF_TEMPLATE_FILE}
        fi

        if [ -e ${DACONF_FILE} ] && [ "`grep -c frontpage_on ${DACONF_FILE}`" = "0" ]; then
                echo "frontpage_on=0" >> ${DACONF_FILE}
                if [ -e /usr/local/directadmin/data ]; then
                        echo "action=directadmin&value=restart" >> ${TASK_QUEUE}
                fi
        fi
}

####################################################

setFDSETSIZE()
{
        #this bit is to increase the socket limit
        if [ -e /usr/include/bits/typesizes.h ]; then
                perl -pi -e 's/__FD_SETSIZE.*1024/__FD_SETSIZE 32768/' /usr/include/bits/typesizes.h
        fi

        if [ -e /usr/include/linux/posix_types.h ]; then
                perl -pi -e 's/__FD_SETSIZE.*1024/__FD_SETSIZE 32768/' /usr/include/linux/posix_types.h
        fi

        if [ -e /usr/include/bits/types.h ]; then
                perl -pi -e 's/__FD_SETSIZE.*1024/__FD_SETSIZE 32768/' /usr/include/bits/types.h
        fi

        #same thing, for freebsd
        if [ -e /usr/include/sys/select.h ]; then
                perl -pi -e 's/FD_SETSIZE.*1024U/FD_SETSIZE 32768U/' /usr/include/sys/select.h
        fi

        if [ ${OS} != "FreeBSD" ]; then
		NUMBER=`cat /proc/sys/fs/file-max`
		if [ ${NUMBER} -lt 131072 ]; then
                 echo "131072" > /proc/sys/fs/file-max
                fi
        fi
}

####################################################

#tokenize the IP
tokenize_IP() {
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		TOKENFILE=${HTTPDCONF}/extra/httpd-vhosts.conf
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		TOKENFILE=${NGINXCONF}/nginx.conf
	fi
	if [ "`grep -c '|IP|' ${TOKENFILE}`" -gt "0" ]; then
		HOSTNAME=`hostname`;
		IP="`grep $HOSTNAME /etc/hosts | awk '{print $1}' | head -n1`"
		if [ "${IP}" = "" ]; then
		     echo "Unable to detect your server IP. Please enter it: "
		     read IP;
		fi
		if [ "${IP}" = "" ]; then
		     echo "Unable to detect your server IP. Exiting..."
		     do_exit 0;
		fi
	
		if [ "`echo ${IP} | grep -c ':'`" -gt 0 ]; then
			IP="[${IP}]";
		fi

		echo "Using $IP for your server IP";
		STR="perl -pi -e 's/\|IP\|/$IP/' ${TOKENFILE}";
		eval ${STR};
	fi
}

doCURL() {
	if [ "${CURL_OPT}" != "yes" ]; then
		echo "You cannot install curl, because you do not have it set in options.conf file.";
		return;
	fi

	getFile curl-${CURL_VER}.tar.gz curl
	quitIfLocked doCURL
	
	cd ${CWD};
	FILE=${CWD}/curl-${CURL_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	chmod -R 755 curl-${CURL_VER}
	cd curl-${CURL_VER}
	echo "Configuring curl-${CURL_VER}...";
	./configure
	/usr/bin/perl -pi -e 's/\#define HAVE_OPENSSL_ENGINE_H 1/\/\/\#define HAVE_OPENSSL_ENGINE_H 0/' ./lib/config.h;
	echo "Done. Making curl-${CURL_VER}...";
	while
	echo "Trying to make cURL..."
	do
	{
		if [ ${OS} = "FreeBSD" ]; then
			make
		else
			make CPPFLAGS=-I/usr/kerberos/include
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make complete";
	echo "Installing curl-${CURL_VER}...";
	make install
	echo "Done curl.";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doPCRE() {

	if [ "$NEW_PCRE_OPT" = "yes" ]; then
		getFile pcre-${PCRE_VER}.tar.gz pcre_current
	else
		getFile pcre-${PCRE_VER}.tar.gz pcre
	fi
	quitIfLocked doPCRE
	
	cd ${CWD};
	FILE=${CWD}/pcre-${PCRE_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	chmod -R 755 pcre-${PCRE_VER}
	cd pcre-${PCRE_VER}
	echo "Configuring pcre-${PCRE_VER}...";
	./configure --enable-utf8 --enable-unicode-properties
	echo "Done. Making pcre-${PCRE_VER}...";
	while
	echo "Trying to make PCRE..."
	do
	{
		make CPPFLAGS=-I/usr/kerberos/include

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make complete";
	echo "Installing pcre-${PCRE_VER}...";
	make install
	echo "Done pcre.";

	/sbin/ldconfig

	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doMCrypt() {
	getFile libmcrypt-${MCRYPT_VER}.tar.gz mcrypt
	quitIfLocked doMCrypt
	
	cd ${CWD};
	FILE=${CWD}/libmcrypt-${MCRYPT_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	chmod -R 755 libmcrypt-${MCRYPT_VER}
	cd libmcrypt-${MCRYPT_VER}
	echo "Configuring libmcrypt-${MCRYPT_VER}...";
	./configure --enable-ltdl-install
	echo "Done. Making libmcrypt-${MCRYPT_VER}...";
	while
	echo "Trying to make mCrypt..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make complete";
	echo "Installing mcrypt-${MCRYPT_VER}...";
	make install
	echo "Done mcrypt.";
	if [ -d ${WORKDIR}/libmcrypt-${MCRYPT_VER}/libltdl ]; then
		echo "Doing extra /libltdl for mcrypt..";
		cd libltdl
		./configure --enable-ltdl-install
		make
		make install
		echo "Done extra /libltdl for mcrypt.";
	fi
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doMHash() {
	getFile mhash-${MHASH_VER}.tar.gz mhash
	quitIfLocked doMHash
	
        cd ${CWD};
        FILE=${CWD}/mhash-${MHASH_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
	chmod -R 755 mhash-${MHASH_VER}
        cd mhash-${MHASH_VER}
        echo "Configuring mhash-${MHASH_VER}...";
        ./configure
        echo "Done. Making mhash-${MHASH_VER}...";
        while
        echo "Trying to make mHash..."
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing mhash-${MHASH_VER}...";
        make install
        echo "Done mhash.";
	removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doFreeType() {
	getFile freetype-${FREETYPE_VER}.tar.gz freetype
	quitIfLocked doFreeType
	
	if [ "${OS}" = "FreeBSD" ] && [ ! -e /usr/local/bin/gmake ]; then
		cd /usr/ports/devel/gmake
		make
		make install
		make clean
                if [ ! -e /usr/local/bin/gmake ]; then
                        pkg_add -r gmake
                fi
                rehash
	fi
        cd ${CWD};
        FILE=${CWD}/freetype-${FREETYPE_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd freetype-${FREETYPE_VER}
        echo "Configuring freetype-${FREETYPE_VER}...";
        ./configure
        echo "Done. Making freetype-${FREETYPE_VER}...";
        while
        echo "Trying to make FreeType..."
        do
        {
		if [ "${OS}" = "FreeBSD" ]; then
			/usr/local/bin/gmake
		else
			make
		fi

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing freetype-${FREETYPE_VER}...";
	if [ "${OS}" = "FreeBSD" ]; then
		/usr/local/bin/gmake install
	else
		make install
	fi

	#fix for freetype.h path change: http://forum.directadmin.com/showthread.php?t=47795
	if [ -e /usr/local/include/freetype2/freetype.h ] && [ ! -e /usr/local/include/freetype2/freetype/freetype.h ]; then
		echo "Linking freetype/freetype.h to freetype.h";
		mkdir -p /usr/local/include/freetype2/freetype
		ln -s ../freetype.h /usr/local/include/freetype2/freetype/freetype.h
	fi

	#FreeType 2.5.2+ doesn't cleanup it's old ft2build.h.
	if [ "`version_cmp ${FREETYPE_VER} 2.5.1 'freetype ver check'`" -ge 0 ]; then
		FT_BUILD_OLD=/usr/local/include/ft2build.h
		FT_BUILD_NEW=/usr/local/include/freetype2/ft2build.h
		if [ -e ${FT_BUILD_OLD} ] && [ -e ${FT_BUILD_NEW} ]; then
			echo "Removing old header: ${FT_BUILD_OLD}";
			rm -f ${FT_BUILD_OLD}
		fi
	fi

        echo "Done FreeType.";
		removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doICU() {
	getFile icu4c-${ICU_VER}-src.tgz icu4c
	quitIfLocked doICU
	
        cd ${CWD};
        FILE=${CWD}/icu4c-${ICU_VER}-src.tgz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd icu/source
	mkdir -p /usr/local/icu
        echo "Configuring icu-${ICU_VER}...";
        ./configure --prefix=/usr/local/icu
        echo "Done. Making icu-${ICU_VER}...";
        while
        echo "Trying to make icu..."
        do
        {
                if [ "$OS" = "FreeBSD" ]; then
                        /usr/local/bin/gmake
                else
                        make
                fi

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing icu4c-${ICU_VER}...";

        if [ "$OS" = "FreeBSD" ]; then
                /usr/local/bin/gmake install
        else
                make install
        fi

        echo "Done ICU.";
		removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doIconv() {

	if [ "${OS}" = "FreeBSD" ] && [ "`echo $OS_VER | cut -d. -f1`" -ge 7 ]; then
		pkg_add -r http://${DOWNLOADSERVER_OPT}/services/packages-7-stable/Latest/libiconv.tbz
		/sbin/ldconfig
		return;
	fi

	getFile libiconv-${ICONV_VER}.tar.gz iconv
	quitIfLocked doIconv
	
        cd ${CWD};
        FILE=${CWD}/libiconv-${ICONV_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd libiconv-${ICONV_VER}
        echo "Configuring iconv-${ICONV_VER}...";

        ./configure --prefix=/usr/local --enable-extra-encodings

        echo "Done. Making iconv-${ICONV_VER}...";
        while
        echo "Trying to make iconv..."
        do
        {
		make
                #make -j ${CPU_CORES}

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing iconv-${ICONV_VER}...";
        make install
        echo "Done iconv.";
	removeLockfile
        cd ${CWD}

	if [ ! -e /usr/lib/libiconv.so.2 ]; then
		ln -s /usr/local/lib/libiconv.so.2 /usr/lib/libiconv.so.2
	fi

	/sbin/ldconfig
	cagefsctl_update;
}

####################################################

doLibxslt() {
	getFile libxslt-${LIBXSLT_VER}.tar.gz libxslt
	quitIfLocked doLibxslt
	
        cd ${CWD};
        FILE=${CWD}/libxslt-${LIBXSLT_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd libxslt-${LIBXSLT_VER}
        echo "Configuring libxslt-${LIBXSLT_VER}...";
		./configure --prefix=/usr/local --with-libxml-prefix=/usr/local --with-libxml-include-prefix=/usr/local/include --with-libxml-libs-prefix=/usr/local/lib
        echo "Done. Making libxslt-${LIBXSLT_VER}...";
        while
        echo "Trying to make libxslt..."
        do
        {
                make -j ${CPU_CORES}

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing libxslt-${LIBXSLT_VER}...";
        make install
        echo "Done libxslt.";
	removeLockfile
        cd ${CWD}

	/sbin/ldconfig
	cagefsctl_update;
}

####################################################

doLibxml2() {
	if [ "$NEW_ZLIB_OPT" = "yes" ] || [ "$NEW_XML2_OPT" = "yes" ]; then
		getFile libxml2-${LIBXML2_VER}.tar.gz libxml2-current
	else
		getFile libxml2-${LIBXML2_VER}.tar.gz libxml2
	fi
	quitIfLocked doLibxml2
	
        cd ${CWD};
        FILE=${CWD}/libxml2-${LIBXML2_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd libxml2-${LIBXML2_VER}
        echo "Configuring libxml2-${LIBXML2_VER}...";

	#fix for this bug on FreeBSD 6:
	#http://forums.freebsd.org/showthread.php?t=20273
	if [ "${OS}" = "FreeBSD" ] && [ "${MAINVER}" = "6" ]; then
		echo "Patching configure to address this bug:";
		echo "http://forums.freebsd.org/showthread.php?t=20273";
		
		perl -pi -e 's/WIN32_EXTRA_PYTHON_LIBADD=\"/#WIN32_EXTRA_PYTHON_LIBADD=\"/' configure		
	fi

        ./configure --prefix=/usr/local --without-python --with-zlib=/usr/local

        echo "Done. Making libxml2-${LIBXML2_VER}...";
        while
        echo "Trying to make libxml2..."
        do
        {
                #make -j ${CPU_CORES}
		make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing libxml2-${LIBXML2_VER}...";
        make install
        echo "Done libxml2.";
	removeLockfile
        cd ${CWD}

	/sbin/ldconfig
	cagefsctl_update;
}

####################################################

doM4() {
        cd ${CWD};
        getFile m4-${M4_VER}.tar.gz m4
        quitIfLocked doM4
        
        cd ${CWD};
        FILE=${CWD}/m4-${M4_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd m4-${M4_VER}

        echo "Configuring m4-${M4_VER}...";
        ./configure --prefix=/usr/local
        echo "Done. Making m4-${M4_VER}...";

        while
        echo "Trying to make m4..."
        do
        {
                LANG=c make;

                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing m4-${M4_VER}...";
        LANG=c make install;
        echo "Done m4";

        removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doAutoconf() {
	if [ "${AUTOCONF_OPT}" != "yes" ]; then
		echo "You cannot install autoconf, because you do not have it set in options.conf file.";
		exit 1;
	fi
	cd ${CWD};
	getFile autoconf-${AUTOCONF_VER}.tar.gz autoconf
	quitIfLocked doAutoconf
	
	cd ${CWD};
	FILE=${CWD}/autoconf-${AUTOCONF_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd autoconf-${AUTOCONF_VER}

	echo "Configuring autoconf-${AUTOCONF_VER}...";
	./configure --prefix=/usr/local
	echo "Done. Making autoconf-${AUTOCONF_VER}...";
	while
	echo "Trying to make autoconf..."
	do
	{
			LANG=c make;

			if [ $? -ne 0 ]; then
				if [ ${USER_INPUT} -eq 1 ]; then
					$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]
				then
					do_exit 0;
				fi
			else
				break;
			fi
	}
	done
	echo "Make complete";
	echo "Installing autoconf-${AUTOCONF_VER}...";
	LANG=c make install;
	echo "Done Autoconf";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doAutomake() {
	if [ "${AUTOMAKE_OPT}" != "yes" ]; then
		echo "You cannot install automake, because you do not have it set in options.conf file.";
		exit 1;
	fi
	cd ${CWD};
	getFile automake-${AUTOMAKE_VER}.tar.gz automake
	quitIfLocked doAutomake
	
	cd ${CWD};
	FILE=${CWD}/automake-${AUTOMAKE_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd automake-${AUTOMAKE_VER}

	echo "Configuring automake-${AUTOMAKE_VER}...";
	./configure --prefix=/usr/local
	echo "Done. Making automake-${AUTOMAKE_VER}...";
	while
	echo "Trying to make automake..."
	do
	{
			LANG=c make;

			if [ $? -ne 0 ]; then
				if [ ${USER_INPUT} -eq 1 ]; then
					$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]; then
					do_exit 0;
				fi
			else
				break;
			fi
	}
	done
	echo "Make complete";
	echo "Installing automake-${AUTOMAKE_VER}...";
	LANG=c make install;
	echo "Done Automake";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doLibtool() {
	if [ "${LIBTOOL_OPT}" != "yes" ]; then
		echo "You cannot install libtool, because you do not have it set in options.conf file.";
		exit 1;
	fi
	cd ${CWD};
	getFile libtool-${LIBTOOL_VER}.tar.gz libtool
	quitIfLocked doLibtool
	
	cd ${CWD};
	FILE=${CWD}/libtool-${LIBTOOL_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd libtool-${LIBTOOL_VER}

	echo "Configuring libtool-${LIBTOOL_VER}...";
	./configure --prefix=/usr/local
	echo "Done. Making libtool-${LIBTOOL_VER}...";
	while
	echo "Trying to make libtool..."
	do
	{
			LANG=c make;

			if [ $? -ne 0 ]; then
				if [ ${USER_INPUT} -eq 1 ]; then
					$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]; then
					do_exit 0;
				fi
			else
				break;
			fi
	}
	done
	echo "Make complete";
	echo "Installing libtool-${LIBTOOL_VER}...";
	LANG=c make install;

	#because the programmers of libtool decided not to actually show the true version
	#we have to change the version to make it accurate so things match
	COUNT=`grep -c ${LIBTOOL_VER} /usr/local/bin/libtool`
	if [ "$COUNT" -eq 0 ]; then
			perl -pi -e "s/2.2.6/${LIBTOOL_VER}/" /usr/local/bin/libtool
	fi

	echo "Done Libtool";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doWebalizer() {
	quitIfLocked doWebalizer
	
	if [ "${WEBALIZER_OPT}" != "yes" ]; then
		echo "You cannot install webalizer, because you do not have it set in options.conf file.";
		setVal webalizer 0 ${DACONF_TEMPLATE_FILE}
		setVal webalizer 0 ${DACONF_FILE}
		exit 1;
	fi
	
	
	PREFIX=/usr
	LIBPATH=/usr/lib
	INCPATH=/usr/include
	if [ ${OS} = "FreeBSD" ]; then
		PREFIX=/usr/local
		LIBPATH=/usr/local/lib
		INCPATH=/usr/local/include
	fi

	if [ -e ${PREFIX}/bin/webalizer ]; then
		echo "The webalizer binary exists, aborting.  Delete ${PREFIX}/bin/webalizer if you wish to compile."
		removeLockfile
		return;
	fi

        cd ${CWD};
        getFile ${WEBALIZER_FILE} webalizer
        tar xzf ${WEBALIZER_FILE} --no-same-owner
        cd ${WEBALIZER}

        export LD_LIBRARY_PATH=${LIBPATH}
        ./configure --prefix=${PREFIX} --with-png=${LIBPATH} --with-gdlib=${LIBPATH} --with-gd=${INCPATH} --enable-dns --with-dblib --with-db --with-z-inc --with-zlib

        while
        echo "Trying to make webalizer..."
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
				removeLockfile
                                return;
                        fi
                else
                        break;
                fi
        }
        done

        make install
	removeLockfile

	if [ "${AWSTATS_OPT}" = "no" ]; then
		setVal awstats 0 ${DACONF_TEMPLATE_FILE}
		setVal awstats 0 ${DACONF_FILE}
	else
		setVal awstats 1 ${DACONF_TEMPLATE_FILE}
		setVal awstats 1 ${DACONF_FILE}
	fi
	
	doRestartDA;
	
	if [ -e /etc/webalizer.conf ]; then
		mv -f /etc/webalizer.conf /etc/webalizer.conf.moved 2> /dev/null > /dev/null
	fi
	
	cagefsctl_update;
}

####################################################

doawstats() {
	if [ "${AWSTATS_OPT}" != "yes" ]; then
		echo "You cannot install awstats, because you do not have it set in options.conf file.";
		setVal awstats 0 ${DACONF_TEMPLATE_FILE}
		setVal awstats 0 ${DACONF_FILE}
		exit 1;
	fi
	
	HTTPPATH=http://${DOWNLOADSERVER_OPT}/services/all/awstats
	TARFILE=${WORKDIR}/awstats-${AWSTATS_VER}.tar.gz
	USR=/usr/local
	REALPATH=${USR}/awstats-${AWSTATS_VER}
	ALIASPATH=${USR}/awstats
	
	if [ ! -e ${TARFILE} ]; then
		${WGET} -O ${TARFILE} ${HTTPPATH}/awstats-${AWSTATS_VER}.tar.gz
	fi

	if [ ! -e ${TARFILE} ]; then
        echo "Cannot download awstats-${AWSTATS_VER}"
        exit 1
	fi

	M=`checkMD5 $TARFILE awstats`
        if [ "$M" != "0" ]; then
                echo "";
                echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
                echo "";
		${WGET} -O ${TARFILE} ${WEBPATH_SERVICES}/all/awstats-${AWSTATS_VER}.tar.gz

                M=`checkMD5 $TARFILE awstats`
                if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
                fi
	fi
	
	getFile patches/awstats_url.patch awstats_url_patch

	#Extract the file
	${TAR} xzf ${TARFILE} --no-same-owner -C ${USR}

	if [ ! -e ${REALPATH} ]; then
		echo "Directory ${REALPATH} does not exist"
		exit 1
	fi

	#link it from a fake path:
	/bin/rm -f ${ALIASPATH}
	/bin/ln -sf ${REALPATH} ${ALIASPATH}
	cd ${REALPATH}
	chown -R root:${ROOT_GRP} ${REALPATH}
	chmod -R 755 ${REALPATH}
	
	#patch the url bug
	echo "Patching awstats_buildstaticpages.pl to fix url bug...";
	cd ${REALPATH}/tools
	cp -f ${WORKDIR}/patches/awstats_url.patch ./awstats_url.patch
	if [ ! -s awstats_url.patch ]; then
		echo "Error with awstats_url.patch. File is missing or empty";
		echo "This will cause url issues in the static awstats output.";
	else
		patch -p0 < awstats_url.patch
	fi

	#setup the directadmin.conf
	setVal awstats 1 ${DACONF_TEMPLATE_FILE}
	setVal awstats 1 ${DACONF_FILE}
	if [ "${WEBALIZER_OPT}" = "no" ]; then
		setVal webalizer 0 ${DACONF_TEMPLATE_FILE}
		setVal webalizer 0 ${DACONF_FILE}
	else
		setVal webalizer 1 ${DACONF_TEMPLATE_FILE}
		setVal webalizer 1 ${DACONF_FILE}
	fi

	doRestartDA;
	cd ${CWD};
	echo "AWstats ${AWSTATS_VER} installation is done."
}

####################################################

doUpdate() {
	cd ${CWD}
	cp -f options.conf ..
	cd ..
	if [ ${OS} = "FreeBSD" ]
	then
		fetch -o ./${NAME}.tar.gz ${WEBPATH}/${CUSTOMBUILD_OPT}/${NAME}.tar.gz
	else
		wget -O ./${NAME}.tar.gz ${WEBPATH}/${CUSTOMBUILD_OPT}/${NAME}.tar.gz
	fi
	
	echo "extracting ${NAME}.tar.gz ...";

	tar xvzf ${NAME}.tar.gz --no-same-owner
	mv -f options.conf ${WORKDIR}
	cd ${CWD}

	if [ ${OS} = "FreeBSD" ]
	then
		fetch -o ./versions.txt ${WEBPATH}/versions.txt
	else
		wget -O ./versions.txt ${WEBPATH}/versions.txt
	fi

	chmod 755 build
	
 	./build update_data;
}

####################################################

doUpdateScript() {
	cd ${CWD}
	if [ ${OS} = "FreeBSD" ]
	then
		fetch -o ${CWD}/build.new ${WEBPATH}/2.0/custombuild/build
	else
		wget ${WEBPATH}/2.0/custombuild/build -O ${CWD}/build.new
	fi
	
	mv -f build.new build
	chmod 755 build
}

####################################################

doPhpConf() {

	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		set_service php-fpm53 OFF
		set_service php-fpm54 OFF
		set_service php-fpm55 OFF
	else
		set_service php-fpm53 delete
		set_service php-fpm54 delete
		set_service php-fpm55 delete
	fi
	
	fpmChecks;
	
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		doApacheHostConf;
	
		# Writing data to httpd-php-handlers.conf
		echo -n "" > ${PHP_HANDLERS_HTTPD}
		echo '<FilesMatch "\.(inc|php|php3|php4|php44|php5|php52|php53|php54|php55|php6|phtml|phps)$">' >> ${PHP_HANDLERS_HTTPD}


		if [ "${PHP1_MODE}" = "mod_php" ]; then
			if [ "${PHP1_RELEASE}" = "5.3" ]; then
				echo "AddHandler application/x-httpd-php .inc .php .php5 .php53 .phtml" >> ${PHP_HANDLERS_HTTPD}
			elif [ "${PHP1_RELEASE}" = "5.4" ]; then
				echo "AddHandler application/x-httpd-php .inc .php .php5 .php54 .phtml" >> ${PHP_HANDLERS_HTTPD}
			elif [ "${PHP1_RELEASE}" = "5.5" ]; then
				echo "AddHandler application/x-httpd-php .inc .php .php5 .php55 .phtml" >> ${PHP_HANDLERS_HTTPD}
			fi
		fi

		if [ "${PHP2_MODE}" = "mod_php" ]; then
			if [ "${PHP2_RELEASE}" = "5.3" ]; then
				echo "AddHandler application/x-httpd-php .php53" >> ${PHP_HANDLERS_HTTPD}
			elif [ "${PHP2_RELEASE}" = "5.4" ]; then
				echo "AddHandler application/x-httpd-php .php54" >> ${PHP_HANDLERS_HTTPD}
			elif [ "${PHP2_RELEASE}" = "5.5" ]; then
				echo "AddHandler application/x-httpd-php .php55" >> ${PHP_HANDLERS_HTTPD}
			fi
		fi
		
		if [ "${PHP1_MODE}" = "mod_php" ] || [ "${PHP2_MODE}" = "mod_php" ]; then
			echo "AddHandler application/x-httpd-php-source .phps" >> ${PHP_HANDLERS_HTTPD}
		fi
		
		echo '</FilesMatch>' >> ${PHP_HANDLERS_HTTPD}

		echo "AddType text/html .php" >> ${PHP_HANDLERS_HTTPD}
	fi
	
	HAVE53_FPM=no
	HAVE54_FPM=no
	HAVE55_FPM=no
	
	if [ "${PHP1_MODE}" = "php-fpm" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ]; then
			${INITDDIR}/php-fpm53 restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm53 restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm53 defaults
			else
				/sbin/chkconfig php-fpm53 on
			fi
			
			set_service php-fpm53 ON
			HAVE53_FPM=yes
		elif [ "${PHP1_RELEASE}" = "5.4" ]; then
			${INITDDIR}/php-fpm54 restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm54 restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm54 defaults
			else
				/sbin/chkconfig php-fpm54 on
			fi

			set_service php-fpm54 ON
			HAVE54_FPM=yes
		elif [ "${PHP1_RELEASE}" = "5.5" ]; then
			${INITDDIR}/php-fpm55 restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm55 restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm55 defaults
			else
				/sbin/chkconfig php-fpm55 on
			fi

			set_service php-fpm55 ON
			HAVE55_FPM=yes
		fi
	fi
	if [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		if [ "${PHP2_RELEASE}" = "5.3" ]; then
			${INITDDIR}/php-fpm53 restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm53 restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm53 defaults
			else
				/sbin/chkconfig php-fpm53 on
			fi
			
			set_service php-fpm53 ON
			HAVE53_FPM=yes
		elif [ "${PHP2_RELEASE}" = "5.4" ]; then
			${INITDDIR}/php-fpm54 restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm54 restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm54 defaults
			else
				/sbin/chkconfig php-fpm54 on
			fi

			set_service php-fpm54 ON
			HAVE54_FPM=yes
		elif [ "${PHP2_RELEASE}" = "5.5" ]; then
			${INITDDIR}/php-fpm55 restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm55 restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm55 defaults
			else
				/sbin/chkconfig php-fpm55 on
			fi

			set_service php-fpm55 ON
			HAVE55_FPM=yes
		fi
	fi
	
	if [ "${HAVE55_FPM}" = "no" ]; then
		if [ -e ${INITDDIR}/php-fpm55 ]; then
			if [ -e /etc/debian_version ]; then
				update-rc.d php-fpm55 remove
			elif [ -e /sbin/chkconfig ]; then
				/sbin/chkconfig php-fpm55 off
			fi
			${INITDDIR}/php-fpm55 stop
		fi
		set_service php-fpm55 delete
		rm -f ${INITDDIR}/php-fpm55
	fi
	
	if [ "${HAVE54_FPM}" = "no" ]; then
		if [ -e ${INITDDIR}/php-fpm54 ]; then
			if [ -e /etc/debian_version ]; then
				update-rc.d php-fpm54 remove
			elif [ -e /sbin/chkconfig ]; then
				/sbin/chkconfig php-fpm54 off
			fi
			${INITDDIR}/php-fpm54 stop
		fi
		set_service php-fpm54 delete
		rm -f ${INITDDIR}/php-fpm54
	fi
	
	if [ "${HAVE53_FPM}" = "no" ]; then
		if [ -e ${INITDDIR}/php-fpm53 ]; then
			if [ -e /etc/debian_version ]; then
				update-rc.d php-fpm53 remove
			elif [ -e /sbin/chkconfig ]; then
				/sbin/chkconfig php-fpm53 off
			fi
			${INITDDIR}/php-fpm53 stop
		fi
		set_service php-fpm53 delete
		rm -f ${INITDDIR}/php-fpm53
	fi

	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			# Writing data to suphp.conf
			echo -n "" > ${SUPHP_CONF_FILE}
			echo "[global]" >> ${SUPHP_CONF_FILE}
			echo ";Path to logfile" >> ${SUPHP_CONF_FILE}
			echo "logfile=/var/log/suphp.log" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Loglevel" >> ${SUPHP_CONF_FILE}
			echo "loglevel=warn" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";User Apache is running as" >> ${SUPHP_CONF_FILE}
			echo "webserver_user=apache" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Path all scripts have to be in" >> ${SUPHP_CONF_FILE}
			echo "docroot=/" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo "; Security options" >> ${SUPHP_CONF_FILE}
			echo "allow_file_group_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "allow_file_others_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "allow_directory_group_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "allow_directory_others_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Check wheter script is within DOCUMENT_ROOT" >> ${SUPHP_CONF_FILE}
			echo "check_vhost_docroot=false" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Send minor error messages to browser" >> ${SUPHP_CONF_FILE}
			echo "errors_to_browser=true" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";PATH environment variable" >> ${SUPHP_CONF_FILE}
			echo "env_path=\"/bin:/usr/bin\"" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Umask to set, specify in octal notation" >> ${SUPHP_CONF_FILE}
			echo "umask=0022" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Minimum UID" >> ${SUPHP_CONF_FILE}
			echo "min_uid=100" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Minimum GID" >> ${SUPHP_CONF_FILE}
			echo "min_gid=100" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo "[handlers]" >> ${SUPHP_CONF_FILE}
			echo ";Handler for php-scripts" >> ${SUPHP_CONF_FILE}

			if [ "${PHP1_RELEASE}" = "5.3" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "x-httpd-php53=\"php:/usr/local/php53/bin/php-cgi53\"" >> ${SUPHP_CONF_FILE}
			fi
			if [ "${PHP2_RELEASE}" = "5.3" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "x-httpd-php53=\"php:/usr/local/php53/bin/php-cgi53\"" >> ${SUPHP_CONF_FILE}
			fi
			if [ "${PHP1_RELEASE}" = "5.4" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "x-httpd-php54=\"php:/usr/local/php54/bin/php-cgi54\"" >> ${SUPHP_CONF_FILE}
			fi
			if [ "${PHP2_RELEASE}" = "5.4" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "x-httpd-php54=\"php:/usr/local/php54/bin/php-cgi54\"" >> ${SUPHP_CONF_FILE}
			fi
			if [ "${PHP1_RELEASE}" = "5.5" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "x-httpd-php55=\"php:/usr/local/php55/bin/php-cgi55\"" >> ${SUPHP_CONF_FILE}
			fi
			if [ "${PHP2_RELEASE}" = "5.5" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "x-httpd-php55=\"php:/usr/local/php55/bin/php-cgi55\"" >> ${SUPHP_CONF_FILE}
			fi

			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Handler for CGI-scripts" >> ${SUPHP_CONF_FILE}
			echo "x-suphp-cgi=\"execute:!self\"" >> ${SUPHP_CONF_FILE}

			# Writing data to /etc/httpd/conf/extra/httpd-suphp.conf
			echo "Writing data to ${SUPHP_HTTPD}"
			echo -n "" > ${SUPHP_HTTPD}

			echo "<IfModule mod_suphp.c>" >> ${SUPHP_HTTPD}
			echo '<FilesMatch "\.(inc|php|php3|php4|php44|php5|php52|php53|php54|php55|php6|phtml|phps)$">' >> ${SUPHP_HTTPD}
			if [ "${PHP1_RELEASE}" = "5.3" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "AddHandler x-httpd-php53 .inc .php .php3 .php4 .php5 .php53 .phtml" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP2_RELEASE}" = "5.3" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "AddHandler x-httpd-php53 .php53" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP1_RELEASE}" = "5.4" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "AddHandler x-httpd-php54 .inc .php .php3 .php4 .php5 .php54 .phtml" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP2_RELEASE}" = "5.4" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "AddHandler x-httpd-php54 .php54" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP1_RELEASE}" = "5.5" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "AddHandler x-httpd-php55 .inc .php .php3 .php4 .php5 .php55 .phtml" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP2_RELEASE}" = "5.5" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "AddHandler x-httpd-php55 .php55" >> ${SUPHP_HTTPD}
			fi
			echo '</FilesMatch>' >> ${SUPHP_HTTPD}

			echo "<Location />" >> ${SUPHP_HTTPD}
			echo "suPHP_Engine on" >> ${SUPHP_HTTPD}

			if [ -d /usr/local/php${PHP1_SHORTRELEASE}/lib ]; then
				echo "suPHP_ConfigPath /usr/local/php${PHP1_SHORTRELEASE}/lib/" >> ${SUPHP_HTTPD}
			elif [ -d /usr/local/php${PHP2_SHORTRELEASE}/lib ]; then
				echo "suPHP_ConfigPath /usr/local/php${PHP2_SHORTRELEASE}/lib/" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP1_RELEASE}" = "5.3" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php53" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP2_RELEASE}" = "5.3" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php53" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP1_RELEASE}" = "5.4" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php54" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP2_RELEASE}" = "5.4" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php54" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP1_RELEASE}" = "5.5" ] && [ "${PHP1_MODE}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php55" >> ${SUPHP_HTTPD}
			fi
			if [ "${PHP2_RELEASE}" = "5.5" ] && [ "${PHP2_MODE}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php55" >> ${SUPHP_HTTPD}
			fi
			
			echo "</Location>" >> ${SUPHP_HTTPD}
			echo "</IfModule>" >> ${SUPHP_HTTPD}
			echo "Done."
		elif [ -e ${SUPHP_HTTPD} ]; then
			echo -n "" > ${SUPHP_HTTPD}
		fi
	fi
}

####################################################

get_webmail_link()
{
	WL=roundcube
	if [ "$ROUNDCUBE_OPT" = "no" ]; then
		WL=squirrelmail
	fi
	if [ -s ${DACONF_FILE} ] && [ -s /usr/local/directadmin/directadmin ]; then
		WL=`/usr/local/directadmin/directadmin c | grep ^webmail_link | cut -d= -f2`
	fi
	
	echo "${WL}"
}


####################################################
add_alias_redirect()
{
	AF=$1
	A=$2
	P=$3

	HTTP=http://
	if [ "${REDIRECT_HOST_HTTPS_OPT}" = "yes" ]; then
		HTTP=https://
	fi

	HOST_ALIAS=no
	if [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" = "yes" ]; then
		HOST_ALIAS=yes
	elif [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" = "auto" ] && [ "${HAVE_FCGID}" = "yes" ]; then
		HOST_ALIAS=yes
	fi

	if [ "${HOST_ALIAS}" = "yes" ]; then
		echo "RewriteCond %{HTTP_HOST} !^${REDIRECT_HOST_OPT}\$" >> ${AF}
	
		echo "RewriteCond %{REQUEST_URI} ^/${A}/ [OR]" >> ${AF}
		echo "RewriteCond %{REQUEST_URI} ^/${A}\$ [OR]" >> ${AF}
		
		echo "RewriteRule ^/${A}(.*) ${HTTP}${REDIRECT_HOST_OPT}/${P}\$1" >> ${AF}
	
		echo "" >> ${AF}
	else
		echo "Alias /${A} /var/www/html/${P}" >> ${AF}	
	fi
}

do_rewrite_httpd_alias()
{
	#if [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" != "yes" ]; then
	#	return;
	#fi
	if [ -e ${WORKDIR}/custom/ap2/conf/extra/httpd-alias.conf ]; then
		cp -pf ${WORKDIR}/custom/ap2/conf/extra/httpd-alias.conf /etc/httpd/conf/extra/httpd-alias.conf
	else
		HA=/etc/httpd/conf/extra/httpd-alias.conf
			
		echo -n '' > ${HA}
		
		if [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" = "yes" ]; then
			echo "RewriteEngine On" >> ${HA}
		fi
		
		add_alias_redirect ${HA} config redirect.php
		
		if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
			add_alias_redirect ${HA} squirrelmail squirrelmail
		fi
		
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			add_alias_redirect ${HA} roundcube roundcube
		fi

		WEBMAILLINK=`get_webmail_link`
		if [ -e /var/www/html/${WEBMAILLINK} ]; then
			add_alias_redirect ${HA} webmail ${WEBMAILLINK}
		fi
		
		if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
			add_alias_redirect ${HA} phpMyAdmin phpMyAdmin
			add_alias_redirect ${HA} phpmyadmin phpMyAdmin
			add_alias_redirect ${HA} pma phpMyAdmin
		fi
	fi
}

add_nginx_alias_redirect()
{	#A fake P real
	F=$1
	A=$2
	P=$3
	
	${ECHO} -e "\tlocation /${A} {" >> ${F}
	${ECHO} -e "\t\trewrite ^/* /${P} last;" >> ${F}
	${ECHO} -e "\t}" >> ${F}
}

add_nginx_alias()
{
	F=$1
	A=$2
	
	${ECHO} -e "\tlocation /${A} {" >> ${F}
	${ECHO} -e "\t\troot /var/www/html/;" >> ${F}
	${ECHO} -e "\t\tindex index.php index.html index.htm;" >> ${F}
	${ECHO} -e "\t\tlocation ~ ^/${A}/(.+\.php)\$ {" >> ${F}
	${ECHO} -e "\t\t\tinclude /etc/nginx/webapps_settings.conf;" >> ${F}
	${ECHO} -e "\t\t}" >> ${F};
	${ECHO} -e "\t\tlocation ~* ^/${A}/(.+\\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))\$ {" >> ${F}
	${ECHO} -e "\t\t\troot /var/www/html/;" >> ${F}
	${ECHO} -e "\t\t}" >> ${F}
	${ECHO} -e "\t}" >> ${F}
}

do_rewrite_nginx_webapps()
{
	if [ -e ${WORKDIR}/custom/nginx/conf/webapps.conf ]; then
		cp -pf ${WORKDIR}/custom/nginx/conf/webapps.conf /etc/nginx/webapps.conf
	else
		NW=/etc/nginx/webapps.conf
		
		${ECHO} -n '' > ${NW}

		if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
			add_nginx_alias ${NW} squirrelmail
		fi
		
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			add_nginx_alias ${NW} roundcube
		fi

		if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
			add_nginx_alias ${NW} phpMyAdmin
			add_nginx_alias_redirect ${NW} phpmyadmin phpMyAdmin
			add_nginx_alias_redirect ${NW} pma phpMyAdmin
		fi	

		WEBMAILLINK=`get_webmail_link`
		if [ -e /var/www/html/${WEBMAILLINK} ]; then
			add_nginx_alias_redirect ${NW} webmail ${WEBMAILLINK}
		fi
	fi
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		#update the webapps_settings.conf
		#swap "fastcgi_pass unix:/usr/local/php54/sockets/webapps.sock;" if needed
		#might be a better way to do this, other checks. Close enough for now.
		
		if [ "${PHP1_MODE}" = "php-fpm" ]; then
			perl -pi -e "s#php54#php${PHP1_SHORTRELEASE}#" /etc/nginx/webapps_settings.conf
		fi		
	fi
}


####################################################

doRewriteConfs() {
	quitIfLocked doRewriteConfs
	
	cd ${CWD}
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ ! -e httpd-${APACHE2_VER}.tar.gz ]; then
			echo "File httpd-${APACHE2_VER}.tar.gz does not exist. Cannot rewrite configs"
		else
			tar xzf httpd-${APACHE2_VER}.tar.gz --no-same-owner
		fi

		if [ ! -d httpd-${APACHE2_VER} ]; then
			echo "Directory httpd-${APACHE2_VER} does not exist. Cannot rewrite configs"
		fi

		#copy the new configs
		cp -rf ${APCONFDIR} ${HTTPDDIR}

		cp -f ${APCONFDIR}/httpd.conf ${HTTPD_CONF}
		cp -f ${APCONFDIR}/extra/httpd-mpm.conf ${HTTPDCONF}/extra/httpd-mpm.conf
		
		perl -pi -e 's/^DefaultType/#DefaultType/' ${HTTPD_CONF}

		if [ "${SECURE_HTACCESS}" = "yes" ]; then
			HDC=httpd-directories-new.conf
		else
			HDC=httpd-directories-old.conf
		fi

		ln -sf $HDC ${HTTPDCONF}/extra/httpd-directories.conf

		doApacheHostConf;
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi
		
		#swap the |WEBAPPS_PHP_RELEASE| token.
		if [ "${PHP1_MODE}" = "php-fpm" ] || [ "${PHP2_MODE}" = "php-fpm" ]; then
			PHPV=""
			if [ "${PHP1_MODE}" = "php-fpm" ]; then
				PHPV=`perl -e "print ${PHP1_RELEASE} * 10"`
			elif [ "${PHP2_RELEASE}" != "no" ]; then
				PHPV=`perl -e "print ${PHP2_RELEASE} * 10"`
			fi
			
			if [ "${PHPV}" != "" ]; then
				perl -pi -e "s/\|WEBAPPS_PHP_RELEASE\|/${PHPV}/" ${HTTPDCONF}/extra/${HDC}
			fi
		fi		


		#ensure we have the correct apache_ver
		if [ "`grep -c apache_ver=2.0 ${DACONF_TEMPLATE_FILE}`" -eq "0" ]; then
			echo "apache_ver=2.0" >> ${DACONF_TEMPLATE_FILE}
		elif [ "`grep -c apache_ver= ${DACONF_TEMPLATE_FILE}`" -ne "0" ]; then
			perl -pi -e 's/`grep apache_ver= ${DACONF_TEMPLATE_FILE}`/apache_ver=2.0/' ${DACONF_TEMPLATE_FILE}
		fi
		if [ "`grep -c apache_ver=2.0 ${DACONF_FILE}`" -eq "0" ]; then
			echo "apache_ver=2.0" >> ${DACONF_FILE}
			doRestartDA
			echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		elif [ "`grep -c apache_ver= ${DACONF_FILE}`" -ne "0" ]; then
			perl -pi -e 's/`grep apache_ver= ${DACONF_FILE}`/apache_ver=2.0/' ${DACONF_FILE}
			doRestartDA
			echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		fi
		
		do_rewrite_httpd_alias

		#rewrite ips.conf
		echo "action=rewrite&value=ips" >> ${TASK_QUEUE}

		/usr/local/directadmin/dataskq --custombuild

		#tokenize the IP
		tokenize_IP

		#add all the Include lines if they do not exist
		if [ "`grep -c 'Include' ${HTTPDCONF}/extra/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${HTTPDCONF}/extra/directadmin-vhosts.conf ]; then
			doVhosts;
			cd ${CWD}/httpd-${APACHE2_VER}
		fi

		if [ ! -d /etc/httpd/conf/ssl.key ] || [ ! -d /etc/httpd/conf/ssl.crt ]; then
			cd ${WORKDIR}
			mkdir -p /etc/httpd/conf/ssl.key
			mkdir -p /etc/httpd/conf/ssl.crt
			#install the cert/key
			/usr/bin/openssl req -x509 -newkey rsa:1024 -keyout /etc/httpd/conf/ssl.key/server.key -out /etc/httpd/conf/ssl.crt/server.crt -days 9999 -nodes -config ./${APCERTCONF}

			chmod 600 ${HTTPDCONF}/ssl.crt/server.crt
			chmod 600 ${HTTPDCONF}/ssl.key/server.key
			cd ${CWD}
		fi
		
		ensure_server_ca

		doApacheCheck

		rm -rf ${CWD}/httpd-${APACHE2_VER}

		cd ${CWD}

		PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
		
		echo -n "" > ${PHPMODULES}
		
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
		perl -pi -e 's|^LoadModule suphp_module|#LoadModule suphp_module|' /etc/httpd/conf/httpd.conf
		echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
		perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
		echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
			echo "Mutex posixsem" >> ${PHPMODULES}
		fi
		
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule	htscanner_module		/usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
		fi

		#Use event MPM for php-fpm and prefork for mod_php
		if [ "${HAVE_CLI}" = "no" ]; then
			# Add to httpd-phpmodules.conf
			echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
		else
			# Add to httpd-phpmodules.conf
			echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
		fi

		if [ "${HAVE_CLI}" = "yes" ]; then
			if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP1_RELEASE}" = "5.5" ]; then
				# Change httpd.conf info
				perl -pi -e 's/^LoadModule php4/\#LoadModule php4/' /etc/httpd/conf/httpd.conf
				perl -pi -e 's/^LoadModule php5/\#LoadModule php5/' /etc/httpd/conf/httpd.conf
				# Add to httpd-phpmodules.conf
				echo "LoadModule	php5_module		/usr/lib/apache/libphp5.so" >> ${PHPMODULES}
			fi
		fi
		
		if [ "${HAVE_CLI}" = "no" ]; then
			if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP1_RELEASE}" = "5.5" ]; then
				perl -pi -e 's/^LoadModule php4/\#LoadModule php4/' /etc/httpd/conf/httpd.conf
				perl -pi -e 's/^LoadModule php5/\#LoadModule php5/' /etc/httpd/conf/httpd.conf
			fi
		fi
		
		if [ "${HAVE_FPM_CGI}" = "yes" ]; then
			doFastcgiConf;
			if [ -e ${PHPMODULES} ]; then
				COUNT="`grep -c 'fastcgi_module' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					perl -pi -e 's|^LoadModule	fastcgi_module|#LoadModule	fastcgi_module|' /etc/httpd/conf/httpd.conf
					echo "LoadModule fastcgi_module /usr/lib/apache/mod_fastcgi.so" >> ${PHPMODULES}
				fi
				COUNT="`grep -c 'httpd-fastcgi.conf' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					echo "Include /etc/httpd/conf/extra/httpd-fastcgi.conf" >> ${PHPMODULES}
				fi
			fi
		fi

		if [ "${HAVE_FCGID}" = "yes" ]; then
			if [ -e ${PHPMODULES} ]; then
				COUNT="`grep -c 'fcgid_module' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					perl -pi -e 's|^LoadModule	fcgid_module|#LoadModule	fcgid_module|' /etc/httpd/conf/httpd.conf
					echo "LoadModule fcgid_module /usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
				fi
				COUNT="`grep -c 'httpd-fcgid.conf' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
				fi
			fi
			
			if [ ! -d /usr/local/safe-bin ]; then
				mkdir -p /usr/local/safe-bin
				chmod 511 /usr/local/safe-bin
				chown apache:apache /usr/local/safe-bin
			fi
			
			if [ "${HAVE_FCGID53}" = "yes" ]; then
				cp -f ${CWD}/configure/fastcgi/fcgid53.sh /usr/local/safe-bin/fcgid53.sh
				if [ -e ${CWD}/custom/fastcgi/fcgid53.sh ]; then
					cp -f ${CWD}/custom/fastcgi/fcgid53.sh /usr/local/safe-bin/fcgid53.sh
				fi
				chown apache:apache /usr/local/safe-bin/fcgid53.sh
				chmod 555 /usr/local/safe-bin/fcgid53.sh
			fi
			
			if [ "${HAVE_FCGID54}" = "yes" ]; then
				cp -f ${CWD}/configure/fastcgi/fcgid54.sh /usr/local/safe-bin/fcgid54.sh
				if [ -e ${CWD}/custom/fastcgi/fcgid54.sh ]; then
					cp -f ${CWD}/custom/fastcgi/fcgid54.sh /usr/local/safe-bin/fcgid54.sh
				fi
				chown apache:apache /usr/local/safe-bin/fcgid54.sh
				chmod 555 /usr/local/safe-bin/fcgid54.sh
			fi
			
			if [ "${HAVE_FCGID55}" = "yes" ]; then
				cp -f ${CWD}/configure/fastcgi/fcgid55.sh /usr/local/safe-bin/fcgid55.sh
				if [ -e ${CWD}/custom/fastcgi/fcgid55.sh ]; then
					cp -f ${CWD}/custom/fastcgi/fcgid55.sh /usr/local/safe-bin/fcgid55.sh
				fi
				chown apache:apache /usr/local/safe-bin/fcgid55.sh
				chmod 555 /usr/local/safe-bin/fcgid55.sh
			fi
			
		fi
		
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			if [ -e ${PHPMODULES} ]; then
				COUNT="`grep -c 'suphp_module' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
				fi
			fi
		fi
		
		if [ "${NEWCONFIGS}" = "1" ]; then
		perl -pi -e 's/^LoadModule mod_php/\#LoadModule mod_php/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule php/\#LoadModule php/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule suphp/\#LoadModule suphp/' /etc/httpd/conf/httpd.conf
		fi
		
		WEBMAILLINK=`get_webmail_link`
		perl -pi -e "s#Alias /webmail \"/var/www/html/roundcube/\"#Alias /webmail \"/var/www/html/${WEBMAILLINK}/\"#" /etc/httpd/conf/extra/httpd-alias.conf

		doPhpConf;
		

		echo "Restarting apache."
		${INITDDIR}/httpd restart
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
	
		#copy the new configs
		cp -rf ${NGINXCONFDIR}/* ${NGINXCONF}
		
		tokenize_IP;
		
		perl -pi -e "s|/usr/local/php53/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
		perl -pi -e "s|/usr/local/php54/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
		perl -pi -e "s|/usr/local/php55/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
		
		do_rewrite_nginx_webapps
		
		#rewrite ips.conf
		echo "action=rewrite&value=nginx" >> ${TASK_QUEUE}
		echo "action=rewrite&value=ips" >> ${TASK_QUEUE}

		/usr/local/directadmin/dataskq --custombuild

		#add all the Include lines if they do not exist
		if [ "`grep -c 'Include' ${NGINXCONF}/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${NGINXCONF}/directadmin-vhosts.conf ]; then
			doVhosts;
		fi
	
		if [ ! -e ${NGINXCONF}/directadmin-settings.conf ]; then
			touch ${NGINXCONF}/directadmin-settings.conf
		fi
		
		if [ ! -e ${NGINXCONF}/directadmin-ips.conf ]; then
			touch ${NGINXCONF}/directadmin-ips.conf
		fi
	
		if [ ! -e ${NGINXCONF}/nginx-includes.conf ]; then
			touch ${NGINXCONF}/nginx-includes.conf
		fi
	
		doPhpConf;
		
		if [ "${NGINXCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${NGINXCUSTOMCONFDIR}/* ${NGINXCONF}/
		fi
		
		echo "Restarting nginx."
		${INITDDIR}/nginx restart
	fi
	
	removeLockfile;
}

####################################################

doCron() {
	cd ${CWD}

        if [ "$OS" = "FreeBSD" ]; then
                CRONFILE=$WORKDIR/cronfile
        else
                CRONFILE=/etc/cron.${CRON_FREQUENCY_OPT}/custombuild
        
		#remove bits which may exist.
		rm -f /etc/cron.daily/custombuild
		rm -f /etc/cron.weekly/custombuild
		rm -f /etc/cron.monthly/custombuild
        fi

        if [ "${CRON_OPT}" != "yes" ]; then
                echo "You cannot run cronjob, because you do not have it set in options.conf file.";
                rm -f ${CRONFILE}

                if [ "$OS" = "FreeBSD" ]; then
                        COUNT=`grep -c $CRONFILE /etc/crontab`;
                        if [ "$COUNT" -gt 0 ]; then
                                grep -v $CRONFILE /etc/crontab > /etc/crontab.tmp
                                if [ ! -s /etc/crontab.tmp ]; then
                                        echo "/etc/crontab.tmp doesn't exist or is size 0. Aborting";
                                        exit 3;
                                fi

                                mv -f /etc/crontab.tmp /etc/crontab
                                chmod 644 /etc/crontab
                        fi
                fi
                exit 1;
        fi

        if [ "$OS" = "FreeBSD" ]; then
                if [ ! -e /etc/crontab ]; then
                        echo "You cannot run cronjob, because you do not have /etc/crontab.";
                fi
        elif [ ! -d /etc/cron.${CRON_FREQUENCY_OPT} ]; then
                echo "You cannot run cronjob, because you do not have /etc/cron.${CRON_FREQUENCY_OPT} directory.";
                exit 1;
        fi
	
	echo -n '' > ${CRONFILE}
	echo '#!/bin/sh'	>> ${CRONFILE}
	echo 'cd /usr/local/directadmin/custombuild' >> ${CRONFILE}
	echo './build update >/dev/null 2>&1' >> ${CRONFILE}
	echo "AVAIL_UPDATES=\"\`./build versions_nobold | grep -c -e 'update is available.'\`\"" >> ${CRONFILE}

	echo 'if [ "${AVAIL_UPDATES}" -gt 0 ]; then' >> ${CRONFILE}
	if [ "${NOTIFICATIONS_OPT}" = "yes" ] && [ "${UPDATES_OPT}" = "no" ]; then
		echo "./build versions_nobold | grep 'update is available.' | mail -s \"\${AVAIL_UPDATES} updates available for \`hostname\`\" ${EMAIL_OPT}" >> ${CRONFILE}
	fi
	if [ "${NOTIFICATIONS_OPT}" = "yes" ] && [ "${UPDATES_OPT}" = "yes" ]; then
		echo "./build versions_nobold | grep 'update is available.' | mail -s \"\${AVAIL_UPDATES} updates running for \`hostname\`\" ${EMAIL_OPT}" >> ${CRONFILE}
	fi
	if [ "${UPDATES_OPT}" = "yes" ]; then
		echo './build update_versions' >> ${CRONFILE}
	fi
	if [ "${UPDATES_OPT}" = "no" ] && [ "${DA_AUTOUPDATE_OPT}" = "yes" ]; then
		echo './build update_da' >> ${CRONFILE}
	fi
	if [ "${UPDATES_OPT}" = "no" ] && [ "${WEBAPPS_UPDATES_OPT}" = "yes" ]; then
		echo './build update_webapps' >> ${CRONFILE}
	fi
	echo 'fi' >> ${CRONFILE}
	echo 'exit 0;' >> ${CRONFILE}
	chmod 755 ${CRONFILE}

	#for freebsd, we have to add it to /etc/crontab
	if [ "$OS" = "FreeBSD" ]; then
		COUNT=`grep -c $CRONFILE /etc/crontab`;
		if [ "$COUNT" -ge 1 ]; then
			cp -f /etc/crontab /etc/crontab.back
			STR="perl -pi -e 's#.*${CRONFILE}\n##' /etc/crontab"
			eval $STR
		fi
		if [ "${CRON_FREQUENCY_OPT}" = "daily" ]; then
			echo "02 4 * * * root $CRONFILE" >> /etc/crontab
		elif [ "${CRON_FREQUENCY_OPT}" = "weekly" ]; then
			echo "02 4 * * 0 root $CRONFILE" >> /etc/crontab
		elif [ "${CRON_FREQUENCY_OPT}" = "monthly" ]; then
			echo "02 4  1 * * root $CRONFILE" >> /etc/crontab
		fi                
	fi
	
	echo "Cronjob is set for ${EMAIL_OPT}:"
	echo "Cronjob frequncy: ${CRON_FREQUENCY_OPT}"
	echo "Automatic notifications: ${NOTIFICATIONS_OPT}"
	echo "Automatic updates: ${UPDATES_OPT}"
}

####################################################

updateDovecot() {
	cd ${CWD}
	getFile dovecot-${DOVECOT_VER}.tar.gz dovecot
	getFile dovecot.boot
	getFile dovecot.boot.freebsd
	getFile dovecot.boot.debian
	getFile dovecot.conf
	getFile exim.conf.dovecot.patch eximdovecotpatch
}

####################################################

doUpdateData() {
	cd ${CWD}

	getFile servers.txt servers

	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		getFile nginx-${NGINX_VER}.tar.gz nginx
		getFile nginx.boot
		getFile nginx.boot.freebsd
		getFile nginx.boot.debian	
	else
		getFile httpd-${APACHE2_VER}.tar.gz apache${APACHE_OPT}
		getFile apr-${APR_VER}.tar.gz apr
		getFile apr-util-${APR_UTIL_VER}.tar.gz apr-util
		getFile httpd_2
		getFile httpd_2_freebsd
		getFile httpd_2_debian	
	fi

	if [ "${HAVE_FCGID}" = "yes" ]; then
		getFile mod_fcgid-${MOD_FCGID_VER}.tar.gz mod_fcgid
		getFile fcgid.sh fcgid_sh
	fi

	getFile curl-${CURL_VER}.tar.gz curl

	if [ "$NEW_PCRE_OPT" = "yes" ]; then
		getFile pcre-${PCRE_VER}.tar.gz pcre_current
	else
		getFile pcre-${PCRE_VER}.tar.gz pcre
	fi

	getFile libmcrypt-${MCRYPT_VER}.tar.gz mcrypt
	getFile mhash-${MHASH_VER}.tar.gz mhash
	getFile freetype-${FREETYPE_VER}.tar.gz freetype
	getFile libiconv-${ICONV_VER}.tar.gz iconv
	if [ "$NEW_ZLIB_OPT" = "yes" ] || [ "$NEW_XML2_OPT" = "yes" ]; then
		getFile libxml2-${LIBXML2_VER}.tar.gz libxml2-current
	else
		getFile libxml2-${LIBXML2_VER}.tar.gz libxml2
	fi
	getFile libxslt-${LIBXSLT_VER}.tar.gz libxslt
	getFile icu4c-${ICU_VER}-src.tgz icu4c
#	getFile libevent-${LIBEVENT_VER}.tar.gz libevent

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		getFile Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz spamassassin
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		getFile clamav-${CLAMAV_VER}.tar.gz clamav
	fi
	
# Mailman is not yet supported
#	if [ "${MAILMAN_OPT}" = "yes" ]; then
#		getFile mailman-${MAILMAN_VER}.tgz mailman
#	fi
	
	getFile ${WEBALIZER_FILE} webalizer
	if [ "${FTPD_OPT}" = "proftpd" ]; then
		getFile proftpd-${PROFTPD_VER}.tar.gz proftpd
		getFile proftpd
		getFile proftpd_freebsd
		getFile proftpd_debian
	fi
	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		getFile pure-ftpd-${PUREFTPD_VER}.tar.gz pureftpd
		getFile pure-ftpd
		getFile pure-ftpd_freebsd
		getFile pure-ftpd_debian
	fi
	
	if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP2_RELEASE}" = "5.3" ]; then
		getFile php-${PHP53_VER}.tar.gz php53
		if [ "${ZEND_OPT}" = "yes" ]; then
			getFile ${ZENDFILE_GUARD53}
		fi
	fi

	if [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP2_RELEASE}" = "5.4" ]; then
		getFile php-${PHP54_VER}.tar.gz php54
		if [ "${ZEND_OPT}" = "yes" ]; then
			getFile ${ZENDFILE_GUARD54}
		fi
	fi
	
	if [ "${PHP1_RELEASE}" = "5.5" ] || [ "${PHP2_RELEASE}" = "5.5" ]; then
		getFile php-${PHP55_VER}.tar.gz php55
	fi

	if [ "$NEW_SUPHP_OPT" = "yes" ]; then
		getFile suphp-${SUPHP_VER}.tar.gz suphp_current
	else
		getFile suphp-${SUPHP_VER}.tar.gz suphp
	fi

	if [ "${EXIM_OPT}" = "yes" ]; then
		getFile exim-${EXIM_VER}.tar.gz exim
		getFile exim
		getFile exim_freebsd
		getFile exim_debian
	fi
	if [ "${DOVECOT_OPT}" = "yes" ]; then
		updateDovecot;
	fi
	getFile autoconf-${AUTOCONF_VER}.tar.gz autoconf
	getFile automake-${AUTOMAKE_VER}.tar.gz automake
	getFile m4-${M4_VER}.tar.gz m4
	getFile libtool-${LIBTOOL_VER}.tar.gz libtool
	
	if [ "${IONCUBE_OPT}" = "yes" ]; then
		getFile ${IONCUBEFILE} ${IONCUBENAME}
	fi
	
	if [ "${JAIL_OPT}" = "yes" ]; then
		getFile jail-${JAIL_VER}.tar.gz jail
		tar xzf jail-${JAIL_VER}.tar.gz --no-same-owner
		
		getFile nbsmtp-${NB_SMTP_VER}.tar.gz
		getFile coreutils-${COREUTILS_VER}.tar.gz
	fi
}
####################################################

doExtensions() {
	DO_EXT_SKIP_RESTART=0
	if [ "$1" = "1" ]; then
		DO_EXT_SKIP_RESTART=1
	fi

	#We do comment out ioncube/zend from the old php.ini file only, because old configs cannot exist
	if [ -e ${PHP_INI} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI}
	fi
	
	if [ -e ${PHP_INI_FPM53} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI_FPM53}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI_FPM53}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI_FPM53}
	fi
	if [ -e ${PHP_INI_FPM54} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI_FPM54}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI_FPM54}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI_FPM54}
	fi
	if [ -e ${PHP_INI_FPM55} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI_FPM55}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI_FPM55}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI_FPM55}
	fi
	
	if [ -e ${PHP_INI_SUPHP53} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI_SUPHP53}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI_SUPHP53}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI_SUPHP53}
	fi
	if [ -e ${PHP_INI_SUPHP54} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI_SUPHP54}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI_SUPHP54}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI_SUPHP54}
	fi
	if [ -e ${PHP_INI_SUPHP55} ]; then
		perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${PHP_INI_SUPHP55}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${PHP_INI_SUPHP55}
		perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${PHP_INI_SUPHP55}
	fi
	
	if [ -d /usr/local/lib ]; then
		mkdir -p /usr/local/lib/php.conf.d
	fi
	if [ -d /usr/local/php53 ]; then
		mkdir -p /usr/local/php53/lib/php.conf.d
	fi
	if [ -d /usr/local/php54 ]; then
		mkdir -p /usr/local/php54/lib/php.conf.d
	fi
	if [ -d /usr/local/php55 ]; then
		mkdir -p /usr/local/php55/lib/php.conf.d
	fi
	#Make extensions files empty
	echo -n '' > ${PHP_EXT}
	if [ -d /usr/local/php53/lib/php.conf.d ]; then
		echo -n '' > ${PHP_EXT_FPM53}
	fi
	if [ -d /usr/local/php54/lib/php.conf.d ]; then
		echo -n '' > ${PHP_EXT_FPM54}
	fi
	if [ -d /usr/local/php55/lib/php.conf.d ]; then
		echo -n '' > ${PHP_EXT_FPM55}
	fi

    if [ "${HTSCANNER_OPT}" = "yes" ]; then
	if [ "${HAVE_CLI}" = no ]; then
		#We only need to do that for non mod_php php.ini files
		if [ -e ${PHP_EXT_FPM53} ]; then
			echo "extension=htscanner.so" >> ${PHP_EXT_FPM53}
		fi
		if [ -e ${PHP_EXT_FPM54} ]; then
			echo "extension=htscanner.so" >> ${PHP_EXT_FPM54}
		fi
		if [ -e ${PHP_EXT_FPM55} ]; then
			echo "extension=htscanner.so" >> ${PHP_EXT_FPM55}
		fi

		echo "htscanner PHP extension has been installed."
	fi
    fi
    if [ "${IONCUBE_OPT}" = "yes" ]; then
		OS_EXT=lin
		
		if [ "$OS" = "FreeBSD" ]; then
			OS_EXT=fre
		fi
		if [ "${PHP1_MODE}" = "mod_php" ]; then
		    echo "zend_extension=/usr/local/lib/ioncube/ioncube_loader_${OS_EXT}_${PHP1_RELEASE}.so" >> ${PHP_EXT}
		elif [ "${PHP2_MODE}" = "mod_php" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		    echo "zend_extension=/usr/local/lib/ioncube/ioncube_loader_${OS_EXT}_${PHP2_RELEASE}.so" >> ${PHP_EXT}
		fi
		#It's the same path for PHP_EXT_SUPHP
		if [ -e ${PHP_EXT_FPM53} ]; then
			echo "zend_extension=/usr/local/lib/ioncube/ioncube_loader_${OS_EXT}_5.3.so" >> ${PHP_EXT_FPM53}
		fi
		if [ -e ${PHP_EXT_FPM54} ]; then
			echo "zend_extension=/usr/local/lib/ioncube/ioncube_loader_${OS_EXT}_5.4.so" >> ${PHP_EXT_FPM54}
		fi
		if [ -e ${PHP_EXT_FPM55} ]; then
			echo "zend_extension=/usr/local/lib/ioncube/ioncube_loader_${OS_EXT}_5.5.so" >> ${PHP_EXT_FPM55}
		fi

		echo "ionCube loader has been installed."
    fi
    if [ "${ZEND_OPT}" = "yes" ]; then
		if [ "$OS" = "FreeBSD" ]; then
			if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP1_RELEASE}" = "5.5" ]; then
				echo "Zend Guard loader does not support FreeBSD."
			fi
		else
			if [ "${PHP1_MODE}" = "mod_php" ]; then
				if [ "${PHP1_RELEASE}" = "5.3" ]; then
					echo 'zend_extension=/usr/local/lib/ZendGuardLoader5.3.so' >> ${PHP_EXT}
				elif [ "${PHP1_RELEASE}" = "5.4" ]; then
					echo 'zend_extension=/usr/local/lib/ZendGuardLoader5.4.so' >> ${PHP_EXT}
				elif [ "${PHP1_RELEASE}" = "5.5" ];then
					echo "There is no Zend Guard Loader released for PHP 5.5 yet. Please try again later."
				fi
			elif [ "${PHP2_MODE}" = "mod_php" ] && [ "${PHP2_RELEASE}" != "no" ]; then
				if [ "${PHP2_RELEASE}" = "5.3" ]; then
					echo 'zend_extension=/usr/local/lib/ZendGuardLoader5.3.so' >> ${PHP_EXT}
				elif [ "${PHP2_RELEASE}" = "5.4" ]; then
					echo 'zend_extension=/usr/local/lib/ZendGuardLoader5.4.so' >> ${PHP_EXT}
				elif [ "${PHP2_RELEASE}" = "5.5" ]; then
					echo "There is no Zend Guard Loader released for PHP 5.5 yet. Please try again later."
				fi
			fi
			#It's the same path for PHP_EXT_SUPHP
			if [ -e ${PHP_EXT_FPM53} ]; then
				echo 'zend_extension=/usr/local/lib/ZendGuardLoader5.3.so' >> ${PHP_EXT_FPM53}
			fi
			if [ -e ${PHP_EXT_FPM54} ]; then
				echo 'zend_extension=/usr/local/lib/ZendGuardLoader5.4.so' >> ${PHP_EXT_FPM54}
			fi
			if [ -e ${PHP_EXT_FPM55} ]; then
				echo "There is no Zend Guard Loader released for 5.5 yet. Please try again later."
			fi
		fi
	fi
	
	cagefsctl_update;
	
	if [ "${DO_EXT_SKIP_RESTART}" -eq 1 ]; then
		return;
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		${INITDDIR}/nginx restart
	else
		${INITDDIR}/httpd restart
	fi
	
	if [ "${PHP1_MODE}" = "php-fpm" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ]; then
			echo "Restarting php-fpm53."
			${INITDDIR}/php-fpm53 restart
		elif [ "${PHP1_RELEASE}" = "5.4" ]; then
			echo "Restarting php-fpm54."
			${INITDDIR}/php-fpm54 restart
		elif [ "${PHP1_RELEASE}" = "5.5" ]; then
			echo "Restarting php-fpm55."
			${INITDDIR}/php-fpm55 restart
		fi
	fi
	if [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		if [ "${PHP2_RELEASE}" = "5.3" ]; then
			echo "Restarting php-fpm53."
			${INITDDIR}/php-fpm53 restart
		elif [ "${PHP2_RELEASE}" = "5.4" ]; then
			echo "Restarting php-fpm54."
			${INITDDIR}/php-fpm54 restart
		elif [ "${PHP2_RELEASE}" = "5.5" ]; then
			echo "Restarting php-fpm55."
			${INITDDIR}/php-fpm55 restart
		fi
	fi
}

####################################################

doPHPHtscanner() {
	if [ "${HAVE_CLI}" = "no" ]; then
		cd ${CWD};
		if [ "${HTSCANNER_OPT}" = "no" ]; then
			echo "Cannot build htscanner, because you do not have it set in options.conf file."
			exit 1;
		fi
		if [ $1 = "" ]; then
			return;
		fi
		getFile htscanner-${HTSCANNER_VER}.tgz htscanner
		
		FILE=${CWD}/htscanner-${HTSCANNER_VER}.tgz
		checkFile ${FILE};
		echo "Extracting ${FILE}...";
		
		tar xzf ${FILE}
		cd htscanner-${HTSCANNER_VER}
		
		echo "Installing htscanner2-${HTSCANNER_VER} PHP extension for $1...";

		/usr/local/php$1/bin/phpize
		./configure --enable-htscanner --with-php-config=/usr/local/php$1/bin/php-config
		while
		echo "Trying to make htscanner2-${HTSCANNER_VER}  PHP extension..."
		do
		{
			make

			if [ $? -ne 0 ]
			then
				if [ ${USER_INPUT} -eq 1 ]; then
					$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]
				then
					do_exit 0;
				fi
			else
				break;
			fi
		}
		done;
		echo "Make complete";
		echo "Installing htscanner2-${HTSCANNER_VER}  PHP extension...";
		make install
		
		make clean;

		echo "htscanner2 PHP extension has been installed successfully.";

		cd ${CWD};
	fi
}

####################################################

doZend() {
	cd ${CWD};

	if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP2_RELEASE}" = "5.3" ]; then
		getFile ${ZENDFILE_GUARD53}
	fi
	if [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP2_RELEASE}" = "5.4" ]; then
		getFile ${ZENDFILE_GUARD54}
	fi
	
	if [ "${ZEND_OPT}" != "yes" ]; then
		echo "You cannot install Zend Guard Loader, because you do not have it set in the options.conf file.";
		exit 1;
	fi

	if [ "$OS" = "FreeBSD" ]; then
		echo "Zend Guard loader does not support FreeBSD."
	else
		cd ${CWD};
		if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP2_RELEASE}" = "5.3" ]; then
			tar xzf ${ZENDFILE_GUARD53} --no-same-owner
			cp -fp ${ZENDNAME_PHP53}/php-5.3.x/ZendGuardLoader.so /usr/local/lib/ZendGuardLoader5.3.so
			chmod 755 /usr/local/lib/ZendGuardLoader5.3.so
			chown root:${ROOT_GRP} /usr/local/lib/ZendGuardLoader5.3.so
		fi
		if [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP2_RELEASE}" = "5.4" ]; then
			tar xzf ${ZENDFILE_GUARD54} --no-same-owner
			cp -fp ${ZENDNAME_PHP54}/php-5.4.x/ZendGuardLoader.so /usr/local/lib/ZendGuardLoader5.4.so
			chmod 755 /usr/local/lib/ZendGuardLoader5.4.so
			chown root:${ROOT_GRP} /usr/local/lib/ZendGuardLoader5.4.so
		fi
		if [ "${PHP1_RELEASE}" = "5.5" ] || [ "${PHP2_RELEASE}" = "5.5" ]; then
			echo "PHP 5.5 is not supported yet by Zend Guard Loader."
		fi
		doExtensions;
		echo "Zend Guard Loader has been installed."
	fi
}

####################################################

doIoncube() {
	cd ${CWD};

	getFile ${IONCUBEFILE}
	if [ "${IONCUBE_OPT}" != "yes" ]; then
		echo "You cannot install ionCube loader, because you do not have it set in options.conf file.";
		exit 1;
	fi

	tar xzf ${IONCUBEFILE} --no-same-owner

	if [ -d ioncube ]; then
		chown -R root:${ROOT_GRP} ioncube
	fi

	if [ -d /usr/local/lib/ioncube ]; then
	  rm -rf /usr/local/lib/ioncube
	fi
	mv -f ioncube /usr/local/lib/
	
    doExtensions;	
}

####################################################
#Not needed anymore (from PHP 5.3.3)
#doLibevent() {
#	getFile libevent-${LIBEVENT_VER}.tar.gz libevent
#	quitIfLocked doLibevent
#	
#        cd ${CWD};
#        FILE=${CWD}/libevent-${LIBEVENT_VER}.tar.gz
#        checkFile ${FILE}
#        echo "Extracting ...";
#        tar xzf ${FILE} --no-same-owner
#        echo "Done.";
#        cd libevent-${LIBEVENT_VER}
#        echo "Configuring libevent-${LIBEVENT_VER}...";
#		./configure
#        echo "Done. Making libevent-${LIBEVENT_VER}...";
#        while
#        echo "Trying to make libevent..."
#        do
#        {
#                make -j ${CPU_CORES}
#
#                if [ $? -ne 0 ]
#                then
#			if [ ${USER_INPUT} -eq 1 ]; then
#	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
#        	                read yesno;
#                	        echo "";
#                        else
#                                if [ "${INPUT_VALUE}" = "d" ]; then
#                                        yesno=n
#                                else
#                                        yesno=${INPUT_VALUE}
#                                fi
#                        fi
#
#                        if [ "${yesno}" = "n" ]
#                        then
#                                do_exit 0;
#                        fi
#                else
#                        break;
#                fi
#        }
#        done
#        echo "Make complete";
#        echo "Installing libevent-${LIBEVENT_VER}...";
#        make install
#        echo "Done libevent.";
#		removeLockfile
#        cd ${CWD}
#
#	/sbin/ldconfig
#}

####################################################

doLibJpeg() {

        cd ${CWD};
        getFile ${JPEGFILE}
        tar xzf ${JPEGFILE} --no-same-owner
        cd ${JPEGDIR}

	./configure

        while
        echo "Trying to make libjpeg..."
        do
        {
                make CFLAGS=-fpic libjpeg.a

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

	make install-lib
}

####################################################

doZlib() {
	if [ "${ZLIB_OPT}" != "yes" ]; then
		echo "You cannot install zlib from source, because you do not have it set in options.conf file.";
		echo "Either set zlib=yes in your options.conf, or install it via your package manager.";
		do_exit 1;
	fi
	quitIfLocked doZlib
	
        cd ${CWD};
	if [ "$NEW_ZLIB_OPT" = "yes" ]; then
		getFile zlib-${ZLIB_VER}.tar.gz zlib-current
	else
		getFile zlib-${ZLIB_VER}.tar.gz zlib
	fi
        tar xzf zlib-${ZLIB_VER}.tar.gz --no-same-owner
        cd zlib-${ZLIB_VER}

        ./configure --shared

        while
        echo "Trying to make libz..."
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

        make install
	removeLockfile

	cd ${CWD};
	cagefsctl_update;
}

####################################################

doLibPng() {
	quitIfLocked doLibPng
	
        cd ${CWD};

	if [ "${B64}" = "1" ]; then
		getFile libpng-${PNG_VER}.tar.gz libpng64
	else
		getFile libpng-${PNG_VER}.tar.gz libpng
	fi

        tar xzf libpng-${PNG_VER}.tar.gz --no-same-owner
        cd libpng-${PNG_VER}

	   ./configure --prefix=/usr/local

        while
        echo "Trying to make libpng"
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

	mkdir -p /usr/local/include/libpng >/dev/null 2>&1

        make install
	removeLockfile
	cagefsctl_update;
}

####################################################

convert() {
	#delete old modules
	#backup httpd.conf
	#copy httpd.conf ssl.conf
	#insert all Include lines
	#tokenize the |IP|
	
	cd ${CWD}
	
	rm -rf /usr/lib/apache/*
	if [ "`grep -c 'Port 80' /etc/httpd/conf/httpd.conf`" = "1" ]; then
		mv -f ${HTTPDCONF} ${HTTPDCONF}.1.3.backup
		if [ ! -e ${APCONFDIR}/httpd.conf ]; then
			do_exit 1 "cannot find httpd.conf in ${APCONFDIR} directory";
		fi
		if [ ! -e ${APCONFDIR}/extra/httpd-ssl.conf ]; then
			do_exit 1 "cannot find ssl.conf in the ${NAME} directory";
		fi

		cp -rf ${APCONFDIR} ${HTTPDDIR}
		cp -rf ${HTTPDCONF}.1.3.backup/ssl.key ${HTTPDCONF}
		cp -rf ${HTTPDCONF}.1.3.backup/ssl.crt ${HTTPDCONF}

		cp -f ${APCONFDIR}/httpd.conf ${HTTPD_CONF}
		cp -f ${APCONFDIR}/extra/httpd-mpm.conf ${HTTPDCONF}/extra/httpd-mpm.conf
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi

		#tokenize the IP
		tokenize_IP

		#add all the Include lines
		doVhosts;

		cd ${CWD}

		#check directadmin.conf file
		if [ "`grep -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_FILE}`" = "1" ]; then
			perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_FILE}
			doRestartDA;
		fi
		if [ "`grep -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_TEMPLATE_FILE}`" = "1" ]; then
			perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_TEMPLATE_FILE}
		fi

		if [ "${OS}" = "FreeBSD" ]; then
			cp -f httpd_2_freebsd /usr/local/etc/rc.d/httpd
			chmod 755 /usr/local/etc/rc.d/httpd
		else
			if [ -e /etc/debian_version ]; then
				cp -f httpd_2_debian /etc/init.d/httpd
			else
				cp -f httpd_2 /etc/init.d/httpd
			fi

			chmod 755 /etc/init.d/httpd
			/sbin/chkconfig httpd on
		fi

		perl -pi -e 's/`grep apache_ver= ${DACONF_FILE}`/apache_ver=2.0/' ${DACONF_FILE}
		perl -pi -e 's/`grep apache_ver= ${DACONF_TEMPLATE_FILE}`/apache_ver=2.0/' ${DACONF_TEMPLATE_FILE}
		doRestartDA;
		echo "action=rewrite&value=ips" >> ${TASK_QUEUE}
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		echo "action=directadmin&value=restart" >> ${TASK_QUEUE}
		/usr/local/directadmin/dataskq --custombuild
	else
		echo "$HTTPD_CONF seems to already be converted";
	fi
}

####################################################

doApache2() {
	if [ "${WEBSERVER_OPT}" != "apache" ]; then
		echo "You cannot install Apache, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	getFile httpd-${APACHE2_VER}.tar.gz apache${APACHE_OPT}
	if [ "${APACHE_OPT}" = "2.4" ]; then
		getFile apr-${APR_VER}.tar.gz apr
		getFile apr-util-${APR_UTIL_VER}.tar.gz apr-util
		getFile patches/apache_proxy_socket.patch apache_proxy_socket
		getFile patches/apache_proxy_socket_slash_encoding.patch apache_proxy_socket_slash_encoding
		getFile patches/suexec-safe.patch apache_suexec_safe
	fi
	
	getFile httpd_2
	getFile httpd_2_freebsd
	getFile httpd_2_debian
	quitIfLocked doApache2
	
	if [ "${MOD_RUID2_OPT}" = "yes" ]; then
		if [ ! -e /lib/libcap.so ] && [ ! -e /lib64/libcap.so ] && [ ! -e /lib/x86_64-linux-gnu/libcap.so ] && [ ! -e /lib/i386-linux-gnu/libcap.so ]; then
			echo "Cannot find libcap.so.  Please install libcap";
			if [ -e /etc/debian_version ]; then
				echo "apt-get install libcap-dev";
			else
				echo "yum -y install libcap-devel";
			fi
			removeLockfile
			return;
		fi
	fi
	
	if [ ! -e /usr/bin/bzip2 ] && [ ! -e /bin/bzip2 ]; then
		echo "Cannot find bzip2. Please install it.";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install bzip2";
		else
			echo "yum -y install bzip2";
		fi
		return;
	fi
	
	#if [ "${DACONF_APACHE_VER}" = "1.3" ]; then
	if [ -e /etc/httpd/conf/httpd.conf ]; then
		if [ "`grep -c 'ServerType standalone' /etc/httpd/conf/httpd.conf`" -ne 0 ]; then
			convert;
		fi
	fi

	ADMNHTTP=/usr/local/directadmin/data/users/admin/httpd.conf
	if [ ! -e ${ADMNHTTP} ]; then
		echo -n "" > ${ADMNHTTP}
		chown diradmin:admin ${ADMNHTTP}
		chmod 640 ${ADMNHTTP}
	fi

	set64;

	if [ ! -e /usr/local/bin/pcre-config ]; then
		removeLockfile
		doPCRE;
		
	fi

	addUserGroup apache apache
	backupHttp;
	cd ${CWD};
	FILE=${CWD}/httpd-${APACHE2_VER}.tar.gz

	checkFile ${FILE};

	echo "Extracting ${FILE}...";
	tar xzf ${FILE} --no-same-owner
	
	if [ "${APACHE_OPT}" = "2.4" ]; then
		FILE2=${CWD}/apr-${APR_VER}.tar.gz
		checkFile ${FILE2};
		echo "Extracting ${FILE2}...";
		tar xzf ${FILE2} --no-same-owner -C ${CWD}/httpd-${APACHE2_VER}/srclib
		if [ -d ${CWD}/httpd-${APACHE2_VER}/srclib/apr ]; then
			rm -rf ${CWD}/httpd-${APACHE2_VER}/srclib/apr
		fi
		mv -f ${CWD}/httpd-${APACHE2_VER}/srclib/apr-${APR_VER} ${CWD}/httpd-${APACHE2_VER}/srclib/apr
		
		FILE3=${CWD}/apr-util-${APR_UTIL_VER}.tar.gz
		checkFile ${FILE3};
		echo "Extracting ${FILE3}...";
		tar xzf ${FILE3} --no-same-owner -C ${CWD}/httpd-${APACHE2_VER}/srclib
		if [ -d ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util ]; then
			rm -rf ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util
		fi
		mv -f ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util-${APR_UTIL_VER} ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util
	fi

	if [ "$HARDEN_SYMLINK_PATCH" = "yes" ]; then
		if [ "${APACHE_OPT}" = "2.4" ]; then
			PATCH_NAME=harden-symlinks-2.4.patch
			getFile ${PATCH_NAME} ${PATCH_NAME}
		else
			PATCH_NAME=harden-symlinks.patch.${APACHE2_VER}
			getFile ${PATCH_NAME} harden-symlinks-patch
		fi
		
		if [ -s ${PATCH_NAME} ]; then
			echo "Patching apache for hardened symlinks patch...";
			if [ "${APACHE_OPT}" = "2.4" ]; then
				cd httpd-${APACHE2_VER}
				patch -p0 < ../${PATCH_NAME}
				cd ..
			else	
				patch -p0 < ${PATCH_NAME}
			fi
		else
			echo "Cannot find ${PATCH_NAME} to for hardened symlinks patch.";
		fi
	fi

	cd httpd-${APACHE2_VER}

	echo "Patching apache to support sockets in fcgid proxy...";
	if [ ! -s ../patches/apache_proxy_socket.patch ]; then
		echo "Error with patches/apache_proxy_socket.patch. File is missing or empty";
	else
		patch -p1 < ../patches/apache_proxy_socket.patch
	fi

	echo "Patching apache to fix / decoding...";
	if [ ! -s ../patches/apache_proxy_socket.patch ]; then
		echo "Error with patches/apache_proxy_socket_slash_encoding.patch. File is missing or empty";
	else
		patch -p1 < ../patches/apache_proxy_socket_slash_encoding.patch
	fi

	if [ "${CLINUX_OPT}" = "no" ]; then
		echo "Patching apache to suexec safedir path...";
		if [ ! -s ../patches/suexec-safe.patch ]; then
			echo "Error with patches/suexec-safe.patch. File is missing or empty";
		else
			patch -p1 < ../patches/suexec-safe.patch
		fi
	fi
	
	if [ "${CLINUX_OPT}" = "yes" ]; then
		patch -p1 < ../apr-2.4-httpd.1.patch
		patch -p1 < ../suexec_safe_bin.patch
	fi
	setFDSETSIZE

	#configure
	echo "Configuring httpd-${APACHE2_VER}";
	rm -f configure
	./buildconf --force
	${CWD}/${APACHE2_CONFIGURE};
        if [ $? -ne 0 ]
        then
                $ECHO -e "\n*** There was an error while trying to configure Apache 2. Check the ${APACHE2_CONFIGURE} file\n";
                do_exit 1;
        fi
	echo "Done Configuration.";

	echo "increasing FD_SETSIZE in os/tpf/os.h ..";
	if [ -e ./os/tpf/os.h ]; then
			#perl -pi -e 's/FD_SETSIZE.*2048/FD_SETSIZE 32768/' ./os/tpf/os.h
			perl -pi -e 's/\#define FD_SETSIZE.*2048/\#ifdef FD_SETSIZE\n\#undef FD_SETSIZE\n\#endif\n\#define FD_SETSIZE 32768/' ./os/tpf/os.h
	fi

	if [ -e ./srclib/apr/include/apr.hnw ]; then
			perl -pi -e 's/FD_SETSIZE.*1024/FD_SETSIZE 32768/' ./srclib/apr/include/apr.hnw
	fi

	if [ -e ./srclib/apr/poll/unix/select.c ]; then
			perl -pi -e 's/FD_SETSIZE.*1024/FD_SETSIZE 32768/' ./srclib/apr/poll/unix/select.c
	fi

	#Jailed shell
	if [ "${JAIL_OPT}" = "yes" ]; then
		cd ${CWD}
		
		if [ ! -e ${SU_FILE} ]; then
			echo "Cannot find ${SU_FILE}. Run './build update_data'";
			do_exit 0;
		fi
		
		SUEXEC_FILE=${CWD}/httpd-${APACHE2_VER}/support/suexec.c
		cp -f ${SU_FILE} ${SUEXEC_FILE}
		chmod 1755 ${SUEXEC_FILE}
		
		#add just a touch of nothing to increase the datestamp so that 'make' finds it.
		echo -n "" >> ${SUEXEC_FILE};
	fi

	cd httpd-${APACHE2_VER};
	
	while
	echo "Trying to make Apache 2..."
	do
	{
		C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break
		fi
	}
	done
	echo "Make complete";

	checkRPMS;

	#setup the directadmin.conf
	if [ "${CLINUX_OPT}" = "yes" ]; then
		setVal cloud_cache 1 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 1 ${DACONF_FILE}
		echo "action=cache&value=showallusers" >> ${TASK_QUEUE}
		/usr/local/directadmin/dataskq d --custombuild
	elif [ "${CLINUX_OPT}" = "no" ]; then
		setVal cloud_cache 0 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 0 ${DACONF_FILE}
	fi
	
	setVal nginx 0 ${DACONF_TEMPLATE_FILE}
	setVal nginx 0 ${DACONF_FILE}
	killall nginx
	doRestartDA;
	set_service nginx delete
	set_service httpd ON
	killall nginx

	echo "Installing Apache...";
	make install

	if [ ! -e /etc/mime.types ]
	then
		cp docs/conf/mime.types /etc/mime.types
	fi
	
	ln -sf /var/www/build /etc/httpd/build

	chown webapps:apache /var/www
	chmod 551 /var/www
	
	removeLockfile
	cd ${CWD}

	restoreHttp;


	#fix for downgrades to let $1$ passwords version of apr-utils (1.4.1) work, if 1.5.1 was installed previously.
	if [ "${APACHE_OPT}" = "2.4" ] && [ "${APR_UTIL_VER}" = "1.4.1" ]; then
		APR_51_LIB=${HTTPDDIR}/lib/libaprutil-1.so.0.5.1
		APR_41_LIB=${HTTPDDIR}/lib/libaprutil-1.so.0.4.1
		APR_LIB_LINK=${HTTPDDIR}/lib/libaprutil-1.so.0
		if [ -e "${APR_51_LIB}" ] && [ -e "${APR_41_LIB}" ]; then
			rm -f ${APR_LIB_LINK}
			rm -f ${APR_51_LIB}
			ln -s libaprutil-1.so.0.4.1 ${APR_LIB_LINK}
		fi
	fi

	#ensure /usr/sbin/apxs
	if [ ! -s /usr/sbin/apxs ] && [ -s /usr/bin/apxs ]; then
		ln -s /usr/bin/apxs /usr/sbin/apxs
	fi

	if [ ${OS} = "FreeBSD" ]
	then
		cp -f ${CWD}/httpd_2_freebsd /usr/local/etc/rc.d/httpd
		chmod 755 /usr/local/etc/rc.d/httpd
	elif [ -e /etc/debian_version ]; then
		cp -f ${CWD}/httpd_2_debian /etc/init.d/httpd
                chmod 755 /etc/init.d/httpd
		update-rc.d httpd defaults
	else
		cp -f ${CWD}/httpd_2 /etc/rc.d/init.d/httpd
		chmod 755 /etc/rc.d/init.d/httpd
		/sbin/chkconfig httpd on
	fi


	#check directadmin.conf file
	if [ "`grep -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_TEMPLATE_FILE}`" = "1" ]; then
		perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_TEMPLATE_FILE}
	fi

	if [ "`grep -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_FILE}`" = "1" ]; then
		if [ "`grep -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_FILE}`" = "1" ]; then
			perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_FILE}
			doRestartDA
		fi

		mv -f ${HTTPDCONF} ${HTTPDCONF}.${APACHE_OPT}.backup

		cp -rf ${APCONFDIR} ${HTTPDDIR}
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi
		cp -rf ${HTTPDCONF}.${APACHE_OPT}.backup/ssl.key ${HTTPDCONF}
		cp -rf ${HTTPDCONF}.${APACHE_OPT}.backup/ssl.crt ${HTTPDCONF}
		doRestartDA;
	fi

	#copy the new configs if needed
	if [ "`grep -c 'Include' ${HTTPDCONF}/extra/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${HTTPDCONF}/extra/directadmin-vhosts.conf ]; then
		cp -rf ${APCONFDIR} ${HTTPDDIR}

		if [ "${SECURE_HTACCESS}" = "yes" ]; then
			HDC=httpd-directories-new.conf
		else
			HDC=httpd-directories-old.conf
		fi
		
		ln -sf $HDC ${HTTPDCONF}/extra/httpd-directories.conf
		
		doApacheHostConf;
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi
	fi

	#hide frontpage from the interface to avoid confusion
	hideFrontpage

	#ensure we have the correct apache_ver
	if [ "`grep -c apache_ver=2.0 ${DACONF_TEMPLATE_FILE}`" -eq "0" ]; then
		echo "apache_ver=2.0" >> ${DACONF_TEMPLATE_FILE}
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		doRestartDA;
	elif [ "`grep -c apache_ver=2.0 ${DACONF_TEMPLATE_FILE}`" -ne "0" ]; then
		perl -pi -e 's/`grep apache_ver= ${DACONF_TEMPLATE_FILE}`/apache_ver=2.0/' ${DACONF_TEMPLATE_FILE}
	fi
	if [ "`grep -c apache_ver=2.0 ${DACONF_FILE}`" -eq "0" ]; then
		echo "apache_ver=2.0" >> ${DACONF_FILE}
		doRestartDA;
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	elif [ "`grep -c apache_ver=2.0 ${DACONF_FILE}`" -ne "0" ]; then
		perl -pi -e 's/`grep apache_ver= ${DACONF_FILE}`/apache_ver=2.0/' ${DACONF_FILE}
		doRestartDA;
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	fi

	fpmChecks;
	dovecotChecks;
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		perl -pi -e 's/nginx/apache/' /usr/local/directadmin/data/templates/php-fpm.conf
	fi
	
	#rewrite ips.conf if needed
	echo "action=rewrite&value=ips" >> ${TASK_QUEUE}
	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	
	/usr/local/directadmin/dataskq --custombuild

	#tokenize the IP if needed
	tokenize_IP

	#add all the Include lines if they do not exist
	if [ "`grep -c 'Include' ${HTTPDCONF}/extra/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${HTTPDCONF}/extra/directadmin-vhosts.conf ]; then
		doVhosts;
		cd ${CWD}/httpd-${APACHE2_VER}
	fi

	if [ ! -s /etc/httpd/conf/ssl.key/server.key ] || [ ! -s /etc/httpd/conf/ssl.crt/server.crt ]; then
		cd ${WORKDIR}
		mkdir -p /etc/httpd/conf/ssl.key
		mkdir -p /etc/httpd/conf/ssl.crt
		#install the cert/key
		/usr/bin/openssl req -x509 -newkey rsa:1024 -keyout /etc/httpd/conf/ssl.key/server.key -out /etc/httpd/conf/ssl.crt/server.crt -days 9999 -nodes -config ./${APCERTCONF}

		chmod 600 ${HTTPDCONF}/ssl.crt/server.crt
		chmod 600 ${HTTPDCONF}/ssl.key/server.key		

		cd ${CWD}
	fi
	
	ensure_server_ca

	doApacheCheck;

	mkdir -p ${WWWDIR}

	if [ ! -e ${WWWDIR}/index.html ]
	then
		if [ -e ${WWWDIR}/index.html.en ]
		then
			cp -f ${WWWDIR}/index.html.en ${WWWDIR}/index.html
		else
			echo "<html>Apache is functioning normally</html>" > ${WWWDIR}/index.html
		fi
	fi
	if [ ! -e /etc/logrotate.d/apache ] && [ ${OS} != "FreeBSD" ]
	then
		wget ${WEBPATH}/apache.logrotate -O /etc/logrotate.d/apache
	fi

	if [ ! -d /usr/local/safe-bin ]; then
		mkdir -p /usr/local/safe-bin
		chmod 511 /usr/local/safe-bin
		chown apache:apache /usr/local/safe-bin
	fi
	
	# Make sure apr is linked correctly
	if [ -e /usr/bin/apr-1-config ]; then
		ln -sf /usr/bin/apr-1-config /usr/bin/apr-config
	fi

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
	#	COUNT2="`grep -c 'mpm_event_module' ${PHPMODULES}`"
	#	COUNT3="`grep -c 'mpm_prefork_module' ${PHPMODULES}`"
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_ruid2.so ]; then
				doModRuid2;
		fi
		COUNT="`grep -c 'ruid2_module' ${PHPMODULES}`"
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
			echo "Mutex posixsem" >> ${PHPMODULES}
		fi
		if [ "${HAVE_CLI}" = "no" ]; then
			COUNT="`grep -c 'htscanner_module' ${PHPMODULES}`"
			if [ "${HTSCANNER_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_htscanner2.so ]; then
					doModHtscanner;
			fi
			if [ "${HTSCANNER_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule htscanner_module /usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
			fi
		elif [ "${HAVE_CLI}" = "yes" ]; then
			COUNT="`grep -c 'htscanner_module' ${PHPMODULES}`"
			if [ "${HTSCANNER_OPT}" = "yes" ] && [ ${COUNT} -gt 0 ]; then
				perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
				perl -pi -e 's|^LoadModule	htscanner_module|^#LoadModule	htscanner_module' ${PHPMODULES}
			fi
		fi
		#Use event MPM for CGI (FPM) and prefork for cli (mod_php)
	#	if [ "${HAVE_CLI}" = "no" ] && [ ${COUNT2} -eq 0 ]; then
	#		# Add to httpd-phpmodules.conf
	#		echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
	#	elif [ ${COUNT3} -eq 0 ]; then
	#		# Add to httpd-phpmodules.conf
	#		echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
	#	fi

		COUNT="`grep -c 'suphp_module' ${PHPMODULES}`"
		if [ "${HAVE_SUPHP_CGI}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule suphp_module|#LoadModule suphp_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
		fi
	
		if [ "${HAVE_FPM_CGI}" = "yes" ]; then
			if [ ! -s /usr/lib/apache/mod_fastcgi.so ]; then
					doModFastCGI;
			fi
			doFastcgiConf;
			COUNT="`grep -c 'fastcgi_module' ${PHPMODULES}`"
			if [ "${COUNT}" -eq 0 ]; then
				perl -pi -e 's|^LoadModule	mod_fastcgi|#LoadModule	mod_fastcgi|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	fastcgi_module		/usr/lib/apache/mod_fastcgi.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -c 'httpd-fastcgi.conf' ${PHPMODULES}`"
			if [ ${COUNT} -eq 0 ]; then
				echo "Include /etc/httpd/conf/extra/httpd-fastcgi.conf" >> ${PHPMODULES}
			fi
		fi	
		
		if [ "${HAVE_FCGID}" = "yes" ]; then
			if [ ! -s /usr/lib/apache/mod_fcgid.so ]; then
					doModFCGID;
			fi
			COUNT="`grep -c 'fcgid_module' ${PHPMODULES}`"
			if [ "${COUNT}" -eq 0 ]; then
				perl -pi -e 's|^LoadModule	mod_fcgid|#LoadModule	mod_fcgid|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	fcgid_module		/usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -c 'httpd-fcgid.conf' ${PHPMODULES}`"
			if [ ${COUNT} -eq 0 ]; then
				echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
			fi
		fi	
	fi

	# Make sure there is no SSLMutex in /etc/httpd/conf/extra/httpd-ssl.conf
	# Make sure there is no LockFile in /etc/httpd/conf/extra/httpd-mpm.conf
	if [ "${APACHE_OPT}" = "2.4" ]; then
		perl -pi -e 's/^SSLMutex/#SSLMutex/' /etc/httpd/conf/extra/httpd-ssl.conf
		perl -pi -e 's/^LockFile/#LockFile/' /etc/httpd/conf/extra/httpd-mpm.conf
	fi
	
	#Install mod_hostinglimits
	if [ "${CLINUX_OPT}" = "yes" ]; then
		if [ ! -e /usr/bin/cmake ]; then
			yum -y install cmake
		fi
		if [ ! -e /usr/include/lve/lve-ctl.h ]; then
			yum -y install liblve-devel
		fi
		cd ${CWD}
		CL_MODDIR="`tar tzf mod_hostinglimits.tar.gz | head -n 1 | cut -d/ -f1`"
		cd ${CL_MODDIR}
		cmake CMakeLists.txt
		make install
		if [ ! -s /etc/httpd/conf/extra/modhostinglimits.conf ]; then
		    wget -O /etc/httpd/conf/extra/modhostinglimits.conf http://repo.cloudlinux.com/cloudlinux/confs/modhostinglimits.conf
			perl -pi -e 's#/etc/httpd/modules/mod_hostinglimits.so#/usr/lib/apache/mod_hostinglimits.so#' /etc/httpd/conf/extra/modhostinglimits.conf
		fi
		#Inserting mod_hostinglimits to apache config
		COUNTCLCONF=`grep -c -e "modhostinglimits.conf" /etc/httpd/conf/extra/httpd-includes.conf`
		if [ "${COUNTCLCONF}" -eq 0 ]; then
		    echo "#For LVE settings" >> /etc/httpd/conf/extra/httpd-includes.conf
			echo "Include /etc/httpd/conf/extra/modhostinglimits.conf" >> /etc/httpd/conf/extra/httpd-includes.conf
		fi
	fi
	
	cagefsctl_update;
	
	echo "Restarting apache."
	${INITDDIR}/httpd restart

	removeLockfile
}

####################################################

doNginx() {
	if [ "${WEBSERVER_OPT}" != "nginx" ]; then
		echo "You cannot install Nginx, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	getFile nginx-${NGINX_VER}.tar.gz nginx

	getFile nginx.boot
	getFile nginx.boot.freebsd
	getFile nginx.boot.debian
	quitIfLocked doNginx

	ADMNNGINX=/usr/local/directadmin/data/users/admin/nginx.conf
	if [ ! -e ${ADMNNGINX} ]; then
		echo -n "" > ${ADMNNGINX}
		chown diradmin:admin ${ADMNNGINX}
		chmod 640 ${ADMNNGINX}
	fi
	
	if [ ! -d /var/www/html ]; then
		mkdir -p /var/www/html
	fi
	
	set64;

	addUserGroup nginx nginx
	addNginxToAccess;

	chown webapps:nginx /var/www
	chmod 551 /var/www
	
	cd ${CWD};
	FILE=${CWD}/nginx-${NGINX_VER}.tar.gz

	checkFile ${FILE};

	echo "Extracting ${FILE}...";
	tar xzf ${FILE} --no-same-owner

	cd nginx-${NGINX_VER}

	setFDSETSIZE

	#copy the new configs
	if [ ! -d ${NGINXCONF} ]; then
		mkdir ${NGINXCONF}
		cp -rf ${NGINXCONFDIR}/* ${NGINXCONF}
	fi
	
	if [ ! -e ${NGINXCONF}/directadmin-settings.conf ]; then
		touch ${NGINXCONF}/directadmin-settings.conf
	fi
	
	if [ ! -e ${NGINXCONF}/directadmin-ips.conf ]; then
		touch ${NGINXCONF}/directadmin-ips.conf
	fi
	
	if [ ! -e ${NGINXCONF}/nginx-includes.conf ]; then
		touch ${NGINXCONF}/nginx-includes.conf
	fi
		
	#configure
	echo "Configuring nginx-${NGINX_VER}";
	${CWD}/${NGINX_CONFIGURE};
        if [ $? -ne 0 ]
        then
                $ECHO -e "\n*** There was an error while trying to configure Nginx. Check the ${NGINX_CONFIGURE} file\n";
                do_exit 1;
        fi
	echo "Done Configuration.";

	echo "increasing FD_SETSIZE in os/tpf/os.h ..";
	if [ -e ./os/tpf/os.h ]; then
			#perl -pi -e 's/FD_SETSIZE.*2048/FD_SETSIZE 32768/' ./os/tpf/os.h
			perl -pi -e 's/\#define FD_SETSIZE.*2048/\#ifdef FD_SETSIZE\n\#undef FD_SETSIZE\n\#endif\n\#define FD_SETSIZE 32768/' ./os/tpf/os.h
	fi

	cd nginx-${NGINX_VER};
	
	while
	echo "Trying to make Nginx..."
	do
	{
		C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break
		fi
	}
	done
	echo "Make complete";

	checkRPMS;

	echo "Installing Nginx...";
	if [ -e ${INITDDIR}/nginx ]; then
		${INITDDIR}/nginx stop
	fi
	make install

	cd ${CWD}

	if [ ${OS} = "FreeBSD" ]
	then
		cp -f ${CWD}/nginx.boot.freebsd /usr/local/etc/rc.d/nginx
		chmod 755 /usr/local/etc/rc.d/nginx
	elif [ -e /etc/debian_version ]; then
		cp -f ${CWD}/nginx.boot.debian /etc/init.d/nginx
                chmod 755 /etc/init.d/nginx
		update-rc.d nginx defaults
	else
		cp -f ${CWD}/nginx.boot /etc/rc.d/init.d/nginx
		chmod 755 /etc/rc.d/init.d/nginx
		/sbin/chkconfig nginx on
	fi

	perl -pi -e "s|/usr/local/php53/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
	perl -pi -e "s|/usr/local/php54/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
	perl -pi -e "s|/usr/local/php55/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
	
	tokenize_IP;
	
	fpmChecks;
	dovecotChecks;
	do_rewrite_nginx_webapps;
	
	#rewrite ips.conf if needed
	echo "action=rewrite&value=ips" >> ${TASK_QUEUE}

	echo "action=rewrite&value=nginx" >> ${TASK_QUEUE}
	/usr/local/directadmin/dataskq --custombuild

	#add all the Include lines if they do not exist
	if [ "`grep -c 'Include' ${NGINXCONF}/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${NGINXCONF}/directadmin-vhosts.conf ]; then
		doVhosts;
	fi

	if [ ! -s ${NGINXCONF}/ssl.key/server.key ] || [ ! -s ${NGINXCONF}/ssl.crt/server.crt ]; then
		cd ${WORKDIR}
		mkdir -p ${NGINXCONF}/ssl.key
		mkdir -p ${NGINXCONF}/ssl.crt
		#install the cert/key
		/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout ${NGINXCONF}/ssl.key/server.key -out ${NGINXCONF}/ssl.crt/server.crt -days 9999 -nodes -config ./${APCERTCONF}

		chmod 600 ${NGINXCONF}/ssl.crt/server.crt
		chmod 600 ${NGINXCONF}/ssl.key/server.key		

		cd ${CWD}
	fi
	
	ensure_server_ca

	if [ "${NGINXCUSTOMCONFDIR}" != "0" ]; then
		cp -rf ${NGINXCUSTOMCONFDIR}/* ${NGINXCONF}/
	fi
		
	mkdir -p ${WWWDIR}

	if [ ! -e ${WWWDIR}/index.html ]
	then
		echo "<html>Nginx is functioning normally</html>" > ${WWWDIR}/index.html
	fi
	if [ ! -e /etc/logrotate.d/nginx ] && [ ${OS} != "FreeBSD" ]
	then
		wget ${WEBPATH}/nginx.logrotate -O /etc/logrotate.d/nginx
	fi
	
	if [ ! -d /var/log/nginx/domains ]; then
		mkdir -p /var/log/nginx/domains
	fi
	
	#setup the directadmin.conf
	if [ "${CLINUX_OPT}" = "yes" ]; then
		setVal cloud_cache 1 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 1 ${DACONF_FILE}
		echo "action=cache&value=showallusers" >> ${TASK_QUEUE}
		/usr/local/directadmin/dataskq d --custombuild
	elif [ "${CLINUX_OPT}" = "no" ]; then
		setVal cloud_cache 0 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 0 ${DACONF_FILE}
	fi
	
	setVal nginx 1 ${DACONF_TEMPLATE_FILE}
	setVal nginx 1 ${DACONF_FILE}
	killall httpd
	doRestartDA;
	set_service httpd delete
	set_service nginx ON
	killall httpd
	
	cagefsctl_update;
	
	echo "Restarting nginx."
	${INITDDIR}/nginx restart

	removeLockfile
}

####################################################

convertToDovecot() {
	updateDovecot;

	if [ "${DOVECOT_OPT}" != "yes" ]; then
		echo "You cannot convert to Dovecot, because you do not have it set in options.conf file.";
		exit 1;
	fi

        #patch exim.conf
	if [ -e /etc/exim.conf ] && [ "`grep -c maildir_format /etc/exim.conf`" -eq 0 ]; then
		echo "Patching /etc/exim.conf to maildir";
		patch -p0 < ${CWD}/exim.conf.dovecot.patch
	fi

        COUNT="`grep -c -e '^dovecot=1' ${DACONF_FILE}`"
        if [ "${COUNT}" = "0" ] && [ -e ${DACONF_FILE} ]; then
		echo "Adding dovecot=1 to the ${DACONF_FILE} file...";
                echo "dovecot=1" >> ${DACONF_FILE}
                set_service dovecot ON
		doRestartDA
        fi

	COUNT_TEMPLATE="`grep -c -e '^dovecot=1' ${DACONF_TEMPLATE_FILE}`"
	if [ "${COUNT_TEMPLATE}" = "0" ] && [ -e ${DACONF_TEMPLATE_FILE} ]; then
		echo "Adding dovecot=1 to the ${DACONF_TEMPLATE_FILE} (template) file ...";
                echo "dovecot=1" >> ${DACONF_TEMPLATE_FILE}
		set_service dovecot ON
	fi

        #uninstall old services and restart exim
        if [ "${OS}" = "FreeBSD" ]; then
                /usr/local/etc/rc.d/directadmin restart
                /usr/local/etc/rc.d/exim restart
                perl -pi -e 's/^imap/#imap/' /etc/inetd.conf
                killall -HUP inetd
                /usr/local/etc/rc.d/vm-pop3d stop
                cat /usr/local/etc/rc.d/boot.sh | grep -v vm-pop3d > /usr/local/etc/rc.d/boot.sh.new
		mv -f /usr/local/etc/rc.d/boot.sh /usr/local/etc/rc.d/boot.sh.old
		mv -f /usr/local/etc/rc.d/boot.sh.new /usr/local/etc/rc.d/boot.sh
		chmod 755 /usr/local/etc/rc.d/boot.sh
	elif [ -e /etc/debian_version ]; then
		/etc/init.d/exim restart
		/etc/init.d/directadmin restart
		perl -pi -e 's/^imap/#imap/' /etc/inetd.conf
		killall -HUP inetd
		/etc/init.d/vm-pop3d stop
		chmod 0 /etc/init.d/vm-pop3d
        else
                /sbin/service exim restart
                /sbin/service directadmin restart
                rm -f /etc/xinetd.d/imap
                killall -HUP xinetd
                /sbin/service vm-pop3d stop
                /sbin/chkconfig vm-pop3d off
        fi

	killall -9 vm-pop3d 2> /dev/null

	set_service vm-pop3d delete

	echo "Adding conversion command to the task.queue ...";
	echo "action=convert&value=todovecot" >> ${TASK_QUEUE}
	echo "Executing the task.queue cotents now, please be patient ...";
	/usr/local/directadmin/dataskq d --custombuild

	echo "Restarting dovecot."
	${INITDDIR}/dovecot restart
	echo "Restarting exim."
	${INITDDIR}/exim restart

	echo "Done.";
}

####################################################

doPigeonhole() {

	if [ "${PIGEONHOLE_VER}" = "no" ]; then
		do_exit 1 "Cannot install pigeonhole, because there is no version available for Dovecot ${DOVECOT_VER}."
	fi
	
	quitIfLocked doPigeonhole
	
        cd ${CWD};

	getFile dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER}.tar.gz pigeonhole${DOVECOT_SHORTREL}

        tar xzf dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER}.tar.gz --no-same-owner
        cd dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER}

	./configure --prefix=/usr
	
        while
        echo "Trying to make pigeonhole ${PIGEONHOLE_VER}"
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

        touch /var/log/dovecot-debug.log /var/log/dovecot-lmtp.log /var/log/dovecot-sieve.log /var/log/dovecot-sieve-errors.log /var/log/dovecot-lmtp-errors.log 
        
        chown mail:mail /var/log/dovecot-debug.log /var/log/dovecot-lmtp.log /var/log/dovecot-sieve.log /var/log/dovecot-sieve-errors.log /var/log/dovecot-lmtp-errors.log 
        
        chmod 660 /var/log/dovecot-debug.log /var/log/dovecot-lmtp.log /var/log/dovecot-sieve.log /var/log/dovecot-sieve-errors.log /var/log/dovecot-lmtp-errors.log 
	

        make install
        
        if [ ! -d /var/lib/dovecot/sieve ]; then
		mkdir -p /var/lib/dovecot/sieve >/dev/null 2>&1
		touch /var/lib/dovecot/sieve/default.sieve
		sievec /var/lib/dovecot/sieve/default.sieve
		chown mail:mail /var/lib/dovecot/sieve/default.sieve
	fi
	
	getFile patches/exim.conf.pigeonhole.patch eximpigeonholepatch
	getFile patches/dovecot.conf.pigeonhole.patch dovecotpigeonholepatch
	
	COUNT="`grep -c dovecot_lmtp_udp /etc/exim.conf`"
	if [ "${COUNT}" -eq 0 ] && [ -e ${WORKDIR}/patches/exim.conf.pigeonhole.patch ]; then
		cd /etc
		patch -p0 < ${WORKDIR}/patches/exim.conf.pigeonhole.patch
	fi
	
	COUNT="`grep -c managesieve /etc/dovecot/dovecot.conf`"
	if [ "${COUNT}" -eq 0 ] && [ -e ${WORKDIR}/patches/dovecot.conf.pigeonhole.patch ]; then
		cd /etc/dovecot
		patch -p0 < ${WORKDIR}/patches/dovecot.conf.pigeonhole.patch
	fi
	
	perl -pi -e "s|hostname #req|`hostname` #req|" /etc/dovecot/dovecot.conf
	
	cd ${WORKDIR}

	removeLockfile
	
	echo "Restarting dovecot."
	${INITDDIR}/dovecot restart
	
	echo "Restarting exim."
	${INITDDIR}/exim restart
}

doDovecot() {
	updateDovecot;
	if [ "${DOVECOT_OPT}" != "yes" ]; then
		do_exit 1 "You cannot install Dovecot, because you do not have it set in options.conf file.";
	fi

	quitIfLocked doDovecot
	
	if [ "${DOVECOT_OPT}" = "no" ]; then
		do_exit 1 "Dovecot is not set in options.conf."
	fi

	if [ ! -e ${WORKDIR}/dovecot-${DOVECOT_VER}.tar.gz ]; then
		do_exit 1 "File dovecot-${DOVECOT_VER}.tar.gz does not exist. Try running ${boldon}./build update.${boldoff}"
	fi

        COUNT=`grep -c -e '^dovecot=1' ${DACONF_FILE}`
        if [ ${COUNT} -eq 0 ] || [ ! -e ${DACONF_FILE} ]; then
		echo "Converting to dovecot (${DOVECOT_VER}) ...";
                convertToDovecot;
        fi

	echo "Installing dovecot ${DOVECOT_VER} ...";

	addUserGroup dovecot dovecot

        cd ${CWD};
        FILE=${CWD}/dovecot-${DOVECOT_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd dovecot-${DOVECOT_VER}

	echo "Patching syslog with LOG_PID ...";

	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/auth/main.c
	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/imap/main.c
	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/master/main.c
	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/pop3/main.c

	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/lib-master/master-service.c

	echo "Configuring dovecot ${DOVECOT_VER} ...";

	CONF_FILE=${CWD}/${DOVECOT_CONFIGURE};
	
	${CONF_FILE}
	
	if [ $? -ne 0 ]
	then
		$ECHO -e "\n*** There was an error while trying to configure dovecot. Please check ${DOVECOT_CONFIGURE} file.\n";
		do_exit 1;
	fi
	echo "Done Configuration.";

        while
        echo "Trying to make dovecot..."
        do
        {
		make CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}

		#make

                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";

	echo "Installing ...";

	make install
	
	removeLockfile
	
	cd ${CWD}
	
	if [ "${PIGEONHOLE_OPT}" = "yes" ]; then
		doPigeonhole;
	else
		COUNT="`grep -c dovecot_lmtp_udp /etc/exim.conf`"
		if [ "${COUNT}" -gt 0 ]; then
			perl -pi -e 's#transport = dovecot_lmtp_udp#transport = virtual_localdelivery#' /etc/exim.conf
			echo "Restarting exim"
			${INITDDIR}/exim restart
		fi
	fi

	#install the boot scripts.

	if [ "${OS}" = "FreeBSD" ]; then
		if [ ! -e /usr/local/etc/rc.d/dovecot ]; then
			cp ${CWD}/dovecot.boot.freebsd /usr/local/etc/rc.d/dovecot
			chmod 755 /usr/local/etc/rc.d/dovecot
			echo "./dovecot \$1" >> /usr/local/etc/rc.d/boot.sh
		fi
	elif [ -e /etc/debian_version ]; then
	        if [ ! -e /etc/init.d/dovecot ]; then
                        cp ${CWD}/dovecot.boot.debian /etc/init.d/dovecot
                        chmod 755 /etc/init.d/dovecot
			update-rc.d dovecot defaults
                fi
		if [ ! -e /etc/exim.cert ] && [ ! -e /etc/exim.key ]; then
			getFile da_exim-cert-config
			/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout /etc/exim.key -out /etc/exim.cert -days 9999 -nodes -config ${WORKDIR}/da_exim-cert-config
			chown mail:mail /etc/exim.cert /etc/exim.key
			chmod 600 /etc/exim.cert /etc/exim.key

			#ln -sf /etc/httpd/conf/ssl.crt/server.crt /etc/exim.cert
			#ln -sf /etc/httpd/conf/ssl.key/server.key /etc/exim.key
		fi
	else
		if [ ! -e /etc/init.d/dovecot ]; then
			cp ${CWD}/dovecot.boot /etc/init.d/dovecot
			chmod 755 /etc/init.d/dovecot
			/sbin/chkconfig dovecot on
		fi
	fi

	if [ ! -d /etc/dovecot ]; then
	    mkdir -p /etc/dovecot
	fi
	
	CONF_VER=0
	INST_CONF=0
	if [ -e /etc/dovecot.conf ]; then
		CONF_VER=`cat /etc/dovecot.conf | head -n1 | awk '{print $3}'`
	else
		INST_CONF=1
	fi

        INST_VER=`echo "$DOVECOT_VER" | cut -d. -f1`
        
        if [ "$INST_VER" = "2" ] && [ ! -e /etc/dovecot/dovecot.conf ]; then
        	INST_CONF=1
        fi
        
        if [ "$INST_VER" = "2" ] && [ "$CONF_VER" != "2.0" ]; then
        	INST_CONF=1
        fi

        if [ "$INST_VER" = "1" ] && [ "$CONF_VER" = "2.0" ]; then
        	INST_CONF=1
        fi

        if [ ! -L /etc/dovecot.conf ]; then
		mv -f /etc/dovecot.conf /etc/dovecot.conf.old
		ln -s /etc/dovecot/dovecot.conf /etc/dovecot.conf
	fi
			
	#install the dovecot.conf        
	if [ "$INST_CONF" -eq 1 ]; then
		if [ "$INST_VER" = "2" ]; then
			getFile dovecot.conf.2.0
			mv -f ${CWD}/dovecot.conf.2.0 /etc/dovecot/dovecot.conf
			if [ ! -L /etc/dovecot.conf ]; then
				mv -f /etc/dovecot.conf /etc/dovecot.conf.1.2
				ln -s /etc/dovecot/dovecot.conf /etc/dovecot.conf
			fi
		else
			getFile dovecot.conf
			mv -f ${CWD}/dovecot.conf /etc/dovecot.conf	
		fi
	fi

	if [ "${OS}" = "FreeBSD" ]; then
		DC=/etc/dovecot.conf
		if [ -L /etc/dovecot.conf ]; then
			DC=/etc/dovecot/dovecot.conf
		fi

		perl -pi -e 's/driver = shadow/driver = passwd/' ${DC}
		perl -pi -e 's/passdb shadow/passdb passwd/' ${DC}
	fi

	#perl -pi -e 's/mail_extra_groups/mail_access_groups/' /etc/dovecot.conf

	#dovecot 1.1+
	#perl -pi -e 's|default_mail_env|mail_location|' /etc/dovecot.conf
	#perl -pi -e 's|args = /etc/virtual/%d/passwd|args = username_format=%n /etc/virtual/%d/passwd|' /etc/dovecot.conf

	#dovecot 1.2.0+
	#perl -pi -e 's/^umask/#umask/' /etc/dovecot.conf

	cagefsctl_update;
	
	echo "Restarting dovecot."
	${INITDDIR}/dovecot restart
}

####################################################

doLibs()
{
	downloadMake Digest
	downloadMake Digest-SHA1
	downloadMake HTML-Parser
	downloadMake Storable
	downloadMake Net-DNS
	downloadMake Net-IP
	downloadMake Net-CIDR
	downloadMake DB_File
	downloadMake Mail-SPF
	downloadMake Sys-Hostname-Long
	downloadMake Net-SSLeay
	downloadMake IO-Socket-SSL
	downloadMake URI
}

dospamassassin() {
	if [ "${SPAMASSASSIN_OPT}" = "no" ]; then
		do_exit 1 "SpamAssassin is not set in options.conf."
	fi

	getFile Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz spamassassin
	wget -O /etc/exim.spamassassin.conf http://${DOWNLOADSERVER_OPT}/services/exim.spamassassin.conf
	
	quitIfLocked dospamassassin
	

	if [ ! -e ${WORKDIR}/Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz ]; then
		do_exit 1 "File Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz does not exist. Try running ${boldon}./build update.${boldoff}"
	fi

	echo "Installing spamassassin ${SPAMASSASSIN_VER}...";

	cd ${CWD};
	
	#doLibs;

    FILE=${CWD}/Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz
    checkFile ${FILE}
    echo "Extracting ...";
    tar xzf ${FILE} --no-same-owner
    echo "Done.";
    cd Mail-SpamAssassin-${SPAMASSASSIN_VER}

	echo "Configuring SpamAssassin ${SPAMASSASSIN_VER}...";

	export LANG=C
	perl Makefile.PL PREFIX=/usr CONTACT_ADDRESS="the administrator of that system" RUN_NET_TESTS="no"
	
	if [ $? -ne 0 ]
	then
		$ECHO -e "\n*** There was an error while trying to configure SpamAssassin.\n";
		do_exit 1;
	fi
	
	echo "Done Configuration.";

        while
        echo "Trying to make SpamAssassin..."
        do
        {
		make

                if [ $? -ne 0 ]
                then                
			echo "";
			echo "If needed, use cpan to install the missing modules, eg:";
			echo "  cpan -i Archive::Tar Digest::SHA Mail::SPF IP::Country Net::Ident IO::Socket::INET6 Compress::Zlib Mail::DKIM LWP::UserAgent HTTP::Date Encode::Detect ExtUtils::MakeMaker";
			echo "";
			echo "Press enter to answer [yes] if it asks you to install dependencies (it will prepend them to the queue)";
			echo "Answer no if it asks: Are you ready for manual configuration? [yes] no";
			echo "";
                
                        if [ ${USER_INPUT} -eq 1 ]; then
                                $ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";

	echo "Installing ...";

	make install
	removeLockfile
	cd ${CWD}

	## we need to change how it's started.
	if [ -e /etc/init.d/exim ]; then
		perl -pi -e 's#/usr/bin/spamd -d -a -c -m 5#/usr/bin/spamd -d -c -m 15#' /etc/init.d/exim
	fi
	if [ -e /usr/local/etc/rc.d/exim ]; then
		perl -pi -e 's#/usr/bin/spamd -d -a -c -m 5#/usr/bin/spamd -d -c -m 15#' /usr/local/etc/rc.d/exim
	fi

#	if [ ! -e /etc/exim.spamassassin.conf ]; then
#		cp -f exim.spamassassin.conf /etc/exim.spamassassin.conf
#	fi
	
	perl -pi -e 's|#.include_if_exists /etc/exim.spamassassin.conf|.include_if_exists /etc/exim.spamassassin.conf|' /etc/exim.conf
	
	echo "Running sa-update."
	if [ -e /usr/bin/sa-update ]; then
		/usr/bin/sa-update --nogpg
	else
		echo "Cannot find /usr/bin/sa-update after install. Check for errors above.";
	fi

	cagefsctl_update;
	
	echo "Starting SpamAssassin."
	/usr/bin/spamd -d -c -m 15

	echo "Restarting exim."
	${INITDDIR}/exim restart
	
	ldconfig
}

####################################################

doclamav() {
	if [ "${CLAMAV_OPT}" = "no" ]; then
		do_exit 1 "ClamAV is not set in options.conf."
	fi

	getFile clamav-${CLAMAV_VER}.tar.gz clamav
	getFile clamd
	getFile clamd_freebsd
	getFile clamd_debian
	getFile freshclam
	getFile freshclam_freebsd
	getFile freshclam_debian
	
	wget -O /etc/exim.clamav.load.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.load.conf
	wget -O /etc/exim.clamav.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.conf

	quitIfLocked doclamav

	if [ ! -e ${WORKDIR}/clamav-${CLAMAV_VER}.tar.gz ]; then
		do_exit 1 "File clamav-${CLAMAV_VER}.tar.gz does not exist. Try running ${boldon}./build update.${boldoff}"
	fi

	echo "Installing clamav ${CLAMAV_VER} ...";
	
	CLAMD_CONF=1
	if [ ! -e /etc/clamd.conf ]; then
		CLAMD_CONF=0
	fi
	
	FRESHCLAM_CONF=1
	if [ ! -e /etc/freshclam.conf ]; then
		FRESHCLAM_CONF=0
	fi
	
	addUserGroup clamav clamav
	mkdir -p /var/run/clamd
	chown -R clamav.clamav /var/run/clamd
	chmod 700 /var/run/clamd
	
    cd ${CWD};
    FILE=${CWD}/clamav-${CLAMAV_VER}.tar.gz
    checkFile ${FILE}
    echo "Extracting ...";
    tar xzf ${FILE} --no-same-owner
    echo "Done.";
    cd clamav-${CLAMAV_VER}

	echo "Configuring clamav ${CLAMAV_VER} ...";

	./configure --prefix=/usr --sysconfdir=/etc
	if [ $? -ne 0 ]
	then
		echo -e "\n*** There was an error while trying to configure clamav.\n";
		do_exit 1;
	fi
	echo "Done Configuration.";

        while
        echo "Trying to make clamav..."
        do
        {
		make CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}

		#make

                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                echo -e "\n*** The make has failed, do you want to try to make again? (y,n): ";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";

	echo "Installing ...";

	make install
	removeLockfile
	ldconfig
	cd ${CWD}

#Commented out for ClamAV
#	if [ ! -e /etc/exim.clamav.load.conf ]; then
#		cp -f exim.clamav.load.conf /etc/exim.clamav.load.conf
#	fi
#	if [ ! -e /etc/exim.clamav.conf ]; then
#		cp -f exim.clamav.conf /etc/exim.clamav.conf
#	fi
	perl -pi -e 's|#.include_if_exists /etc/exim.clamav.load.conf|.include_if_exists /etc/exim.clamav.load.conf|' /etc/exim.conf
	perl -pi -e 's|#.include_if_exists /etc/exim.clamav.conf|.include_if_exists /etc/exim.clamav.conf|' /etc/exim.conf
		
	#install the boot scripts.
	if [ ! -e ${INITDDIR}/clamd ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			cp ${CWD}/clamd_freebsd ${INITDDIR}/clamd
			chmod 755 ${INITDDIR}/clamd
		elif [ -e /etc/debian_version ]; then
			cp ${CWD}/clamd_debian ${INITDDIR}/clamd
			chmod 755 ${INITDDIR}/clamd
			update-rc.d clamd defaults
		else
			cp ${CWD}/clamd ${INITDDIR}/clamd
			chmod 755 ${INITDDIR}/clamd
			/sbin/chkconfig clamd on
		fi
	fi
	
	if [ ! -e ${INITDDIR}/freshclam ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			cp ${CWD}/freshclam_freebsd ${INITDDIR}/freshclam
			chmod 755 ${INITDDIR}/freshclam
		elif [ -e /etc/debian_version ]; then
			cp ${CWD}/freshclam_debian ${INITDDIR}/freshclam
			chmod 755 ${INITDDIR}/freshclam
			update-rc.d freshclam defaults
		else
			cp ${CWD}/freshclam ${INITDDIR}/freshclam
			chmod 755 ${INITDDIR}/freshclam
			/sbin/chkconfig freshclam on
		fi
	fi
	
	if [ "${OS}" != "FreeBSD" ]; then
		if [ ! -d /var/run/clamd ]; then
			mkdir /var/run/clamd
		fi
	fi

	#Ensure ClamAV Database
	USC=/usr/share/clamav
	if [ ! -d $USC ]; then
		mkdir -p $USC
		chown clamav:clamav $USC
	fi

	if [ ! -s $USC/daily.cld ]; then
		/usr/bin/freshclam -v
	fi
	
	#make clamd.conf and freshclam.conf ready
	if [ ${CLAMD_CONF} -eq 0 ]; then

		if [ ! -s /etc/clamd.conf ] && [ -s /etc/clamd.conf.sample ]; then
			cp -f /etc/clamd.conf.sample /etc/clamd.conf
		fi

		perl -pi -e 's|Example|#Example|' /etc/clamd.conf
		perl -pi -e 's|#PidFile /var/run/clamd.pid|PidFile /var/run/clamd/clamd.pid|' /etc/clamd.conf
		perl -pi -e 's|#TCPSocket 3310|TCPSocket 3310|' /etc/clamd.conf
		perl -pi -e 's|#TCPAddr 127.0.0.1|TCPAddr 127.0.0.1|' /etc/clamd.conf
		perl -pi -e 's|#LocalSocket /tmp/clamd.socket|LocalSocket /tmp/clamd.socket|' /etc/clamd.conf
	fi
	if [ ${FRESHCLAM_CONF} -eq 0 ]; then

		if [ ! -s /etc/freshclam.conf ] && [ -s /etc/freshclam.conf.sample ]; then
			cp -f /etc/freshclam.conf.sample /etc/freshclam.conf
		fi

		perl -pi -e 's|Example|#Example|' /etc/freshclam.conf
		perl -pi -e 's|#LogSyslog yes|LogSyslog yes|' /etc/freshclam.conf
		perl -pi -e 's|#PidFile /var/run/freshclam.pid|PidFile /var/run/clamd/freshclam.pid|' /etc/freshclam.conf
		perl -pi -e 's|#Checks 24|#Checks 24|' /etc/freshclam.conf
		perl -pi -e 's|#NotifyClamd /path/to/clamd.conf|#NotifyClamd /etc/clamd.conf|' /etc/freshclam.conf
	fi

	set_service clamd ON
	set_service freshclam ON
	
	cagefsctl_update;
	
	echo "Restarting freshclam."
	${INITDDIR}/freshclam restart
	
	echo "Restarting clamd."
	${INITDDIR}/clamd restart
	
	echo "Restarting exim."
	${INITDDIR}/exim restart

	echo "Done ClamAV.";
	
}

####################################################
# Mailman is not yet supported
#domailman() {
#	if [ "${MAILMAN_OPT}" = "no" ]; then
#		do_exit 1 "Mailman is not set in options.conf."
#	fi
#
#	getFile mailman-${MAILMAN_VER}.tgz mailman
#	getFile mailman
#	getFile mailman_freebsd
#	getFile mailman_debian
#
#	quitIfLocked mailman
#	touch ${WORKDIR}/.custombuild
#
#	if [ ! -s ${WORKDIR}/mailman-${MAILMAN_VER}.tgz ]; then
#		do_exit 1 "File mailman-${MAILMAN_VER}.tgz does not exist. Try running ${boldon}./build update.${boldoff}"
#	fi
#
#	echo "Installing mailman ${MAILMAN_VER} ...";
#	
#	MM_CFG=1
#	if [ ! -e /usr/local/mailman/Mailman/mm_cfg.py ]; then
#		MM_CFG=0
#	fi
#	
#	#Mailman requirements
#	addUserGroup mailman mailman
#	mkdir -p /usr/local/mailman
#	chown mailman:mailman /usr/local/mailman
#	chmod 02775 /usr/local/mailman
#	
#    cd ${CWD};
#    FILE=${CWD}/mailman-${MAILMAN_VER}.tgz
#    checkFile ${FILE}
#    echo "Extracting ...";
#    tar xzf ${FILE} --no-same-owner
#    echo "Done.";
#    cd mailman-${MAILMAN_VER}
#
#	echo "Configuring Mailman ${MAILMAN_VER} ...";
#
#	./configure --with-cgi-gid=apache
#	if [ $? -ne 0 ]
#	then
#		echo -e "\n*** There was an error while trying to configure mailman.\n";
#		do_exit 1;
#	fi
#	echo "Done Configuration.";
#
#        while
#        echo "Trying to make mailman..."
#        do
#        {
#		make CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}
#
#		#make
#
#                if [ $? -ne 0 ]
#                then
#                        if [ ${USER_INPUT} -eq 1 ]; then
#                                echo -e "\n*** The make has failed, do you want to try to make again? (y,n): ";
#                                read yesno;
#                                echo "";
#                        else
#                                if [ "${INPUT_VALUE}" = "d" ]; then
#                                        yesno=n
#                                else
#                                        yesno=${INPUT_VALUE}
#                                fi
#                        fi
#
#                        if [ "${yesno}" = "n" ]
#                        then
#                                do_exit 0;
#                        fi
#                else
#                        break;
#                fi
#        }
#        done
#        echo "Make complete";
#
#	echo "Installing ...";
#
#	make install
#	removeLockfile
#	ldconfig
#	cd ${CWD}
#
#	#install the boot scripts.
#	if [ ! -e ${INITDDIR}/mailmanctl ]; then
#		if [ "${OS}" = "FreeBSD" ]; then
#			cp ${CWD}/mailmanctl_freebsd ${INITDDIR}/mailmanctl
#			chmod 755 ${INITDDIR}/mailmanctl
#		elif [ -e /etc/debian_version ]; then
#			cp ${CWD}/mailmanctl_debian ${INITDDIR}/mailmanctl
#			chmod 755 ${INITDDIR}/mailmanctl
#			update-rc.d mailmanctl defaults
#		else
#			cp ${CWD}/mailmanctl ${INITDDIR}/mailmanctl
#			chmod 755 ${INITDDIR}/mailmanctl
#			/sbin/chkconfig mailmanctl on
#		fi
#	fi
#
#	# It's up to you how to use the file (DA should manage it)
#	#	if [ ${MM_CFG} -eq 0 ]; then
#	#    echo 'DEFAULT_EMAIL_HOST = \'mail.domain.com\'' >> ${MM_CFG}
#	#    echo 'DEFAULT_URL_HOST = \'www.domain.com\'' >> ${MM_CFG}
#	#    echo 'IMAGE_LOGOS = \'/mailman_images/\'' >> ${MM_CFG}
#	#    echo 'add_virtualhost(DEFAULT_URL_HOST, DEFAULT_EMAIL_HOST)' >> ${MM_CFG}
#	#    echo 'VIRTUAL_HOSTS = {\'www.example.com\': \'example.com\',' >> ${MM_CFG}
#	#    echo '                 \'www.example2.com\': \'example2.com\'}' >> ${MM_CFG}
#	#	echo '#Syntax is {virt ":" real "," virt ":" real}' >> ${MM_CFG}
#	#	fi
#
#	#Changes for suexec (fixing "error: directory is writable by others")
#	chmod 755 /usr/local/mailman/cgi-bin
#	chmod u-s,g-s /usr/local/mailman/cgi-bin/*
#	chmod 777 /usr/local/mailman/logs
#	chown -R mailman:mailman /usr/local/mailman
#
#	RANDOM_PASS="`perl -le'print map+(A..Z,a..z,0..9)[rand 62],0..7'`";
#	DA_HOSTNAME=`hostname`
#	
#	#Create a mailman list
#	/usr/local/mailman/bin/newlist -q -e ${DA_HOSTNAME} mailman mailman@${DA_HOSTNAME} ${RANDOM_PASS}
#	echo "Password of the mailman mailing list: ${RANDOM_PASS}"
#	#Apply template to the sitelist
#	/usr/local/mailman/bin/config_list -i /usr/local/mailman/data/sitelist.cfg mailman
#	
#	#Add mailman mailing list to /etc/aliases (required by mailman)
#	COUNT_MAILMAN=`grep -c mailman /etc/aliases`
#	if [ ${COUNT_MAILMAN} -eq 0 ]; then
#		echo '## mailman mailing list' >> /etc/aliases
#		echo 'mailman:              "|/usr/local/mailman/mail/mailman post mailman"' >> /etc/aliases
#		echo 'mailman-admin:        "|/usr/local/mailman/mail/mailman admin mailman"' >> /etc/aliases
#		echo 'mailman-bounces:      "|/usr/local/mailman/mail/mailman bounces mailman"' >> /etc/aliases
#		echo 'mailman-confirm:      "|/usr/local/mailman/mail/mailman confirm mailman"' >> /etc/aliases
#		echo 'mailman-join:         "|/usr/local/mailman/mail/mailman join mailman"' >> /etc/aliases
#		echo 'mailman-leave:        "|/usr/local/mailman/mail/mailman leave mailman"' >> /etc/aliases
#		echo 'mailman-owner:        "|/usr/local/mailman/mail/mailman owner mailman"' >> /etc/aliases
#		echo 'mailman-request:      "|/usr/local/mailman/mail/mailman request mailman"' >> /etc/aliases
#		echo 'mailman-subscribe:    "|/usr/local/mailman/mail/mailman subscribe mailman"' >> /etc/aliases
#		echo 'mailman-unsubscribe:  "|/usr/local/mailman/mail/mailman unsubscribe mailman"' >> /etc/aliases
#	fi
#
## Needs an exception in DA binary to function, because the process is python, which is calling mailmanctl	
##	set_service mailmanctl ON
#	
#	echo "Restarting Exim."
#	${INITDDIR}/exim restart
#	
#	echo "Restarting Mailman."
#	${INITDDIR}/mailman restart
#
#	echo "Done Mailman.";
#	
#}

####################################################

doPhp(){
	if [ ! -e /usr/local/lib/libxml2.so ]; then
		if [ ! -e /usr/lib/libxslt.so ]; then
			doLibxml2;
		fi
	fi

	if [ ! -e /usr/local/lib/libxslt.so ]; then
		if [ ! -e /usr/lib/libxslt.so ]; then
			doLibxslt;
		fi
	fi

	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ ! -d /etc/httpd/conf/extra ]; then
			checkLibz;
			doApache2;
		fi
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		if [ ! -d ${NGINXCONF} ]; then
			checkLibz;
			doNginx;
		fi
	fi
	
	if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
		if [ ! -s ${SUPHP_SO} ]; then
			doSuPhp;
		fi
	fi
		
	#just double check the location of libmysqlclient.so
	if [ -e /usr/lib64 ]; then
		if [ ! -e /usr/lib64/mysql/libmysqlclient.so ] && [ -e /usr/lib64/libmysqlclient.so ]; then
			ln -s ../libmysqlclient.so /usr/lib64/mysql/libmysqlclient.so
		fi
	fi	

        #if [ -e /etc/fedora-release ]; then
        if [ -e /usr/lib/libmysqlclient.so ] && [ ! -e /usr/lib/mysql/libmysqlclient.so ]; then
                ln -s /usr/lib/libmysqlclient.so /usr/lib/mysql/libmysqlclient.so
        fi
        #fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		doApacheCheck;
	fi
	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ ! -d /usr/local/icu/lib ]; then
		doICU;
	fi
		
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		echo -n "" > ${PHPMODULES}
	fi

	doPhp_build ${PHP1_RELEASE} ${PHP1_MODE}
	if [ "${PHP2_RELEASE}" != "no" ]; then
		doPhp_build ${PHP2_RELEASE} ${PHP2_MODE}
	fi
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ -e ${PHPMODULES} ]; then
			COUNT="`grep -c 'suphp_module' ${PHPMODULES}`"
			if [ "${HAVE_SUPHP_CGI}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's|^LoadModule suphp_module|#LoadModule suphp_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -c 'ruid2_module' ${PHPMODULES}`"
			if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_ruid2.so ]; then
					doModRuid2;
			fi
			if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
				echo "Mutex posixsem" >> ${PHPMODULES}
			fi
			
			if [ "${HAVE_CLI}" = "no" ]; then
				COUNT="`grep -c 'htscanner_module' ${PHPMODULES}`"
				if [ "${HTSCANNER_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_htscanner2.so ]; then
						doModHtscanner;
				fi
				if [ "${HTSCANNER_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
					perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
					echo "LoadModule	htscanner_module		/usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
				fi
			elif [ "${HAVE_CLI}" = "yes" ]; then
				COUNT="`grep -c 'htscanner_module' ${PHPMODULES}`"
				if [ "${HTSCANNER_OPT}" = "yes" ] && [ ${COUNT} -gt 0 ]; then
					perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
					perl -pi -e 's|^LoadModule htscanner_module|^#LoadModule htscanner_module' ${PHPMODULES}
				fi
			fi
		fi
		#Use event MPM for CGI (FPM) and prefork for cli (mod_php)
		if [ "${HAVE_CLI}" = "no" ]; then
			# Add to httpd-phpmodules.conf
			echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
		else
			# Add to httpd-phpmodules.conf
			echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
		fi
	fi
	
	if [ "${HAVE_CLI}" = "yes" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ] || [ "${PHP1_RELEASE}" = "5.4" ] || [ "${PHP1_RELEASE}" = "5.5" ]; then
			# Change httpd.conf info
			perl -pi -e 's/^LoadModule php4/\#LoadModule php4/' /etc/httpd/conf/httpd.conf
			# Add to httpd-phpmodules.conf
			echo "LoadModule	php5_module		/usr/lib/apache/libphp5.so" >> ${PHPMODULES}
		fi
	fi
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		doFastcgiConf;
		if [ "${WEBSERVER_OPT}" = "apache" ]; then
			if [ -e ${PHPMODULES} ]; then
				if [ ! -e /usr/lib/apache/mod_fastcgi.so ]; then
						doModFastCGI;
				fi
				COUNT="`grep -c 'fastcgi_module' ${PHPMODULES}`"
				if [ "${COUNT}" -eq 0 ]; then
					perl -pi -e 's|^LoadModule	mod_fastcgi|#LoadModule	mod_fastcgi|' /etc/httpd/conf/httpd.conf
					echo "LoadModule	fastcgi_module		/usr/lib/apache/mod_fastcgi.so" >> ${PHPMODULES}
				fi
				COUNT="`grep -c 'httpd-fastcgi.conf' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					echo "Include /etc/httpd/conf/extra/httpd-fastcgi.conf" >> ${PHPMODULES}
				fi
			fi
		fi
				
				
		if [ ! -s /etc/logrotate.d/php-fpm ] && [ ${OS} != "FreeBSD" ]
		then
			wget ${WEBPATH}/php-fpm.logrotate -O /etc/logrotate.d/php-fpm
		fi
	fi
	
	if [ "${HAVE_FCGID}" = "yes" ]; then
		if [ -e ${PHPMODULES} ]; then
			if [ ! -s /usr/lib/apache/mod_fcgid.so ]; then
					doModFCGID;
			fi
			COUNT="`grep -c 'fcgid_module' ${PHPMODULES}`"
			if [ "${COUNT}" -eq 0 ]; then
				perl -pi -e 's|^LoadModule	mod_fcgid|#LoadModule	mod_fcgid|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	fcgid_module		/usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -c 'httpd-fcgid.conf' ${PHPMODULES}`"
			if [ ${COUNT} -eq 0 ]; then
				echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
			fi
		fi
	fi

	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ "${NEWCONFIGS}" = "1" ]; then
			perl -pi -e 's/^LoadModule mod_php/\#LoadModule mod_php/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule php/\#LoadModule php/' /etc/httpd/conf/httpd.conf
		fi
	fi
	
	doPhpConf;
	doExtensions 1;
	
	fpmChecks;
		
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		echo "Rewriting all users httpd.conf files, please wait...";
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Rewriting all users nginx.conf files, please wait...";
		echo "action=rewrite&value=nginx" >> ${TASK_QUEUE}
	fi
	
	/usr/local/directadmin/dataskq d --custombuild

	cagefsctl_update;
	
	if [ "${PHP1_MODE}" = "php-fpm" ] || [ "${PHP1_MODE}" = "suphp" ] || [ "${PHP1_MODE}" = "fastcgi" ]; then
		if [ "${PHP1_RELEASE}" = "5.3" ]; then
			ln -sf /usr/local/php53/bin/php53 /usr/local/bin/php
			if [ "${PHP1_MODE}" = "php-fpm" ]; then
				echo "Restarting php-fpm53."
				${INITDDIR}/php-fpm53 restart
			fi
		elif [ "${PHP1_RELEASE}" = "5.4" ]; then
			ln -sf /usr/local/php54/bin/php54 /usr/local/bin/php
			if [ "${PHP1_MODE}" = "php-fpm" ]; then
				echo "Restarting php-fpm54."
				${INITDDIR}/php-fpm54 restart
			fi
		elif [ "${PHP1_RELEASE}" = "5.5" ]; then
			ln -sf /usr/local/php55/bin/php55 /usr/local/bin/php
			if [ "${PHP1_MODE}" = "php-fpm" ]; then
				echo "Restarting php-fpm55."
				${INITDDIR}/php-fpm55 restart
			fi
		fi
	fi
	if [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		if [ "${PHP2_RELEASE}" = "5.3" ]; then
			echo "Restarting php-fpm53."
			${INITDDIR}/php-fpm53 restart
		elif [ "${PHP2_RELEASE}" = "5.4" ]; then
			echo "Restarting php-fpm54."
			${INITDDIR}/php-fpm54 restart
		elif [ "${PHP2_RELEASE}" = "5.5" ]; then
			echo "Restarting php-fpm55."
			${INITDDIR}/php-fpm55 restart
		fi
	fi

	if [ -s /usr/local/bin/php ] && [ ! -e /bin/php ]; then
		ln -s /usr/local/bin/php /bin/php
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		echo "Restarting apache."
		${INITDDIR}/httpd restart
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Restarting nginx."
		${INITDDIR}/nginx restart
	fi
}

####################################################

secure_php(){
	secure_phpini ${PHP_INI};
	secure_phpini ${PHP_INI_FPM53};
	secure_phpini ${PHP_INI_FPM54};
	secure_phpini ${PHP_INI_FPM55};
	secure_phpini ${PHP_INI_SUPHP53};
	secure_phpini ${PHP_INI_SUPHP54};
	secure_phpini ${PHP_INI_SUPHP55};
	echo "PHP has been secured."
}

####################################################

compile_coreutils() {
	if [ "${JAIL_OPT}" != "yes" ]; then
		echo "You cannot install jail environment, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	cd ${CWD};
	getFile coreutils-${COREUTILS_VER}.tar.gz
	if [ $OS = "FreeBSD" ]; then
		cp -f /usr/bin/su ./jail/su
		cd ${CWD}
		return;
	fi

	NAME=coreutils-${COREUTILS_VER}
	FILE=${NAME}.tar.gz
	
	if [ ! -e $FILE ]; then
		echo "Cannot find $FILE.  Run './build update_data'";
		cd ${CWD}
		return; 
	fi

	tar xzf $FILE --no-same-owner;

	cd $NAME;
	./configure
	
	if [ $? -ne 0 ]; then
		$ECHO -e "\n*** The configure has failed ***";
		cd ${CWD}
		return;
	fi

	make
	cd src
	make su
	
	if [ $? -ne 0 ]; then
		$ECHO -e "\n*** The make has failed ***";
		cd ${CWD}
		return;
	fi

	cd ..

	cp -f ./src/su ../jail/su
}

####################################################

compile_shell() {
	if [ "${JAIL_OPT}" != "yes" ]; then
		echo "You cannot install jail environment, because you do not have it set in options.conf file.";
		exit 1;
	fi

	cd ${CWD};

	getFile jail-${JAIL_VER}.tar.gz jail
	tar xzf jail-${JAIL_VER}.tar.gz --no-same-owner
		
	if [ ! -d ${JAIL_DIR} ]; then
		mkdir -p ${JAIL_DIR}
	fi
	cd ${JAIL_DIR};

	gcc -o jail chrootshell.c
	
	if [ $? -ne 0 ]; then
		$ECHO -e "\n*** The make has failed ***";
		cd ${CWD};
		return;
	fi

	cp -f jail /bin/jail
	chmod 6755 /bin/jail

	COUNT=`grep -c '/bin/jail' $SHELLS`;
	if [ $COUNT -eq 0 ]; then
		echo "/bin/jail" >> $SHELLS;
	fi
}

####################################################

compile_nbsmtp() {
	if [ "${JAIL_OPT}" != "yes" ]; then
		echo "You cannot install jail environment, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	cd ${CWD};
	getFile nbsmtp-${NB_SMTP_VER}.tar.gz
	FILE=nbsmtp-${NB_SMTP_VER}.tar.gz

	tar xzf $FILE --no-same-owner
	cd nbsmtp-${NB_SMTP_VER}
	./configure
	make
        if [ $? -ne 0 ]; then
        	$ECHO -e "\n*** The make has failed ***";
			cd ${JAIL_DIR};
        	return;
        fi

	cp nbsmtp ../jail/nbsmtp
}

####################################################

doProftpd(){
	if [ "${FTPD_OPT}" != "proftpd" ]; then
		echo "You cannot install ProFTPD, because you do not have it set in options.conf file.";
		exit 1;
	fi

	getFile proftpd-${PROFTPD_VER}.tar.gz proftpd
	getFile proftpd
	getFile proftpd_freebsd
	getFile proftpd_debian

	quitIfLocked doProftpd
	
	# Setting a new temp dir (in case /tmp is noexec,nosuid)
	if [ "${OS}" = "FreeBSD" ]; then
		TDIR=/root/.pkg.tmp
		mkdir -p $TDIR
		setenv PKG_TMPDIR $TDIR
	fi
	cd ${CWD};
	FILE=${CWD}/proftpd-${PROFTPD_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";

	tar xzf ${FILE} --no-same-owner
	chown -R root:${ROOT_GRP} proftpd-${PROFTPD_VER}
	cd proftpd-${PROFTPD_VER}

	# Backup ProFTPD config
	rm -f /etc/proftpd.conf.old
	cp /etc/proftpd.conf /etc/proftpd.conf.old

	#swap prefix for freebsd
	if [ "$OS" = "FreeBSD" ]; then
		perl -pi -e "s#prefix=/usr #prefix=$PROFTPD_PREFIX #" ${CWD}/${PROFTPD_CONFIGURE}

		if [ "${PROFTPD_CONFIGURE}" = "configure/proftpd/configure.proftpd" ]; then
			perl -pi -e 's/enable-nls/disable-nls/' ${CWD}/${PROFTPD_CONFIGURE}
		fi

	fi

	echo "Configuring proftpd-${PROFTPD_VER}...";
	${CWD}/${PROFTPD_CONFIGURE}

	echo "Done. Making proftpd-${PROFTPD_VER}...";
	while
	echo "Trying to make ProFTPD..."
	do
	{
                if [ "${OS}" = "FreeBSD" ]; then
                        /usr/local/bin/gmake -j ${CPU_CORES}
                else
			make -j ${CPU_CORES}
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
			 else
                                if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                         fi

			 if [ "${yesno}" = "n" ]
			 then
				do_exit 0;
			 fi
		else
			break;
		fi
	}
	done
	echo "Make complete";

	echo "Installing proftpd-${PROFTPD_VER}...";
	make install
	
	if [ ! -e ${INITDDIR}/proftpd ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			cp ${CWD}/proftpd_freebsd ${INITDDIR}/proftpd
			chmod 755 ${INITDDIR}/proftpd
		elif [ -e /etc/debian_version ]; then
			cp ${CWD}/proftpd_debian ${INITDDIR}/proftpd
			chmod 755 ${INITDDIR}/proftpd
		else
			mkdir -p /var/run/proftpd
			cp ${CWD}/proftpd ${INITDDIR}/proftpd
			chmod 755 ${INITDDIR}/proftpd
		fi
	fi
	
	if [ -e ${INITDDIR}/proftpd ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			if [ -e ${INITDDIR}/pure-ftpd ]; then
				rm -f ${INITDDIR}/pure-ftpd
			fi
		elif [ -e /etc/debian_version ]; then
			update-rc.d proftpd defaults
			if [ -e ${INITDDIR}/pure-ftpd ]; then
				update-rc.d -f pure-ftpd remove
			fi
		else
			/sbin/chkconfig proftpd on
			if [ -e ${INITDDIR}/pure-ftpd ]; then
				/sbin/chkconfig pure-ftpd off
			fi
		fi
		
		killall -9 pure-ftpd
	fi
	
	echo "Done proftpd.";
	removeLockfile

	# Removing the temp dir
	if [ "${OS}" = "FreeBSD" ]; then
		rm -rf $TDIR
		unsetenv PKG_TMPDIR
	fi

	# Linking configs
	rm -f /usr/local/etc/proftpd.conf
	ln -sf /etc/proftpd.conf /usr/local/etc/proftpd.conf

	perl -pi -e 's/DisplayFirstChdir/DisplayChdir/' /etc/proftpd.conf

	#setup the directadmin.conf
	setVal pureftp 0 ${DACONF_TEMPLATE_FILE}
	setVal pureftp 0 ${DACONF_FILE}
	
	set_service pure-ftpd delete
	set_service proftpd ON
	
	killall pure-ftpd
	
	cagefsctl_update;
	
	cd ${CWD}
	echo "Restarting ProFTPd."
	${INITDDIR}/proftpd restart
}

####################################################

doPureftpd(){
	if [ "${FTPD_OPT}" != "pureftpd" ]; then
		echo "You cannot install Pure-FTPd, because you do not have it set in options.conf file.";
		exit 1;
	fi

	getFile pure-ftpd-${PUREFTPD_VER}.tar.gz pureftpd
	getFile pure-ftpd
	getFile pure-ftpd_freebsd
	getFile pure-ftpd_debian

	quitIfLocked doPureftpd

	cd ${CWD};
	FILE=${CWD}/pure-ftpd-${PUREFTPD_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";

	tar xzf ${FILE} --no-same-owner
	chown -R root:${ROOT_GRP} pure-ftpd-${PUREFTPD_VER}
	cd pure-ftpd-${PUREFTPD_VER}

	echo "Configuring pure-ftpd-${PUREFTPD_VER}...";
	${CWD}/${PUREFTPD_CONFIGURE}

	echo "Done. Making pure-ftpd-${PUREFTPD_VER}...";
	while
	echo "Trying to make Pure-FTPd..."
	do
	{
                if [ "${OS}" = "FreeBSD" ]; then
                        /usr/local/bin/gmake -j ${CPU_CORES}
                else
			make -j ${CPU_CORES}
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				$ECHO -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
			 else
                                if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                         fi

			 if [ "${yesno}" = "n" ]
			 then
				do_exit 0;
			 fi
		else
			break;
		fi
	}
	done
	echo "Make complete";

	echo "Installing pure-ftpd-${PUREFTPD_VER}...";
	make install
	
	if [ ! -e /etc/pure-ftpd.pem ]; then
		if [ -e /etc/exim.cert ] && [ -e /etc/exim.key ]; then
			cat /etc/exim.cert > /etc/pure-ftpd.pem
			cat /etc/exim.key >> /etc/pure-ftpd.pem
		fi
	fi

	if [ ! -e /etc/pure-ftpd.pem ]; then
		if [ -e /etc/exim.crt ] && [ -e /etc/exim.key ]; then
			cat /etc/exim.crt > /etc/pure-ftpd.pem
			cat /etc/exim.key >> /etc/pure-ftpd.pem
		fi
	fi
	
	if [ ! -e ${INITDDIR}/pure-ftpd ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			cp ${CWD}/pure-ftpd_freebsd ${INITDDIR}/pure-ftpd
			chmod 755 ${INITDDIR}/pure-ftpd
		elif [ -e /etc/debian_version ]; then
			cp ${CWD}/pure-ftpd_debian ${INITDDIR}/pure-ftpd
			chmod 755 ${INITDDIR}/pure-ftpd
		else
			cp ${CWD}/pure-ftpd ${INITDDIR}/pure-ftpd
			chmod 755 ${INITDDIR}/pure-ftpd
		fi
	fi
	
	if [ -e ${INITDDIR}/pure-ftpd ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			if [ -e ${INITDDIR}/proftpd ]; then
				rm -f ${INITDDIR}/proftpd
			fi
		elif [ -e /etc/debian_version ]; then
			update-rc.d pure-ftpd defaults
			if [ -e ${INITDDIR}/proftpd ]; then
				update-rc.d -f proftpd remove
			fi
		else
			/sbin/chkconfig pure-ftpd on
			if [ -e ${INITDDIR}/proftpd ]; then
				/sbin/chkconfig proftpd off
			fi
		fi
		
		killall -9 proftpd
	fi
	
	echo "Done pure-ftpd.";
	removeLockfile

	#setup the directadmin.conf
	setVal pureftp 1 ${DACONF_TEMPLATE_FILE}
	setVal pureftp 1 ${DACONF_FILE}

	killall proftpd
	
	doRestartDA;
	
	set_service proftpd delete
	set_service pure-ftpd ON
	
	killall proftpd
	
	pure-pw mkdb /etc/pureftpd.pdb -f /etc/proftpd.passwd

	if [ ! -e /etc/logrotate.d/pure-ftpd ] && [ ${OS} != "FreeBSD" ]
        then
		wget ${WEBPATH}/pure-ftpd.logrotate -O /etc/logrotate.d/pure-ftpd
	fi
	
	cagefsctl_update;
	
	cd ${CWD}
	echo "Restarting Pure-FTPd."
	${INITDDIR}/pure-ftpd restart
}

####################################################

doUpdateDA()
{
    echo "${boldon}Updating DirectAdmin${boldoff}"
    echo "action=update&value=program" >> ${TASK_QUEUE}
    /usr/local/directadmin/dataskq --custombuild
}

####################################################

doVersions() {
	cd ${CWD}

	VERSIONS=$1

	if [ -e /usr/local/directadmin/directadmin ]; then
			DIRECTADMINV="`/usr/local/directadmin/directadmin v | awk '{ print $3 }' | cut -d. -f2,3,4`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of DirectAdmin: ${DIRECTADMIN_VER}"
				echo "Installed version of DirectAdmin: ${DIRECTADMINV}"
				echo ""
			fi
			if [ "${DIRECTADMIN_VER}" != "${DIRECTADMINV}" ]; then
				if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "3" ]; then
					doUpdateDA;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}DirectAdmin ${DIRECTADMINV} to ${DIRECTADMIN_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ] && [ -e /usr/sbin/httpd ]; then
		APACHEV="`/usr/sbin/httpd -v | grep 'Server version:' | awk '{ print $3 }' | cut -d/ -f2`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of Apache: ${APACHE2_VER}"
			echo "Installed version of Apache: ${APACHEV}"
			echo ""
		fi
		if [ "${APACHE2_VER}" != "${APACHEV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating Apache${boldoff}"
				doApache2;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}Apache ${APACHEV} to ${APACHE2_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx" ] && [ -e /usr/sbin/nginx ]; then
		NGINXV="`/usr/sbin/nginx -v 2>&1 | cut -d'/' -f2`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of Nginx: ${NGINX_VER}"
			echo "Installed version of Nginx: ${NGINXV}"
			echo ""
		fi
		if [ "${NGINX_VER}" != "${NGINXV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating Nginx${boldoff}"
				doNginx;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}Nginx ${NGINXV} to ${NGINX_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi


	if [ "${FTPD_OPT}" = "proftpd" ]; then
		if [ -e $PROFTPD_PREFIX/sbin/proftpd ]; then
			PROFTPDV="`$PROFTPD_PREFIX/sbin/proftpd -v 2>&1 | awk '{ print $3 }'`"
                        if [ "$PROFTPDV" = "Version" ]; then
                                PROFTPDV="`$PROFTPD_PREFIX/sbin/proftpd -v 2>&1 | awk '{ print $4 }'`"
                        fi
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of ProFTPD: ${PROFTPD_VER}"
				echo "Installed version of ProFTPD: ${PROFTPDV}"
				echo ""
			fi
			if [ "${PROFTPD_VER}" != "${PROFTPDV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating ProFTPD${boldoff}"
					doProftpd;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}ProFTPD ${PROFTPDV} to ${PROFTPD_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi

	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		if [ -e /usr/sbin/pure-ftpd ]; then
			PUREFTPDV="`/usr/sbin/pure-ftpd -h | grep pure-ftpd | awk '{print $2}' | cut -dv -f2`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of Pure-FTPD: ${PUREFTPD_VER}"
				echo "Installed version of Pure-FTPd: ${PUREFTPDV}"
				echo ""
			fi
			if [ "${PUREFTPD_VER}" != "${PUREFTPDV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Pure-FTPd${boldoff}"
					doPureftpd;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Pure-FTPD ${PUREFTPDV} to ${PUREFTPD_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	if [ "${AUTOCONF_OPT}" = "yes" ]; then
		if [ -e /usr/local/bin/autoconf ]; then
			AUTOCONFV="`/usr/local/bin/autoconf --version | grep '(GNU Autoconf)' | awk '{ print $4 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of autoconf: ${AUTOCONF_VER}"
				echo "Installed version of autoconf: ${AUTOCONFV}"
				echo ""
			fi
			if [ "${AUTOCONF_VER}" != "${AUTOCONFV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating autoconf${boldoff}"
					doAutoconf;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Autoconf ${AUTOCONFV} to ${AUTOCONF_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	if [ "${AUTOMAKE_OPT}" = "yes" ]; then
		if [ -e /usr/local/bin/automake ]; then
			AUTOMAKEV="`/usr/local/bin/automake --version | grep '(GNU automake)' | awk '{ print $4 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of automake: ${AUTOMAKE_VER}"
				echo "Installed version of automake: ${AUTOMAKEV}"
				echo ""
			fi
			if [ "${AUTOMAKE_VER}" != "${AUTOMAKEV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating automake${boldoff}"
					doAutomake;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Automake ${AUTOMAKEV} to ${AUTOMAKE_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi

	if [ "${LIBTOOL_OPT}" = "yes" ]; then
		if [ -e /usr/local/bin/libtool ]; then
			LIBTOOLV="`/usr/local/bin/libtool --version | grep '(GNU libtool)' | awk '{ print $4 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of libtool: ${LIBTOOL_VER}"
				echo "Installed version of libtool: ${LIBTOOLV}"
				echo ""
			fi
			if [ "${LIBTOOL_VER}" != "${LIBTOOLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating libtool${boldoff}"
					doLibtool;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Libtool ${LIBTOOLV} to ${LIBTOOL_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	if [ -s ${STRINGS} ] && [ -s ${STAT} ] && [ -s ${TR} ]; then
		if [ -s /usr/local/lib/libpng12.so ]; then
			LIBPNGV="`${STRINGS} /usr/local/lib/libpng12.so | grep 'libpng version' | head -n1 | awk '{print $3}'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of libpng: ${PNG_VER}"
				echo "Installed version of libpng: ${LIBPNGV}"
				echo ""
			fi
			if [ "${LIBPNGV}" != "${PNG_VER}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating libpng${boldoff}"
					doLibPng;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Libpng ${LIBPNGV} to ${PNG_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			if [ -s /usr/lib/apache/mod_ruid2.so ]; then
				MODRUID2V="`${STRINGS} /usr/lib/apache/mod_ruid2.so | grep 'mod_ruid2/' | awk '{print $1}' | cut -d/ -f2`"
				if [ "${VERSIONS}" = "1" ]; then
					echo "Latest version of mod_ruid2: ${MODRUID2V}"
					echo "Installed version of mod_ruid2: ${MOD_RUID2_VER}"
					echo ""
				fi
				if [ "${MODRUID2V}" != "${MOD_RUID2_VER}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating mod_ruid2${boldoff}"
						doModRuid2;
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}mod_ruid2 ${MODRUID2V} to ${MOD_RUID2_VER} update is available.${boldoff}"
						echo ""
					fi
				fi
			fi
		fi
		
		if [ -e /usr/local/icu/lib/icu/current ] && [ -e ${READLINK} ]; then
			ICU4CV="`${READLINK} /usr/local/icu/lib/icu/current`"
			CURRENT_ICU4C="`echo ${ICU_VER} | ${TR} '_' '.'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of ICU4C: ${ICU4CV}"
				echo "Installed version of ICU4C: ${CURRENT_ICU4C}"
				echo ""
			fi
			if [ "${ICU4CV}" != "${CURRENT_ICU4C}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating ICU4C${boldoff}"
					doICU;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}ICU4C ${CURRENT_ICU4C} to ${ICU4CV} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
		
		if [ -e /usr/local/lib/libxslt.so ]; then
			LIBXSLTV="`${STAT} /usr/local/lib/libxslt.so | head -n1 | awk '{print $4}' | cut -d. -f 3,4,5 | cut -d\' -f1`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of libxslt: ${LIBXSLT_VER}"
				echo "Installed version of libxslt: ${LIBXSLTV}"
				echo ""
			fi
			if [ "${LIBXSLT_VER}" != "${LIBXSLTV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating libxslt${boldoff}"
					doLibxslt;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}libxslt ${LIBXSLTV} to ${LIBXSLT_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
		
		if [ -e /usr/local/lib/libxml2.so ]; then
			LIBXML2V="`${STAT} /usr/local/lib/libxml2.so | head -n1 | awk '{print $4}' | cut -d. -f 3,4,5 | cut -d\' -f1`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of libxml2: ${LIBXML2_VER}"
				echo "Installed version of libxml2: ${LIBXML2V}"
				echo ""
			fi
			if [ "${LIBXML2_VER}" != "${LIBXML2V}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating libxml2${boldoff}"
					doLibxml2;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}libxml2 ${LIBXML2V} to ${LIBXML2_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi

	fi

	if [ -e /usr/local/bin/iconv ]; then
		ICONVV="`/usr/local/bin/iconv --version | head -n1 | awk '{print $4}' | tr -d ')'`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of iconv: ${ICONV_VER}"
			echo "Installed version of iconv: ${ICONVV}"
			echo ""
		fi
		if [ "${ICONV_VER}" != "${ICONVV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating iconv${boldoff}"
				doIconv;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}iconv ${ICONVV} to ${ICONV_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi
	
	if [ -e /usr/local/bin/m4 ]; then
		M4V="`/usr/local/bin/m4 --version | head -n1 | awk '{print $4}' | tr -d ')'`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of m4: ${M4_VER}"
			echo "Installed version of m4: ${M4V}"
			echo ""
		fi
		if [ "${M4_VER}" != "${M4V}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating m4${boldoff}"
				doM4;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}m4 ${M4V} to ${M4_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi
	
	if [ -e /usr/local/bin/pcre-config ]; then
		PCREV="`/usr/local/bin/pcre-config --version`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of PCRE: ${PCRE_VER}"
			echo "Installed version of PCRE: ${PCREV}"
			echo ""
		fi
		if [ "${PCRE_VER}" != "${PCREV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating PCRE${boldoff}"
				doPCRE;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}PCRE ${PCREV} to ${PCRE_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi

	if [ "${CURL_OPT}" = "yes" ]; then
		if [ -e /usr/local/bin/curl ]; then
			CURLV="`/usr/local/bin/curl --version | grep libcurl | awk '{ print $2}'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of curl: ${CURL_VER}"
				echo "Installed version of curl: ${CURLV}"
				echo ""
			fi
			if [ "${CURL_VER}" != "${CURLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating cURL${boldoff}"
					doCURL;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}cURL ${CURLV} to ${CURL_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi

	if [ -e /usr/local/bin/freetype-config ]; then
		FREETYPEV="`/usr/local/bin/freetype-config --ftversion`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of FreeType: ${FREETYPE_VER}"
			echo "Installed version of FreeType: ${FREETYPEV}"
			echo ""
		fi
		if [ "${FREETYPE_VER}" != "${FREETYPEV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating FreeType${boldoff}"
				doFreeType;
				echo "It is recommended to run \"$0 php n\" after FreeType update."
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}FreeType ${FREETYPEV} to ${FREETYPE_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi

	if [ "${AWSTATS_OPT}" = "yes" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of AWstats: ${AWSTATS_VER}"
		fi
		AWSTATSV=0
		if [ -e /usr/local/awstats ]; then
			AWSTATSV="`ls -ld /usr/local/awstats | cut -d\> -f2 | cut -d- -f2`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of AWstats: ${AWSTATSV}"
				echo ""
			fi
		fi

		if [ "${AWSTATS_VER}" != "${AWSTATSV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating AWstats.${boldoff}"
				doawstats;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}AWstats ${AWSTATSV} to ${AWSTATS_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi
	
	if [ "${DOVECOT_OPT}" = "yes" ]; then
		if [ -e /usr/sbin/dovecot ]; then
			DOVECOTV="`/usr/sbin/dovecot --version`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of dovecot: ${DOVECOT_VER}"
				echo "Installed version of dovecot: ${DOVECOTV}"
				echo ""
			fi
			if [ "${DOVECOT_VER}" != "${DOVECOTV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Dovecot${boldoff}"
					doDovecot;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Dovecot ${DOVECOTV} to ${DOVECOT_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	if [ "${EXIM_OPT}" = "yes" ]; then
		if [ -e /usr/sbin/exim ]; then
			EXIMV="`/usr/sbin/exim -bV | grep built | head -n1 | awk '{ print $3 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of Exim: ${EXIM_VER}"
				echo "Installed version of Exim: ${EXIMV}"
				echo ""
			fi
			if [ "${EXIM_VER}" != "${EXIMV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Exim${boldoff}"
					doExim
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Exim ${EXIMV} to ${EXIM_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		if [ -e /usr/bin/spamd ]; then
			SPAMASSASSINV=`/usr/bin/spamd --version | grep 'version' | awk '{print $4}'`
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of SpamAssassin: ${SPAMASSASSIN_VER}"
				echo "Installed version of SpamAssassin: ${SPAMASSASSINV}"
				echo ""
			fi
			if [ "${SPAMASSASSIN_VER}" != "${SPAMASSASSINV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating SpamAssassin.${boldoff}"
					dospamassassin;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}SpamAssassin ${SPAMASSASSINV} to ${SPAMASSASSIN_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		CLAMAVV=0
		if [ -e /usr/sbin/clamd ]; then
			CLAMAVV=`/usr/sbin/clamd --version | cut -d/ -f1 | awk '{print $2}'`
		fi
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of ClamAV: ${CLAMAV_VER}"
			echo "Installed version of ClamAV: ${CLAMAVV}"
			echo ""
		fi
		if [ "${CLAMAV_VER}" != "${CLAMAVV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating ClamAV.${boldoff}"
				doclamav;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}ClamAV ${CLAMAVV} to ${CLAMAV_VER} update is available.${boldoff}"
				echo ""			
			fi
		fi
	fi

# Mailman is not yet supported
#	if [ "${MAILMAN_OPT}" = "yes" ]; then
#		MAILMANV=0
#		if [ -e /usr/local/mailman/bin/version ]; then
#			MAILMANV=`/usr/local/mailman/bin/version | awk '{print $4}'`
#		fi
#		if [ "${VERSIONS}" = "1" ]; then
#			echo "Latest version of Mailman: ${MAILMAN_VER}"
#			echo "Installed version of Mailman: ${MAILMANV}"
#			echo ""
#		fi
#		if [ "${MAILMAN_VER}" != "${MAILMANV}" ]; then
#			if [ "${VERSIONS}" = "0" ]; then
#				echo "${boldon}Updating Mailman.${boldoff}"
#				domailman;
#			elif [ "${VERSIONS}" = "1" ]; then
#				echo "${boldon}Mailman ${MAILMANV} to ${MAILMAN_VER} update is available.${boldoff}"
#				echo ""
#			fi
#		fi
#	fi
	
#	UPDATED_MYSQL=0
	if [ "${MYSQLINST_OPT}" = "yes" ]; then
		if [ -e $MYSQL_BIN ]; then
			MYSQLV="`$MYSQL_BIN --version | awk '{ print $5 }' | cut -d , -f1`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of MySQL: ${MYSQL_VER}"
				echo "Installed version of MySQL: ${MYSQLV}"
				echo ""
			fi
			if [ "${MYSQL_VER}" != "${MYSQLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating MySQL.${boldoff}"
					doMySQL;
#					UPDATED_MYSQL=1
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}MySQL ${MYSQLV} to ${MYSQL_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	HAS_CLI=no
	if [ "${PHP1_MODE}" = "mod_php" ]; then
		HAS_CLI=yes
	elif [ "${PHP2_MODE}" = "mod_php" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		HAS_CLI=yes
	fi
	
	HAS_CGI=no
	if [ "${PHP1_MODE}" = "php-fpm" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE}" = "php-fpm" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		HAS_CGI=yes
	fi
	
	if [ "${PHP1_MODE}" = "suphp" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE}" = "suphp" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		HAS_CGI=yes
	fi
	
	if [ "${PHP1_MODE}" = "fastcgi" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE}" = "fastcgi" ] && [ "${PHP2_RELEASE}" != "no" ]; then
		HAS_CGI=yes
	fi

	if [ "${HAS_CGI}" = "yes" ]; then
	  if [ "${HAVE_FPM53_CGI}" = "yes" ] || [ "${HAVE_SUPHP53_CGI}" = "yes" ] || [ "${HAVE_FCGID53}" = "yes" ]; then
		  if [ -e /usr/local/php53/bin/php53 ]; then
			  PHP53VCGI="`/usr/local/php53/bin/php53 -v | grep built | awk '{ print $2 }'`"
			  if [ "${VERSIONS}" = "1" ]; then
				  echo "Latest version of PHP 5.3: ${PHP53_VER}"
				  echo "Installed version of PHP 5.3: ${PHP53VCGI}"
				  echo ""
			  fi
			  if [ "${PHP53_VER}" != "${PHP53VCGI}" ]; then
				  if [ "${VERSIONS}" = "0" ]; then
					  echo "${boldon}Updating PHP 5.3${boldoff}"
					  if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
					    ./build php_expert 5.3 suphp;
					  elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
					    ./build php_expert 5.3 php-fpm;
					    ${INITDDIR}/php-fpm53 restart
					  elif [ "${HAVE_FCGID}" = "yes" ]; then
					    ./build php_expert 5.3 fastcgi;	
					  fi
				  elif [ "${VERSIONS}" = "1" ]; then
					  echo "${boldon}PHP 5.3: ${PHP53VCGI} to ${PHP53_VER} update is available.${boldoff}"
					  echo ""
				  fi
			  fi
		  fi
	  fi
	  if [ "${HAVE_FPM54_CGI}" = "yes" ] || [ "${HAVE_SUPHP54_CGI}" = "yes" ] || [ "${HAVE_FCGID54}" = "yes" ]; then
		if [ -e /usr/local/php54/bin/php54 ]; then
			PHP54VCGI="`/usr/local/php54/bin/php54 -v | grep built | awk '{ print $2 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of PHP 5.4: ${PHP54_VER}"
				echo "Installed version of PHP 5.4: ${PHP54VCGI}"
				echo ""
			fi
			if [ "${PHP54_VER}" != "${PHP54VCGI}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating PHP 5.4 ${boldoff}"
					if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
					  ./build php_expert 5.4 suphp;
					elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
					  ./build php_expert 5.4 php-fpm;
					  ${INITDDIR}/php-fpm54 restart
					elif [ "${HAVE_FCGID}" = "yes" ]; then
					  ./build php_expert 5.4 fastcgi;	
					fi
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}PHP 5.4: ${PHP54VCGI} to ${PHP54_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	  fi
	  if [ "${HAVE_FPM55_CGI}" = "yes" ] || [ "${HAVE_SUPHP55_CGI}" = "yes" ] || [ "${HAVE_FCGID55}" = "yes" ]; then
		if [ -e /usr/local/php55/bin/php55 ]; then
			PHP55VCGI="`/usr/local/php55/bin/php55 -v | grep built | awk '{ print $2 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of PHP 5.5: ${PHP55_VER}"
				echo "Installed version of PHP 5.5: ${PHP55VCGI}"
				echo ""
			fi
			if [ "${PHP55_VER}" != "${PHP55VCGI}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating PHP 5.5 ${boldoff}"
					if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
					  ./build php_expert 5.5 suphp;
					elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
					  ./build php_expert 5.5 php-fpm;
					  ${INITDDIR}/php-fpm55 restart
					elif [ "${HAVE_FCGID}" = "yes" ]; then
					  ./build php_expert 5.5 fastcgi;	
					fi;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}PHP 5.5: ${PHP55VCGI} to ${PHP55_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	  fi
	fi
	
	if [ "${HAS_CLI}" = "yes" ]; then
		if [ -e /usr/local/bin/php ]; then
			PHPVCLI="`/usr/local/bin/php -v | grep built | awk '{ print $2 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				if [ "${HAVE_CLI53}" = "yes" ]; then
					echo "Latest version of PHP (mod_php): ${PHP53_VER}"
				elif [ "${HAVE_CLI54}" = "yes" ]; then
					echo "Latest version of PHP (mod_php): ${PHP54_VER}"
				elif [ "${HAVE_CLI55}" = "yes" ]; then
					echo "Latest version of PHP (mod_php): ${PHP55_VER}"
				fi
				echo "Installed version of PHP (mod_php): ${PHPVCLI}"
				echo ""
			fi
			if [ "${HAVE_CLI53}" = "yes" ]; then
				if [ "${PHP53_VER}" != "${PHPVCLI}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.3 (mod_php)${boldoff}"
						./build php_expert 5.3 mod_php;
						${INITDDIR}/httpd restart
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.3 (mod_php) ${PHPVCLI} to ${PHP53_VER} update is available.${boldoff}"
						echo ""
					fi
				fi
			elif [ "${HAVE_CLI54}" = "yes" ]; then
				if [ "${PHP54_VER}" != "${PHPVCLI}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.4 (mod_php)${boldoff}"
						./build php_expert 5.4 mod_php;
						${INITDDIR}/httpd restart
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.4 (mod_php) ${PHPVCLI} to ${PHP54_VER} update is available.${boldoff}"
						echo ""
					fi
				fi
			elif [ "${HAVE_CLI55}" = "yes" ]; then
				if [ "${PHP55_VER}" != "${PHPVCLI}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.5 (mod_php)${boldoff}"
						./build php_expert 5.5 mod_php;
						${INITDDIR}/httpd restart
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.5 (mod_php) ${PHPVCLI} to ${PHP55_VER} update is available.${boldoff}"
						echo ""
					fi
				fi
			fi
		fi
	fi
	if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
		if [ -e /usr/local/suphp/sbin/suphp ]; then
			SUPHPV="`/usr/local/suphp/sbin/suphp 2>&1 | grep 'suPHP version' | awk '{print $3}'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of suPHP: ${SUPHP_VER}"
				echo "Installed version of suPHP: ${SUPHPV}"
				echo ""
			fi
			if [ "${SUPHP_VER}" != "${SUPHPV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating suPHP.${boldoff}"
					doSuPhp;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}suPHP ${SUPHPV} to ${SUPHP_VER} update is available.${boldoff}"
					echo ""
				fi
			fi
		fi
	fi
	
	if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of RoundCube webmail: ${ROUNDCUBE_VER}"
		fi
		ROUNDCUBEV=0
		if [ -e ${WWWDIR}/roundcube ]; then
			ROUNDCUBEV="`roundcube_version`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of RoundCube webmail: ${ROUNDCUBEV}"
				echo ""
			fi
		fi
		if [ "${ROUNDCUBE_VER}" != "${ROUNDCUBEV}" ]; then
			if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "2" ]; then
				echo "${boldon}Updating RoundCube webmail.${boldoff}"
				doroundcube;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}RoundCube webmail ${ROUNDCUBEV} to ${ROUNDCUBE_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi

	if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of phpMyAdmin: ${PHPMYADMIN_VER}"
		fi
		PHPMYADMINV=0
		if [ -e ${WWWDIR}/phpMyAdmin ]; then
			PHPMYADMINV="`ls -ld ${WWWDIR}/phpMyAdmin | cut -d\> -f2 | cut -d- -f2,3,4`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of phpMyAdmin: ${PHPMYADMINV}"
				echo ""
			fi
		fi
		if [ "${PHPMYADMIN_VER}" != "${PHPMYADMINV}" ]; then
			if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "2" ]; then
				echo "${boldon}Updating phpMyAdmin.${boldoff}"
				dophpMyAdmin;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}phpMyAdmin ${PHPMYADMINV} to ${PHPMYADMIN_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi

	if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of SquirrelMail: ${SQUIRRELMAIL_VER}"
		fi
		SQUIRRELMAILV=0
		if [ -e ${WWWDIR}/squirrelmail ]; then
			SQUIRRELMAILV="`ls -ld ${WWWDIR}/squirrelmail | cut -d\> -f2 | cut -d- -f2,3`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of SquirrelMail: ${SQUIRRELMAILV}"
				echo ""
			fi
		fi
		if [ "${SQUIRRELMAIL_VER}" != "${SQUIRRELMAILV}" ]; then
			if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "2" ]; then
				echo "${boldon}Updating SquirrelMail webmail.${boldoff}"
				doSquirrelmail;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}SquirrelMail webmail ${SQUIRRELMAILV} to ${SQUIRRELMAIL_VER} update is available.${boldoff}"
				echo ""
			fi
		fi
	fi
	
	if [ "${VERSIONS}" = "1" ]; then
		echo "If you want to update all the available versions run: ${boldon}$0 update_versions${boldoff}"
	fi
}

####################################################

doAll_jail() {
	compile_coreutils;
	compile_shell;
	compile_nbsmtp;
}

####################################################

SPEED_FILE_SMALL=10.kb
SPEED_FILE_LARGE=100.kb
#max time for small file test allowed to proceed with large file test.
LARGE_TEST_MAX=25
SPEED_VERBOSE=1
BEST=0
BEST_SEVER=""
KB=1024
MB=1048576
GB=1073741824

speedtest()
{
	${WGET} -O /dev/null --timeout=2 --tries=1 http://${1}/services/${2} 2>&1 | grep saved | cut -d\( -f2 | cut -d\) -f1
}
 
test_server()
{
	i=$1
	VALUE=0
	SPEED=`speedtest $i $2`;

	#can be MB/s or KB/s or B/s

	if [ "${SPEED}" = "" ]; then
		echo "$i is too slow, skipping.";
		continue;
	fi

	NUM=`echo $SPEED | cut -d\  -f1`
	TYPE=`echo $SPEED | cut -d\  -f2`

	case "$TYPE" in
		B/s)    VALUE=$NUM;
			;;
		KB/s)   VALUE=`perl -e "print $KB * $NUM"`;
			;;
		MB/s)   VALUE=`perl -e "print $MB * $NUM"`;
			;;
		GB/s)   VALUE=`perl -e "print $GB * $NUM"`;
			;;
		*)      echo "Unknown speed type $TYPE";
			;;
	esac

	#chop off any decimal bytes.. we dont care about 0.5 byte/second
	VALUE=`echo $VALUE | cut -d. -f1`

	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		$ECHO -e "$VALUE B/s \t- $i"
	fi

	if [ "${VALUE}" -gt "${BEST}" ]; then
		BEST=$VALUE;
		BEST_SERVER=$i
	fi
}
 
 
speed_test()
{
	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		echo "Testing with file $1:";
	fi
	BEST=0
	BEST_SERVER=""
	SPEED_START=`date +%s`
	for s in `cat servers.txt`; do
	{
		test_server $s $1
	};
	done;
	SPEED_END=`date +%s`
	DURATION=`expr $SPEED_END - $SPEED_START`

	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		echo "Total test duration: $DURATION seconds";
		echo "";
	fi
}
 
set_fastest() {

	#quiet mode. Will only output the quickest server.
	if [ "$1" -eq 1 ]; then
		SPEED_VERBOSE=0;
	fi

	getFile servers.txt servers

	speed_test ${SPEED_FILE_SMALL}

	#try and get a more accurate reading with larger file.
	if [ "${DURATION}" -lt ${LARGE_TEST_MAX} ]; then
		speed_test ${SPEED_FILE_LARGE}
	else
		if [ ${SPEED_VERBOSE} -eq 1 ]; then     
			echo "Small file test took longer than ${LARGE_TEST_MAX} seconds.  Not proceeding with large file test.";
		fi
	fi

	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		echo "Fastest server is $BEST_SERVER at $BEST B/s";
	else
		echo "${BEST_SERVER}";
	fi

	if [ "${BEST_SERVER}" != "" ]; then
		setOpt downloadserver ${BEST_SERVER}
	else
		echo "Unable to determine fastest server";
	fi
}

fix_curl_link_for_yum() {
	#check for broken yums on CentOS 6.
	if [ -e /usr/bin/yum ]; then
		BROKEN=`yum --version 2>&1 | head -n 2 | grep -c CRITICAL`
		if [ "$BROKEN" -eq 1 ]; then
			CURLLIB=/usr/local/lib/libcurl.so.4.2.0
			if [ -e $CURLLIB ]; then
				echo "*** Re-linking curl to fix the yum issue: http://help.directadmin.com/item.php?id=385 ***";
				mv $CURLLIB /root/libcurl.so.4.2.0.moved
				ln -s /usr/lib/libcurl.so $CURLLIB
				echo "*** done curl re-link ***";
			else
				echo "*** yum is broken, but cannot find $CURLLIB.  See http://help.directadmin.com/item.php?id=385 ***";
			fi		
		fi		
	fi
}
 
####################################################

doAll() {
        FORCE=1;

	doPCRE;

	checkLibz;

	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		doApache2;
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			doSuPhp;
		fi
		if [ "${HAVE_FCGID}" = "yes" ]; then
			doModFCGID;
		fi
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			doModRuid2;
		fi
		if [ "${HAVE_FPM_CGI}" = "yes" ]; then
			doModFastCGI;
		fi
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		doNginx;
	fi
	
	
#        doAutoconf;

#        doAutomake;

#        doLibtool;

        doLibJpeg;

        doLibPng;

        doCURL;

        doMCrypt;

        doMHash;

        doFreeType;

        doIconv;

        if [ "${MYSQLINST_OPT}" = "yes" ]; then
                doMySQL;
        fi

	if [ "${JAIL_OPT}" = "yes" ]; then
		doAll_jail;
	fi

	if [ ! -d /usr/local/icu/lib ]; then
		doICU;
	fi

	doLibxml2;

	doLibxslt;

        doPhp n;

	if [ "${WEBALIZER_OPT}" = "yes" ]; then
		doWebalizer;
	fi
	
	if [ "${AWSTATS_OPT}" = "yes" ]; then
		doawstats;
	fi
		
        if [ "${EXIM_OPT}" = "yes" ]; then
                doExim;
        fi

        if [ "${DOVECOT_OPT}" = "yes" ]; then
                doDovecot;
        fi

        if [ "${FTPD_OPT}" = "proftpd" ]; then
                doProftpd;
        fi
		
	if [ "${FTPD_OPT}" = "pureftpd" ]; then
                doPureftpd;
        fi

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		dospamassassin;
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		doclamav;
	fi
		
# Mailman is not yet supported		
#		if [ "${MAILMAN_OPT}" = "yes" ]; then
#			domailman;
#		fi
		
        chown -R root:${ROOT_GRP} ${WORKDIR}
		
        if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
                doroundcube;
        fi

        if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
                dophpMyAdmin;
        fi

        if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
                doSquirrelmail;
        fi

        if [ "${ZEND_OPT}" = "yes" ]; then
                doZend;
        fi
		
		if [ "${IONCUBE_OPT}" = "yes" ]; then
                doIoncube;
        fi

        if [ "${EXIMCONF_OPT}" = "yes" ]; then
                doEximConf;
        fi

        if [ "${PHPINI_OPT}" = "yes" ]; then
                doPhpIni;
        fi
        
        fix_curl_link_for_yum;

        $ECHO -e "\n\n\n";
        echo "*************************************";
        echo "*                                   *";
        echo "*   All parts have been installed   *";
        echo "*                                   *";
        echo "*************************************";
        echo "";
        if [ "${WEBSERVER_OPT}" = "apache" ]; then
		if [ ${OS} = "FreeBSD" ]; then
			echo "Type: /usr/local/etc/rc.d/httpd restart";
		elif [ -e ${DEBIAN_VERSION} ]; then
			echo "Type: /etc/init.d/httpd restart";
		else
			echo "Type: /sbin/service httpd restart";
		fi
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		if [ ${OS} = "FreeBSD" ]; then
			echo "Type: /usr/local/etc/rc.d/nginx restart";
		elif [ -e ${DEBIAN_VERSION} ]; then
			echo "Type: /etc/init.d/nginxrestart";
		else
			echo "Type: /sbin/service nginx restart";
		fi
	fi
}

####################################################


if [ $# -eq 2 ]; then
	USER_INPUT=0
	INPUT_VALUE=$2
fi

writeLog $@

case "$1" in
	all) doChecks; doAll;
		;;
	all_jail) doAll_jail;
		;;
	options) doChecks; options;
		;;
	create_options) create_options;
		;;
	used_configs) used_configs;
		;;
	apache) doChecks; doApache2;
		;;
	libjpeg) doLibJpeg; 
		;;
	libpng) doLibPng;
		;;
#	libevent) doLibevent;
#		;;
	coreutils) compile_coreutils;
		;;
	shell) compile_shell;
		;;
	smtp_mail) compile_nbsmtp;
		;;
	zlib) doZlib;
		;;
	cron) doCron;
		;;
	curl) doCURL;
		;;
	mcrypt) doMCrypt;
		;;
	mhash) doMHash;
		;;
	freetype) doFreeType;
		;;
	iconv) doIconv;
		;;
	icu) doICU;
		;;
	nginx) doChecks; doNginx;
		;;
	autoconf) doAutoconf;
		;;
	automake) doAutomake;
		;;
	m4) doM4;
		;;
	libtool) doLibtool;
		;;
	libxml2) doLibxml2;
		;;
	libxslt) doLibxslt;
		;;
	mod_ruid2) doModRuid2;
		;;
	mod_htscanner2) doModHtscanner;
		;;
	php_htscanner2)	doPHPHtscanner $2;
		;;
	mod_fastcgi) doModFastCGI;
		;;
	mod_fcgid) doModFCGID;
		;;
	clean) doClean;
		;;
	clean_old_webapps) doclean_old_webapps;
		;;
	clean_old_tarballs) doclean_old_tarballs;
		;;
	update) doUpdate;
		;;
	pcre) doPCRE;
		;;
	phpmyadmin) dophpMyAdmin;
		;;
	roundcube) doroundcube;
		;;
	squirrelmail) doSquirrelmail;
		;;
	update_script) doUpdateScript;
		;;
	update_data) doUpdateData;
		;;
	rewrite_confs) doChecks; doRewriteConfs;
		;;
	secure_php) secure_php
		;;
	update_da) doUpdateDA
		;;
	versions) doChecks; doVersions 1;
		;;
	versions_nobold) BOLD_OPT=no; boldon=""; boldoff=""; doChecks; doVersions 1;
		;;
	update_versions) doChecks; doVersions 0;
		;;
	update_webapps) doVersions 2;
		;;
	awstats) doawstats;
		;;
	webalizer) doWebalizer;
		;;
	proftpd) doChecks; doProftpd;
		;;
	pureftpd) doChecks; doPureftpd;
		;;
	zend) doZend;
		;;
	ioncube) doIoncube;
		;;
	mysql) doChecks; doMySQL;
		;;
	compile_mysql_binary) compile_mysql_binary;
		;;
	exim) doExim;
		;;
	exim_conf) doEximConf;
		;;
	php) doChecks; doPhp;
		;;
	php_expert) doChecks; doPhp_build $2 $3;
		;;
	php-ini) doChecks; doPhpIni;
		;;
	suphp) doChecks; doSuPhp;
		;;
	todovecot) convertToDovecot;
		;;
	dovecot) doDovecot;
		;;
	pigeonhole) doPigeonhole;
		;;
	spamassassin) dospamassassin;
		;;
	clamav) doclamav;
		;;
# Mailman is not yet supported
#	mailman) domailman;
#		;;
	set_fastest) set_fastest 0;
		;;
	set_fastest_quiet) set_fastest 1
		;;
	set) setOpt $2 $3;
		;;
	set_service) set_service $2 $3;
		;;
	* )	showHelp;
		do_exit 0;
		;;
esac

if [ "${CLEAN_OPT}" = "yes" ] && [ "$1" != "update" ] && [ "$1" != "update_data" ]; then
	doClean;
fi

do_exit 0;
